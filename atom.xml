<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>望伊如西の博客</title>
  
  <subtitle>兰芝生于幽谷，不以无人而不芳</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://dilidonglong.github.io/"/>
  <updated>2019-04-24T08:40:29.611Z</updated>
  <id>https://dilidonglong.github.io/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>磁盘分区</title>
    <link href="https://dilidonglong.github.io/2019/04/24/%E7%A3%81%E7%9B%98%E5%88%86%E5%8C%BA/"/>
    <id>https://dilidonglong.github.io/2019/04/24/磁盘分区/</id>
    <published>2019-04-24T08:40:02.896Z</published>
    <updated>2019-04-24T08:40:29.611Z</updated>
    
    <content type="html"><![CDATA[<h1 id="磁盘分区"><a href="#磁盘分区" class="headerlink" title="磁盘分区"></a>磁盘分区</h1><h2 id="1-磁盘分区"><a href="#1-磁盘分区" class="headerlink" title="1.磁盘分区"></a>1.磁盘分区</h2><p><strong>磁盘</strong>包含：碟片（细分为<strong>扇区</strong>和<strong>磁道</strong>）、机械手臂、磁头、主轴马达</p><p><strong>扇区</strong>大小分为<strong>512B</strong>和<strong>4KB</strong></p><h3 id="1-1第一个扇区（MBR）"><a href="#1-1第一个扇区（MBR）" class="headerlink" title="1.1第一个扇区（MBR）"></a>1.1第一个扇区（MBR）</h3><p><strong>磁盘第一个扇区</strong>存放<strong>启动引导程序</strong>和<strong>磁盘分区表</strong>（格式分为<strong>MBR</strong>[Windows支持]和<strong>GPT</strong>）</p><table><thead><tr><th style="text-align:center">MBR（master boot record）</th><th style="text-align:center">启动引导程序</th><th style="text-align:center">磁盘分区表</th></tr></thead><tbody><tr><td style="text-align:center">主引导记录容量（512B）</td><td style="text-align:center">446B</td><td style="text-align:center">64B</td></tr></tbody></table><p>MBR分区表的限制：</p><blockquote><ol><li>分区最多到2TB</li><li>MBR仅占一个扇区，被破坏后，很难恢复甚至无法恢复</li><li>MBR内的启动引导程序只有446B，无法存储较多的程序代码</li></ol></blockquote><h4 id="1-1-1MBR磁盘分区表"><a href="#1-1-1MBR磁盘分区表" class="headerlink" title="1.1.1MBR磁盘分区表"></a>1.1.1MBR<strong>磁盘分区表</strong></h4><blockquote><ol><li>分区表占64B，给磁盘划分分区，其实就是对这个分区表做设置</li><li>分区表默认最多把一个磁盘分为4个分区</li><li>分区分为<strong>主要分区</strong>和<strong>扩展分区</strong></li><li>要写入数据到磁盘时，会参考这个分区表</li></ol></blockquote><h4 id="1-1-2MBR扩展分区"><a href="#1-1-2MBR扩展分区" class="headerlink" title="1.1.2MBR扩展分区"></a>1.1.2MBR扩展分区</h4><p>由于磁盘分区表的限制，最多给磁盘划分出4个分区。那么我们可以利用额外的扇区来记录更多的分区信息。</p><p>在<strong>扩展分区</strong>的某个地方来记录在扩展分区里面的其他<strong>逻辑分区</strong>信息</p><blockquote><ol><li><p>扩展分区最多一个</p></li><li><p>逻辑分区是在扩展分区里面划分出来的</p></li><li><p>能格式化的是主要分区和逻辑分区，扩展分区不能被格式化</p></li><li>逻辑分区能划分多少个，依据不同操作系统来定</li></ol></blockquote><hr><h3 id="1-2GPT磁盘分区表"><a href="#1-2GPT磁盘分区表" class="headerlink" title="1.2GPT磁盘分区表"></a>1.2GPT磁盘分区表</h3><p>现在的磁盘越来越大，如果使用磁盘阵列等技术，那么在Linux平台下看到的磁盘大小可能就有几十个TB。使用MBR格式，要划分分区时，就要2TB/2TB地划分下去。这就可能划分出好几十个分区，为了解决这个问题，就有了GPT这种磁盘分区的格式。</p><p>以前扇区大小为512B，现在已经有了4KB的扇区。为兼容所有磁盘，会使用到<strong>逻辑区块地址LBA</strong>（logical block address），LBA默认是512B。在GPT这种格式下，将磁盘的所有区块使用LBA来规划。<code>可以理解为，如果一个扇区的容量是512B，然后LBA默认是512B的话，那么一个扇区就是一个区块。如果一个扇区容量是4KB=8*512B，那么一个区块地址就是1/8扇区</code></p><p><strong>第一个LBA</strong>称为<strong>LBA0</strong></p><p><strong>MBR使用第一个扇区来记录，而GPT使用了前34个LBA区块来记录。</strong>由于MBR只有一个区块，破坏就难以恢复。不同于MBR，<strong>GPT中会用磁盘的最后34个LBA做备份</strong>。</p><h4 id="1-2-1LBA0（MBR兼容区块）"><a href="#1-2-1LBA0（MBR兼容区块）" class="headerlink" title="1.2.1LBA0（MBR兼容区块）"></a>1.2.1LBA0（MBR兼容区块）</h4><table><thead><tr><th style="text-align:center">LBA0</th><th style="text-align:center">引导启动程序</th><th style="text-align:center">特殊标志符</th></tr></thead><tbody><tr><td style="text-align:center">逻辑区块地址0</td><td style="text-align:center">446B</td><td style="text-align:center">64B，表示磁盘使用GPT格式</td></tr></tbody></table><h4 id="1-2-2LBA1（GPT表头记录）"><a href="#1-2-2LBA1（GPT表头记录）" class="headerlink" title="1.2.2LBA1（GPT表头记录）"></a>1.2.2LBA1（GPT表头记录）</h4><p>记录磁盘分区表本身的位置和大小，同时记录了备份的GPT分区位置。</p><h4 id="1-2-3LBA2-33（实际记录分区信息处）"><a href="#1-2-3LBA2-33（实际记录分区信息处）" class="headerlink" title="1.2.3LBA2-33（实际记录分区信息处）"></a>1.2.3LBA2-33（实际记录分区信息处）</h4><p><strong>从LBA2区块开始，每个LBA可以记录4组分区记录</strong>。所以一个磁盘在默认情况下，可以划分4*32=128个分区。</p><p>在MBR中，分区表的大小是64B，而在GPT中是512B。</p><p>一个区块记录4组分区，所以在GPT的分区表中，一组分区记录可以占512/4=128B的空间大小。</p><p>在这128B的空间中使用64bit来记录开始和结束的扇区号码</p><p>每个分区的最大容量限制就是：$2^{64}*512B=8ZB$</p><h2 id="2-启动程序"><a href="#2-启动程序" class="headerlink" title="2.启动程序"></a>2.启动程序</h2><p>CMOS是一个嵌入在主板的存储器，存储着各项硬件参数</p><p>BIOS是一个写入到主板的固件（<strong>固件是</strong>写入到硬件上的一个<strong>软件程序</strong>）</p><blockquote><ol><li><p>计算机系统在启动时，主动执行的第一个程序就是BIOS</p></li><li><p>BIOS执行后，会分析计算机里面的存储设备。比如发现了硬盘，BIOS就去找那个能启动的硬盘</p></li><li><p>找到该硬盘，就读取第一个扇区的MBR位置，找到那个446B的启动引导程序</p><p>以上BIOS的任务完成，接下来就是启动引导程序干活了</p></li><li><p>启动引导程序的目的是加载内核文件</p><p>加载完后，启动引导程序的活也干完了</p></li><li><p>之后就是内核文件开始工作，再之后就是把任务都交给我们熟悉的操作系统完成</p></li></ol></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;磁盘分区&quot;&gt;&lt;a href=&quot;#磁盘分区&quot; class=&quot;headerlink&quot; title=&quot;磁盘分区&quot;&gt;&lt;/a&gt;磁盘分区&lt;/h1&gt;&lt;h2 id=&quot;1-磁盘分区&quot;&gt;&lt;a href=&quot;#1-磁盘分区&quot; class=&quot;headerlink&quot; title=&quot;1.磁盘分
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://dilidonglong.github.io/2019/04/24/hello-world/"/>
    <id>https://dilidonglong.github.io/2019/04/24/hello-world/</id>
    <published>2019-04-24T06:49:59.574Z</published>
    <updated>2019-04-24T06:49:59.574Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
