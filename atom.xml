<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>望伊如西の博客</title>
  
  <subtitle>兰芝生于幽谷，不以无人而不芳</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://dilidonglong.github.io/"/>
  <updated>2019-08-11T13:38:51.991Z</updated>
  <id>https://dilidonglong.github.io/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>grep/正则表达式/awk/sed</title>
    <link href="https://dilidonglong.github.io/2019/08/11/grep-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F-awk/"/>
    <id>https://dilidonglong.github.io/2019/08/11/grep-正则表达式-awk/</id>
    <published>2019-08-11T13:30:15.000Z</published>
    <updated>2019-08-11T13:38:51.991Z</updated>
    
    <content type="html"><![CDATA[<p>Linux三剑客</p><p>grep适合单纯的查找或是匹配文本</p><p>sed适合编辑我们查找到的文本</p><p>awk对于查找到的文本，可以进行格式化处理，即输出成我们想要看到的样子</p><p>正则表达式是公式。我们可以在三剑客中按（正则表达式）条件查找到我们需要的东西</p><h2 id="1-grep"><a href="#1-grep" class="headerlink" title="1.grep"></a>1.<a href="http://www.zsythink.net/archives/1733" target="_blank" rel="noopener">grep</a></h2><p>grep（global search regular expression and print out the line）</p><ul><li>grep  “需要搜索的字符”</li><li>grep  -i  “需要搜索的字符”               不区分大小写</li><li>grep  -n  “需要搜索的字符”              在行首显示字符所在行号</li><li>grep  –color=auto  “需要搜索的字符”           字符用颜色显示</li><li>grep  –color  “需要搜索的字符”           字符用颜色显示</li><li>grep  -c  “需要搜索的字符”            显示字符一共所在多少行</li><li>grep  -o  “需要搜索的字符”           显示字符，在单独的一行输出</li><li>grep  -Bx  “需要搜索的字符”           显示字符所在的行及其前x行</li><li>grep  -Ax  “需要搜索的字符”           显示字符所在的行及其后x行</li><li>grep  -Cx  “需要搜索的字符”           显示字符所在的行及其前后x行</li><li>grep  -w  “需要搜索的字符”          精确显示字符所在的行，比如字符是abc，就不会显示abcd所在行</li><li>grep  -v  “需要搜索的字符”           显示不包含该字符所在的行</li><li>grep  -e  “需要搜索的字符”  -e  “需要搜索的字符2”            显示多个目标字符所在行</li></ul><hr><h2 id="2-正则表达式"><a href="#2-正则表达式" class="headerlink" title="2.正则表达式"></a>2.正则表达式</h2><h3 id="2-1基本正则表达式"><a href="#2-1基本正则表达式" class="headerlink" title="2.1基本正则表达式"></a>2.1基本正则表达式</h3><p>grep  “^hello”             打印出以hello开头的行</p><p>grep  “hello$”             打印出以hello结尾的行</p><p>grep  “^hello$”             打印出只有hello单词的行</p><p>grep  “^$”                    打印出空行，该行中有空格也不能算是一个空行</p><p>grep  “\ &lt; hello”          打印出以hello作为一个单词词首的一行</p><p>grep  “hello\ &gt;”          打印出以hello作为一个单词词尾的一行</p><p>grep  “\ &lt; hello\ &gt;”          打印出以hello作为一个单词的一行</p><p>同时可以使用\ b来表示锚定词首或词尾，即来替代\ &gt;和\ &lt;</p><p>使用\ B可以表示词首或词尾不是某个单词</p><hr><h4 id="连续次数的匹配"><a href="#连续次数的匹配" class="headerlink" title="连续次数的匹配"></a><a href="http://www.zsythink.net/archives/1893" target="_blank" rel="noopener">连续次数的匹配</a></h4><p>grep  “a\ {3\ }”           打印出单词中有3个连续a的一行</p><p>grep  “\ &lt; a\ {3\ } \ &gt;”           打印出单词中<strong>只有</strong>3个连续a的一行（以连续3个a作为一个单词）</p><p>grep  “a\ {2,4\ } “           打印出单词中至少有连续2个a或最多连续4个a的一行</p><p>grep  “a\ { ,4\ } “           打印出单词中最多连续4个a的一行</p><p>grep  “a\ {2,\ } “           打印出单词中至少连续2个a的一行</p><p>grep  “a*”                   打印出单词中有n个a的一行</p><p>grep  “a.*”                   打印出单词中有a且a后面接上任意个数目及字符的行</p><p>grep  “a\ ?”                  打印出单词中能匹配到0个或1个a的行（其实有2个以上的a也能匹配到，因为2个以上的a包含0个或1个a）</p><p>grep  “a\ +”                  打印出单词中能匹配到至少1个a的行</p><hr><h4 id="常用符号"><a href="#常用符号" class="headerlink" title="常用符号"></a><a href="http://www.zsythink.net/archives/1921" target="_blank" rel="noopener">常用符号</a></h4><p>grep  “a…”           打印出单词中能匹配到a后面接上3个任意字符的行</p><p>grep  “a[[:alpha:]]\ { 3\ }”            打印出单词中能匹配到a后面接上了3个任意大小写字母的行</p><p>[[:alpha:]]  表示任意大小写字母<br>[[:lower:]]  表示任意小写字母<br>[[:upper:]]  表示任意大写字母<br>[[:digit:]]  表示0到9之间的任意单个数字（包括0和9）<br>[[:alnum:]]  表示任意数字或字母<br>[[:space:]]  表示任意空白字符，包括”空格”、”tab键”等。<br>[[:punct:]]  表示任意标点符号</p><p>[0-9]与[[:digit:]]等效<br>[a-z]与[[:lower:]]等效<br>[A-Z]与[[:upper:]]等效<br>[a-zA-Z]与[[:alpha:]]等效<br>[a-zA-Z0-9]与[[:alnum:]]等效</p><p>grep  “a[ ^[:alpha:]]\ { 3\ }”       打印出单词中能匹配到a后面接上了3个不是大小写字母的行</p><p>[^ 0-9]与[ ^[:digit:]]等效<br>[ ^ a-z]与[ ^[:lower:]]等效<br>[ ^ A-Z]与[ ^[:upper:]]等效<br>[ ^ a-zA-Z]与[ ^[:alpha:]]等效<br>[ ^ a-zA-Z0-9]与[ ^[:alnum:]]等效</p><p>grep  “a[efg]”       打印出单词中能匹配到a后面接上了e或f或g的行</p><p>grep  “a[ ^efg]”       打印出单词中能匹配到a后面接上不是e或f或g的行</p><p>同时还有简短格式，但是并非所有正则表达式解析器都可以识别。使用的时候可以尝试加上-P参数<br>\d 表示任意单个0到9的数字<br>\D 表示任意单个非数字字符<br>\t 表示匹配单个横向制表符（相当于一个tab键）<br>\s表示匹配单个空白字符，包括”空格”，”tab制表符”等<br>\S表示匹配单个非空白字符</p><hr><h4 id="分组及向后引用"><a href="#分组及向后引用" class="headerlink" title="分组及向后引用"></a><a href="http://www.zsythink.net/archives/1952" target="_blank" rel="noopener">分组及向后引用</a></h4><p>grep  “\ (hello\ ) \ {2\ }”                 以hello为一个组（第一个分组），打印出单词中能匹配到2次hello的行</p><p>grep  “\ (hello\ ) word \1”             以hello为一个组，打印出有hello word hello的行。其中\1表示第一个分组</p><hr><h4 id="转义符"><a href="#转义符" class="headerlink" title="转义符"></a><a href="http://www.zsythink.net/archives/1977" target="_blank" rel="noopener">转义符</a></h4><p>grep  “a\ .\ .”                     打印出单词中能匹配到a..的行</p><p>grep  “a\ <em>\ </em>“                     打印出单词中能匹配到a**的行</p><p>grep  ‘a\ \ \ \ ‘                     打印出单词中能匹配到a\ \的行，注意此时使用单引号</p><hr><h3 id="2-2扩展正则表达式"><a href="#2-2扩展正则表达式" class="headerlink" title="2.2扩展正则表达式"></a>2.2<a href="http://www.zsythink.net/archives/1999" target="_blank" rel="noopener">扩展正则表达式</a></h3><p>使用扩展正则表达式时，要加上-E参数</p><p>在扩展正则表达式中，有|这个符号，按住“shift键”和“\键”就可以打出</p><p>grep  -E  “(com|net)$”     打印出以com或net结尾的行</p><p>在基本正则表达式中需要加\，但是扩展中不需要的如下：</p><p>?  表示匹配其前面的字符0或1次</p><p>+  表示匹配其前面的字符至少1次，或者连续多次，连续次数上不封顶。</p><p>{n} 表示前面的字符连续出现n次，将会被匹配到。</p><p>{x,y} 表示之前的字符至少连续出现x次，最多连续出现y次，都能被匹配到，换句话说，只要之前的字符连续出现的次数在x与y之间，即可被匹配到。</p><p>{,n} 表示之前的字符连续出现至多n次，最少0次，都会被匹配到。</p><p>{n,}表示之前的字符连续出现至少n次，才会被匹配到。</p><p>分组与后向引用<br>( ) 表示分组，我们可以将其中的内容当做一个整体，分组可以嵌套。<br>(ab) 表示将ab当做一个整体去处理。<br>\1 表示引用整个表达式中第1个分组中的正则匹配到的结果。<br>\2 表示引用整个表达式中第2个分组中的正则匹配到的结果。</p><hr><h2 id="3-awk"><a href="#3-awk" class="headerlink" title="3.awk"></a>3.awk</h2><blockquote><p>awk的基本语法结构</p><p>awk  [options]  ‘Pattern  {Action}’  file1,file2 </p><p>如果是对命令执行awk操作而不是文件，那么可以使用命令+管道符（|）+awk</p></blockquote><h3 id="3-1基础入门"><a href="#3-1基础入门" class="headerlink" title="3.1基础入门"></a><a href="http://www.zsythink.net/archives/1336" target="_blank" rel="noopener">3.1基础入门</a></h3><p>df  |awk  ‘{print  $5}’     表示输出df信息的第五列</p><p>df  |awk  ‘{print  $4,$5}’     表示输出df信息的第四和第五列</p><ul><li><p>除了输出文本或命令输出信息中的列，我们也可以自己添加信息，只需在””中添加即可</p><p>awk  ‘{print  “anychar:”$4,”anychar2”$5}’  file1</p></li><li><p>如果写成如下格式，那么输出的就不是第五列，而是输出$5</p><p>df  |awk  ‘{print  “$5”}’ </p></li></ul><p>Pattern中文含义是模式，特殊的2种模式BEGIN和END</p><ul><li><p>在执行文件1（file1）前，先执行BEGIN的内容，即先把aaa输出，然后再对文件1做处理，处理方式就是后面写的动作</p><p>awk  ‘BEGIN{print  “aaa”}  {print  “anychar:”$4,”anychar2”$5}’  file1</p></li><li><p>在执行完对文件1（file1）的操作后，再在结尾执行END的内容，即输出aaa</p><p>awk  ‘{print  “anychar:”$4,”anychar2”$5}  END{print  “aaa”}’  file1</p></li></ul><h3 id="3-2分隔符"><a href="#3-2分隔符" class="headerlink" title="3.2分隔符"></a><a href="http://www.zsythink.net/archives/1357" target="_blank" rel="noopener">3.2分隔符</a></h3><h4 id="3-2-1输入分割符"><a href="#3-2-1输入分割符" class="headerlink" title="3.2.1输入分割符"></a>3.2.1输入分割符</h4><p>文本输入的时候，默认是以空格作为分割符号的，但是我们可以手工指定在文本中的一行，该以什么符号作为区分一列的分割符</p><p> awk  -F#  ‘{print  $4,$5}’  file1            通过-F参数，来指定#作为输入分割符</p><p> awk  -v  FS=’#’  ‘{print  $4,$5}’  file1    通过-v参数，来修改系统内置的输入分割符变量，效果同上</p><h4 id="3-2-2输出分割符"><a href="#3-2-2输出分割符" class="headerlink" title="3.2.2输出分割符"></a>3.2.2输出分割符</h4><p>文本输出的时候，默认也是以空格作为分割符号的，但是我们可以指定其他的符号来连接不同的列</p><p>awk  -v  OFS=’++++’  ‘{print  $4,$5}’  file1    通过-v参数，来修改系统内置的输出分割符变量</p><p>注：输出分割时，用“，”来区分。如果是想把两列连在一起，可以写成以下形式</p><p>awk   ‘{print  $4$5}’  file1</p><h3 id="3-3awk变量"><a href="#3-3awk变量" class="headerlink" title="3.3awk变量"></a>3.3awk变量</h3><h4 id="3-3-1内置变量"><a href="#3-3-1内置变量" class="headerlink" title="3.3.1内置变量"></a>3.3.1内置变量</h4><table><thead><tr><th style="text-align:center">名称</th><th style="text-align:center">代码</th></tr></thead><tbody><tr><td style="text-align:center">输入分割符</td><td style="text-align:center">FS</td></tr><tr><td style="text-align:center">输出分隔符</td><td style="text-align:center">OFS</td></tr><tr><td style="text-align:center">输入记录分隔符</td><td style="text-align:center">RS</td></tr><tr><td style="text-align:center">输出记录分割符</td><td style="text-align:center">ORS</td></tr><tr><td style="text-align:center">当前行被分割成了几列</td><td style="text-align:center">NF</td></tr><tr><td style="text-align:center">行号</td><td style="text-align:center">NR</td></tr><tr><td style="text-align:center">各文件分别记录行号</td><td style="text-align:center">FNR</td></tr><tr><td style="text-align:center">当前文件名</td><td style="text-align:center">FILENAME</td></tr><tr><td style="text-align:center">命令行参数的个数</td><td style="text-align:center">ARGC</td></tr><tr><td style="text-align:center">保存的是命令行所给的各参数</td><td style="text-align:center">ARGV</td></tr></tbody></table><p>awk   ‘{print  NR,NF}’  file1         表示输出文件1中的行号及该行的列数</p><p>FS和OFS都是以每行各个字符间隔为单位</p><p>RS和ORS是来判断以什么条件来作为换行，默认情况下，系统认为是回车即换行</p><h4 id="3-3-2自定义变量"><a href="#3-3-2自定义变量" class="headerlink" title="3.3.2自定义变量"></a>3.3.2自定义变量</h4><p>awk  -v  变量名称=”变量值”</p><p>eg： awk  -v  mychar=”hahaha”   ‘BEGIN｛print  mychar｝’</p><p>or： awk  -v   ‘BEGIN｛mychar=”hahaha” ; print  mychar｝’</p><h3 id="3-4格式化"><a href="#3-4格式化" class="headerlink" title="3.4格式化"></a><a href="http://www.zsythink.net/archives/1421" target="_blank" rel="noopener">3.4格式化</a></h3><p><img src="/2019/08/11/grep-正则表达式-awk/1.png" alt="1551853553486"></p><h3 id="3-5模式"><a href="#3-5模式" class="headerlink" title="3.5模式"></a><a href="http://www.zsythink.net/archives/1426" target="_blank" rel="noopener">3.5模式</a></h3><p><img src="/2019/08/11/grep-正则表达式-awk/2.png" alt="1551853672703"></p><p>使用正则表达式</p><p>awk  ‘/正则表达式/ {print $0}’  file1</p><p><img src="/2019/08/11/grep-正则表达式-awk/3.png" alt="1551853884184"></p><p><img src="/2019/08/11/grep-正则表达式-awk/4.png" alt="1551854001928"></p><h3 id="3-6动作"><a href="#3-6动作" class="headerlink" title="3.6动作"></a><a href="http://www.zsythink.net/archives/2046" target="_blank" rel="noopener">3.6动作</a></h3><p><img src="/2019/08/11/grep-正则表达式-awk/5.png" alt="1551854206133"></p><p><img src="/2019/08/11/grep-正则表达式-awk/6.png" alt="1551854262131"></p><hr><h2 id="4-sed"><a href="#4-sed" class="headerlink" title="4.sed"></a>4.sed</h2><blockquote><p>awk的基本语法结构</p><p>awk  [options]  ‘动作’</p></blockquote><h3 id="4-1新增与删除"><a href="#4-1新增与删除" class="headerlink" title="4.1新增与删除"></a>4.1新增与删除</h3><p>sed  ‘sed  2,5d’             其中d表示删除，意味删除2到第5行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">[root@vultr ~]<span class="comment"># nl /etc/passwd</span></span><br><span class="line">     1root:x:0:0:root:/root:/bin/bash</span><br><span class="line">     2bin:x:1:1:bin:/bin:/sbin/nologin</span><br><span class="line">     3daemon:x:2:2:daemon:/sbin:/sbin/nologin</span><br><span class="line">     4adm:x:3:4:adm:/var/adm:/sbin/nologin</span><br><span class="line">     5lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin</span><br><span class="line">     6sync:x:5:0:sync:/sbin:/bin/sync</span><br><span class="line">     7shutdown:x:6:0:shutdown:/sbin:/sbin/shutdown</span><br><span class="line">     8halt:x:7:0:halt:/sbin:/sbin/halt</span><br><span class="line">     9mail:x:8:12:mail:/var/spool/mail:/sbin/nologin</span><br><span class="line">    10operator:x:11:0:operator:/root:/sbin/nologin</span><br><span class="line">    11games:x:12:100:games:/usr/games:/sbin/nologin</span><br><span class="line">    12ftp:x:14:50:FTP User:/var/ftp:/sbin/nologin</span><br><span class="line">    13nobody:x:99:99:Nobody:/:/sbin/nologin</span><br><span class="line">    14systemd-network:x:192:192:systemd Network Management:/:/sbin/nologin</span><br><span class="line">    15dbus:x:81:81:System message bus:/:/sbin/nologin</span><br><span class="line">    16polkitd:x:999:998:User <span class="keyword">for</span> polkitd:/:/sbin/nologin</span><br><span class="line">    17ntp:x:38:38::/etc/ntp:/sbin/nologin</span><br><span class="line">    18sshd:x:74:74:Privilege-separated SSH:/var/empty/sshd:/sbin/nologin</span><br><span class="line">    19postfix:x:89:89::/var/spool/postfix:/sbin/nologin</span><br><span class="line">    20chrony:x:998:996::/var/lib/chrony:/sbin/nologin</span><br><span class="line">    21tcpdump:x:72:72::/:/sbin/nologin</span><br><span class="line">[root@vultr ~]<span class="comment"># </span></span><br><span class="line">[root@vultr ~]<span class="comment"># nl /etc/passwd | sed '2,20d'</span></span><br><span class="line">     1root:x:0:0:root:/root:/bin/bash</span><br><span class="line">    21tcpdump:x:72:72::/:/sbin/nologin</span><br></pre></td></tr></table></figure><p>sed  ‘2a  字符串’，在第2行后面插入一字符串，i表示在第n行前插入字符串</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">[root@vultr ~]<span class="comment"># nl /etc/passwd | sed '2,20d' |sed '1a nihaoa'</span></span><br><span class="line">     1root:x:0:0:root:/root:/bin/bash</span><br><span class="line">nihaoa</span><br><span class="line">    21tcpdump:x:72:72::/:/sbin/nologin</span><br><span class="line">[root@vultr ~]<span class="comment"># </span></span><br><span class="line">[root@vultr ~]<span class="comment"># </span></span><br><span class="line">[root@vultr ~]<span class="comment"># nl /etc/passwd | sed '2,20d' |sed '1i nihaoa'</span></span><br><span class="line">nihaoa</span><br><span class="line">     1root:x:0:0:root:/root:/bin/bash</span><br><span class="line">    21tcpdump:x:72:72::/:/sbin/nologin</span><br><span class="line">[root@vultr ~]<span class="comment"># </span></span><br><span class="line">[root@vultr ~]<span class="comment"># </span></span><br><span class="line">[root@vultr ~]<span class="comment"># nl /etc/passwd | sed '2,20d' |sed '2i nihaoa'</span></span><br><span class="line">     1root:x:0:0:root:/root:/bin/bash</span><br><span class="line">nihaoa</span><br><span class="line">    21tcpdump:x:72:72::/:/sbin/nologin</span><br><span class="line">[root@vultr ~]<span class="comment"># </span></span><br><span class="line">[root@vultr ~]<span class="comment"># </span></span><br><span class="line">[root@vultr ~]<span class="comment"># nl /etc/passwd | sed '2,20d' |sed '20i nihaoa'</span></span><br><span class="line">     1root:x:0:0:root:/root:/bin/bash</span><br><span class="line">    21tcpdump:x:72:72::/:/sbin/nologin</span><br><span class="line">[root@vultr ~]<span class="comment">#</span></span><br></pre></td></tr></table></figure><p>想要增加多行，可以先输入\，然后回车，就会跳转到下一行。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[root@vultr ~]<span class="comment"># nl /etc/passwd | sed '2,19d' |sed '2a nihaoa \&gt;zaijian'</span></span><br><span class="line">     1root:x:0:0:root:/root:/bin/bash</span><br><span class="line">    20chrony:x:998:996::/var/lib/chrony:/sbin/nologin</span><br><span class="line">nihaoa &gt;zaijian</span><br><span class="line">    21tcpdump:x:72:72::/:/sbin/nologin</span><br><span class="line">[root@vultr ~]<span class="comment"># </span></span><br><span class="line">[root@vultr ~]<span class="comment"># nl /etc/passwd | sed '2,19d' |sed '2a nihaoa \</span></span><br><span class="line">&gt; zaijian<span class="string">'</span></span><br><span class="line"><span class="string">     1root:x:0:0:root:/root:/bin/bash</span></span><br><span class="line"><span class="string">    20chrony:x:998:996::/var/lib/chrony:/sbin/nologin</span></span><br><span class="line"><span class="string">nihaoa </span></span><br><span class="line"><span class="string">zaijian</span></span><br><span class="line"><span class="string">    21tcpdump:x:72:72::/:/sbin/nologin</span></span><br><span class="line"><span class="string">[root@vultr ~]#</span></span><br></pre></td></tr></table></figure><h3 id="4-2替代"><a href="#4-2替代" class="headerlink" title="4.2替代"></a>4.2替代</h3><p>sed  ‘2,19c  字符串’，c表示从2到19行被该字符串替代掉</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@vultr ~]<span class="comment"># nl /etc/passwd | sed '2,19c 2 to 19 no show'</span></span><br><span class="line">     1root:x:0:0:root:/root:/bin/bash</span><br><span class="line">2 to 19 no show</span><br><span class="line">    20chrony:x:998:996::/var/lib/chrony:/sbin/nologin</span><br><span class="line">    21tcpdump:x:72:72::/:/sbin/nologin</span><br><span class="line">[root@vultr ~]<span class="comment">#</span></span><br></pre></td></tr></table></figure><p>sed  -n  ‘2,4p’，表示显示第2到第4行，-n参数需要加上</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">[root@vultr ~]<span class="comment"># nl /etc/passwd | sed '2,4p'</span></span><br><span class="line">     1root:x:0:0:root:/root:/bin/bash</span><br><span class="line">     2bin:x:1:1:bin:/bin:/sbin/nologin</span><br><span class="line">     2bin:x:1:1:bin:/bin:/sbin/nologin</span><br><span class="line">     3daemon:x:2:2:daemon:/sbin:/sbin/nologin</span><br><span class="line">     3daemon:x:2:2:daemon:/sbin:/sbin/nologin</span><br><span class="line">     4adm:x:3:4:adm:/var/adm:/sbin/nologin</span><br><span class="line">     4adm:x:3:4:adm:/var/adm:/sbin/nologin</span><br><span class="line">     5lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin</span><br><span class="line">     6sync:x:5:0:sync:/sbin:/bin/sync</span><br><span class="line">     7shutdown:x:6:0:shutdown:/sbin:/sbin/shutdown</span><br><span class="line">     8halt:x:7:0:halt:/sbin:/sbin/halt</span><br><span class="line">     9mail:x:8:12:mail:/var/spool/mail:/sbin/nologin</span><br><span class="line">    10operator:x:11:0:operator:/root:/sbin/nologin</span><br><span class="line">    11games:x:12:100:games:/usr/games:/sbin/nologin</span><br><span class="line">    12ftp:x:14:50:FTP User:/var/ftp:/sbin/nologin</span><br><span class="line">    13nobody:x:99:99:Nobody:/:/sbin/nologin</span><br><span class="line">    14systemd-network:x:192:192:systemd Network Management:/:/sbin/nologin</span><br><span class="line">    15dbus:x:81:81:System message bus:/:/sbin/nologin</span><br><span class="line">    16polkitd:x:999:998:User <span class="keyword">for</span> polkitd:/:/sbin/nologin</span><br><span class="line">    17ntp:x:38:38::/etc/ntp:/sbin/nologin</span><br><span class="line">    18sshd:x:74:74:Privilege-separated SSH:/var/empty/sshd:/sbin/nologin</span><br><span class="line">    19postfix:x:89:89::/var/spool/postfix:/sbin/nologin</span><br><span class="line">    20chrony:x:998:996::/var/lib/chrony:/sbin/nologin</span><br><span class="line">    21tcpdump:x:72:72::/:/sbin/nologin</span><br><span class="line">[root@vultr ~]<span class="comment"># </span></span><br><span class="line">[root@vultr ~]<span class="comment"># nl /etc/passwd | sed -n '2,4p'</span></span><br><span class="line">     2bin:x:1:1:bin:/bin:/sbin/nologin</span><br><span class="line">     3daemon:x:2:2:daemon:/sbin:/sbin/nologin</span><br><span class="line">     4adm:x:3:4:adm:/var/adm:/sbin/nologin</span><br></pre></td></tr></table></figure><p>sed  ‘s/需要被替代的字符串/替换后的字符串/g’</p><p><img src="/2019/08/11/grep-正则表达式-awk/7.png" alt="1552289061967"></p><h3 id="4-3直接在文本中做修改操作"><a href="#4-3直接在文本中做修改操作" class="headerlink" title="4.3直接在文本中做修改操作"></a>4.3直接在文本中做修改操作</h3><p><img src="/2019/08/11/grep-正则表达式-awk/8.png" alt="1552289476341"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Linux三剑客&lt;/p&gt;
&lt;p&gt;grep适合单纯的查找或是匹配文本&lt;/p&gt;
&lt;p&gt;sed适合编辑我们查找到的文本&lt;/p&gt;
&lt;p&gt;awk对于查找到的文本，可以进行格式化处理，即输出成我们想要看到的样子&lt;/p&gt;
&lt;p&gt;正则表达式是公式。我们可以在三剑客中按（正则表达式）条件查找
      
    
    </summary>
    
      <category term="linux" scheme="https://dilidonglong.github.io/categories/linux/"/>
    
    
  </entry>
  
  <entry>
    <title>grep/正则表达式/awk/sed</title>
    <link href="https://dilidonglong.github.io/2019/08/11/grep-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F-awk-sed/"/>
    <id>https://dilidonglong.github.io/2019/08/11/grep-正则表达式-awk-sed/</id>
    <published>2019-08-11T13:30:15.000Z</published>
    <updated>2019-08-11T13:31:44.569Z</updated>
    
    <content type="html"><![CDATA[<p>Linux三剑客</p><p>grep适合单纯的查找或是匹配文本</p><p>sed适合编辑我们查找到的文本</p><p>awk对于查找到的文本，可以进行格式化处理，即输出成我们想要看到的样子</p><p>正则表达式是公式。我们可以在三剑客中按（正则表达式）条件查找到我们需要的东西</p><h2 id="1-grep"><a href="#1-grep" class="headerlink" title="1.grep"></a>1.<a href="http://www.zsythink.net/archives/1733" target="_blank" rel="noopener">grep</a></h2><p>grep（global search regular expression and print out the line）</p><ul><li>grep  “需要搜索的字符”</li><li>grep  -i  “需要搜索的字符”               不区分大小写</li><li>grep  -n  “需要搜索的字符”              在行首显示字符所在行号</li><li>grep  –color=auto  “需要搜索的字符”           字符用颜色显示</li><li>grep  –color  “需要搜索的字符”           字符用颜色显示</li><li>grep  -c  “需要搜索的字符”            显示字符一共所在多少行</li><li>grep  -o  “需要搜索的字符”           显示字符，在单独的一行输出</li><li>grep  -Bx  “需要搜索的字符”           显示字符所在的行及其前x行</li><li>grep  -Ax  “需要搜索的字符”           显示字符所在的行及其后x行</li><li>grep  -Cx  “需要搜索的字符”           显示字符所在的行及其前后x行</li><li>grep  -w  “需要搜索的字符”          精确显示字符所在的行，比如字符是abc，就不会显示abcd所在行</li><li>grep  -v  “需要搜索的字符”           显示不包含该字符所在的行</li><li>grep  -e  “需要搜索的字符”  -e  “需要搜索的字符2”            显示多个目标字符所在行</li></ul><hr><h2 id="2-正则表达式"><a href="#2-正则表达式" class="headerlink" title="2.正则表达式"></a>2.正则表达式</h2><h3 id="2-1基本正则表达式"><a href="#2-1基本正则表达式" class="headerlink" title="2.1基本正则表达式"></a>2.1基本正则表达式</h3><p>grep  “^hello”             打印出以hello开头的行</p><p>grep  “hello$”             打印出以hello结尾的行</p><p>grep  “^hello$”             打印出只有hello单词的行</p><p>grep  “^$”                    打印出空行，该行中有空格也不能算是一个空行</p><p>grep  “\ &lt; hello”          打印出以hello作为一个单词词首的一行</p><p>grep  “hello\ &gt;”          打印出以hello作为一个单词词尾的一行</p><p>grep  “\ &lt; hello\ &gt;”          打印出以hello作为一个单词的一行</p><p>同时可以使用\ b来表示锚定词首或词尾，即来替代\ &gt;和\ &lt;</p><p>使用\ B可以表示词首或词尾不是某个单词</p><hr><h4 id="连续次数的匹配"><a href="#连续次数的匹配" class="headerlink" title="连续次数的匹配"></a><a href="http://www.zsythink.net/archives/1893" target="_blank" rel="noopener">连续次数的匹配</a></h4><p>grep  “a\ {3\ }”           打印出单词中有3个连续a的一行</p><p>grep  “\ &lt; a\ {3\ } \ &gt;”           打印出单词中<strong>只有</strong>3个连续a的一行（以连续3个a作为一个单词）</p><p>grep  “a\ {2,4\ } “           打印出单词中至少有连续2个a或最多连续4个a的一行</p><p>grep  “a\ { ,4\ } “           打印出单词中最多连续4个a的一行</p><p>grep  “a\ {2,\ } “           打印出单词中至少连续2个a的一行</p><p>grep  “a*”                   打印出单词中有n个a的一行</p><p>grep  “a.*”                   打印出单词中有a且a后面接上任意个数目及字符的行</p><p>grep  “a\ ?”                  打印出单词中能匹配到0个或1个a的行（其实有2个以上的a也能匹配到，因为2个以上的a包含0个或1个a）</p><p>grep  “a\ +”                  打印出单词中能匹配到至少1个a的行</p><hr><h4 id="常用符号"><a href="#常用符号" class="headerlink" title="常用符号"></a><a href="http://www.zsythink.net/archives/1921" target="_blank" rel="noopener">常用符号</a></h4><p>grep  “a…”           打印出单词中能匹配到a后面接上3个任意字符的行</p><p>grep  “a[[:alpha:]]\ { 3\ }”            打印出单词中能匹配到a后面接上了3个任意大小写字母的行</p><p>[[:alpha:]]  表示任意大小写字母<br>[[:lower:]]  表示任意小写字母<br>[[:upper:]]  表示任意大写字母<br>[[:digit:]]  表示0到9之间的任意单个数字（包括0和9）<br>[[:alnum:]]  表示任意数字或字母<br>[[:space:]]  表示任意空白字符，包括”空格”、”tab键”等。<br>[[:punct:]]  表示任意标点符号</p><p>[0-9]与[[:digit:]]等效<br>[a-z]与[[:lower:]]等效<br>[A-Z]与[[:upper:]]等效<br>[a-zA-Z]与[[:alpha:]]等效<br>[a-zA-Z0-9]与[[:alnum:]]等效</p><p>grep  “a[ ^[:alpha:]]\ { 3\ }”       打印出单词中能匹配到a后面接上了3个不是大小写字母的行</p><p>[^ 0-9]与[ ^[:digit:]]等效<br>[ ^ a-z]与[ ^[:lower:]]等效<br>[ ^ A-Z]与[ ^[:upper:]]等效<br>[ ^ a-zA-Z]与[ ^[:alpha:]]等效<br>[ ^ a-zA-Z0-9]与[ ^[:alnum:]]等效</p><p>grep  “a[efg]”       打印出单词中能匹配到a后面接上了e或f或g的行</p><p>grep  “a[ ^efg]”       打印出单词中能匹配到a后面接上不是e或f或g的行</p><p>同时还有简短格式，但是并非所有正则表达式解析器都可以识别。使用的时候可以尝试加上-P参数<br>\d 表示任意单个0到9的数字<br>\D 表示任意单个非数字字符<br>\t 表示匹配单个横向制表符（相当于一个tab键）<br>\s表示匹配单个空白字符，包括”空格”，”tab制表符”等<br>\S表示匹配单个非空白字符</p><hr><h4 id="分组及向后引用"><a href="#分组及向后引用" class="headerlink" title="分组及向后引用"></a><a href="http://www.zsythink.net/archives/1952" target="_blank" rel="noopener">分组及向后引用</a></h4><p>grep  “\ (hello\ ) \ {2\ }”                 以hello为一个组（第一个分组），打印出单词中能匹配到2次hello的行</p><p>grep  “\ (hello\ ) word \1”             以hello为一个组，打印出有hello word hello的行。其中\1表示第一个分组</p><hr><h4 id="转义符"><a href="#转义符" class="headerlink" title="转义符"></a><a href="http://www.zsythink.net/archives/1977" target="_blank" rel="noopener">转义符</a></h4><p>grep  “a\ .\ .”                     打印出单词中能匹配到a..的行</p><p>grep  “a\ <em>\ </em>“                     打印出单词中能匹配到a**的行</p><p>grep  ‘a\ \ \ \ ‘                     打印出单词中能匹配到a\ \的行，注意此时使用单引号</p><hr><h3 id="2-2扩展正则表达式"><a href="#2-2扩展正则表达式" class="headerlink" title="2.2扩展正则表达式"></a>2.2<a href="http://www.zsythink.net/archives/1999" target="_blank" rel="noopener">扩展正则表达式</a></h3><p>使用扩展正则表达式时，要加上-E参数</p><p>在扩展正则表达式中，有|这个符号，按住“shift键”和“\键”就可以打出</p><p>grep  -E  “(com|net)$”     打印出以com或net结尾的行</p><p>在基本正则表达式中需要加\，但是扩展中不需要的如下：</p><p>?  表示匹配其前面的字符0或1次</p><p>+  表示匹配其前面的字符至少1次，或者连续多次，连续次数上不封顶。</p><p>{n} 表示前面的字符连续出现n次，将会被匹配到。</p><p>{x,y} 表示之前的字符至少连续出现x次，最多连续出现y次，都能被匹配到，换句话说，只要之前的字符连续出现的次数在x与y之间，即可被匹配到。</p><p>{,n} 表示之前的字符连续出现至多n次，最少0次，都会被匹配到。</p><p>{n,}表示之前的字符连续出现至少n次，才会被匹配到。</p><p>分组与后向引用<br>( ) 表示分组，我们可以将其中的内容当做一个整体，分组可以嵌套。<br>(ab) 表示将ab当做一个整体去处理。<br>\1 表示引用整个表达式中第1个分组中的正则匹配到的结果。<br>\2 表示引用整个表达式中第2个分组中的正则匹配到的结果。</p><hr><h2 id="3-awk"><a href="#3-awk" class="headerlink" title="3.awk"></a>3.awk</h2><blockquote><p>awk的基本语法结构</p><p>awk  [options]  ‘Pattern  {Action}’  file1,file2 </p><p>如果是对命令执行awk操作而不是文件，那么可以使用命令+管道符（|）+awk</p></blockquote><h3 id="3-1基础入门"><a href="#3-1基础入门" class="headerlink" title="3.1基础入门"></a><a href="http://www.zsythink.net/archives/1336" target="_blank" rel="noopener">3.1基础入门</a></h3><p>df  |awk  ‘{print  $5}’     表示输出df信息的第五列</p><p>df  |awk  ‘{print  $4,$5}’     表示输出df信息的第四和第五列</p><ul><li><p>除了输出文本或命令输出信息中的列，我们也可以自己添加信息，只需在””中添加即可</p><p>awk  ‘{print  “anychar:”$4,”anychar2”$5}’  file1</p></li><li><p>如果写成如下格式，那么输出的就不是第五列，而是输出$5</p><p>df  |awk  ‘{print  “$5”}’ </p></li></ul><p>Pattern中文含义是模式，特殊的2种模式BEGIN和END</p><ul><li><p>在执行文件1（file1）前，先执行BEGIN的内容，即先把aaa输出，然后再对文件1做处理，处理方式就是后面写的动作</p><p>awk  ‘BEGIN{print  “aaa”}  {print  “anychar:”$4,”anychar2”$5}’  file1</p></li><li><p>在执行完对文件1（file1）的操作后，再在结尾执行END的内容，即输出aaa</p><p>awk  ‘{print  “anychar:”$4,”anychar2”$5}  END{print  “aaa”}’  file1</p></li></ul><h3 id="3-2分隔符"><a href="#3-2分隔符" class="headerlink" title="3.2分隔符"></a><a href="http://www.zsythink.net/archives/1357" target="_blank" rel="noopener">3.2分隔符</a></h3><h4 id="3-2-1输入分割符"><a href="#3-2-1输入分割符" class="headerlink" title="3.2.1输入分割符"></a>3.2.1输入分割符</h4><p>文本输入的时候，默认是以空格作为分割符号的，但是我们可以手工指定在文本中的一行，该以什么符号作为区分一列的分割符</p><p> awk  -F#  ‘{print  $4,$5}’  file1            通过-F参数，来指定#作为输入分割符</p><p> awk  -v  FS=’#’  ‘{print  $4,$5}’  file1    通过-v参数，来修改系统内置的输入分割符变量，效果同上</p><h4 id="3-2-2输出分割符"><a href="#3-2-2输出分割符" class="headerlink" title="3.2.2输出分割符"></a>3.2.2输出分割符</h4><p>文本输出的时候，默认也是以空格作为分割符号的，但是我们可以指定其他的符号来连接不同的列</p><p>awk  -v  OFS=’++++’  ‘{print  $4,$5}’  file1    通过-v参数，来修改系统内置的输出分割符变量</p><p>注：输出分割时，用“，”来区分。如果是想把两列连在一起，可以写成以下形式</p><p>awk   ‘{print  $4$5}’  file1</p><h3 id="3-3awk变量"><a href="#3-3awk变量" class="headerlink" title="3.3awk变量"></a>3.3awk变量</h3><h4 id="3-3-1内置变量"><a href="#3-3-1内置变量" class="headerlink" title="3.3.1内置变量"></a>3.3.1内置变量</h4><table><thead><tr><th style="text-align:center">名称</th><th style="text-align:center">代码</th></tr></thead><tbody><tr><td style="text-align:center">输入分割符</td><td style="text-align:center">FS</td></tr><tr><td style="text-align:center">输出分隔符</td><td style="text-align:center">OFS</td></tr><tr><td style="text-align:center">输入记录分隔符</td><td style="text-align:center">RS</td></tr><tr><td style="text-align:center">输出记录分割符</td><td style="text-align:center">ORS</td></tr><tr><td style="text-align:center">当前行被分割成了几列</td><td style="text-align:center">NF</td></tr><tr><td style="text-align:center">行号</td><td style="text-align:center">NR</td></tr><tr><td style="text-align:center">各文件分别记录行号</td><td style="text-align:center">FNR</td></tr><tr><td style="text-align:center">当前文件名</td><td style="text-align:center">FILENAME</td></tr><tr><td style="text-align:center">命令行参数的个数</td><td style="text-align:center">ARGC</td></tr><tr><td style="text-align:center">保存的是命令行所给的各参数</td><td style="text-align:center">ARGV</td></tr></tbody></table><p>awk   ‘{print  NR,NF}’  file1         表示输出文件1中的行号及该行的列数</p><p>FS和OFS都是以每行各个字符间隔为单位</p><p>RS和ORS是来判断以什么条件来作为换行，默认情况下，系统认为是回车即换行</p><h4 id="3-3-2自定义变量"><a href="#3-3-2自定义变量" class="headerlink" title="3.3.2自定义变量"></a>3.3.2自定义变量</h4><p>awk  -v  变量名称=”变量值”</p><p>eg： awk  -v  mychar=”hahaha”   ‘BEGIN｛print  mychar｝’</p><p>or： awk  -v   ‘BEGIN｛mychar=”hahaha” ; print  mychar｝’</p><h3 id="3-4格式化"><a href="#3-4格式化" class="headerlink" title="3.4格式化"></a><a href="http://www.zsythink.net/archives/1421" target="_blank" rel="noopener">3.4格式化</a></h3><p><img src="/2019/08/11/grep-正则表达式-awk-sed/Users\优积谷\AppData\Roaming\Typora\typora-user-images\1551853553486.png" alt="1551853553486"></p><p><img src="/2019/08/11/grep-正则表达式-awk-sed/Users\优积谷\AppData\Roaming\Typora\typora-user-images\1551853567638.png" alt="1551853567638"></p><p><img src="/2019/08/11/grep-正则表达式-awk-sed/Users\优积谷\AppData\Roaming\Typora\typora-user-images\1551853600287.png" alt="1551853600287"></p><h3 id="3-5模式"><a href="#3-5模式" class="headerlink" title="3.5模式"></a><a href="http://www.zsythink.net/archives/1426" target="_blank" rel="noopener">3.5模式</a></h3><p><img src="/2019/08/11/grep-正则表达式-awk-sed/Users\优积谷\AppData\Roaming\Typora\typora-user-images\1551853672703.png" alt="1551853672703"></p><p><img src="/2019/08/11/grep-正则表达式-awk-sed/Users\优积谷\AppData\Roaming\Typora\typora-user-images\1551853685374.png" alt="1551853685374"></p><p>使用正则表达式</p><p>awk  ‘/正则表达式/ {print $0}’  file1</p><p><img src="/2019/08/11/grep-正则表达式-awk-sed/Users\优积谷\AppData\Roaming\Typora\typora-user-images\1551853884184.png" alt="1551853884184"></p><p><img src="/2019/08/11/grep-正则表达式-awk-sed/Users\优积谷\AppData\Roaming\Typora\typora-user-images\1551854001928.png" alt="1551854001928"></p><p><img src="/2019/08/11/grep-正则表达式-awk-sed/Users\优积谷\AppData\Roaming\Typora\typora-user-images\1551854046085.png" alt="1551854046085"></p><h3 id="3-6动作"><a href="#3-6动作" class="headerlink" title="3.6动作"></a><a href="http://www.zsythink.net/archives/2046" target="_blank" rel="noopener">3.6动作</a></h3><p><img src="/2019/08/11/grep-正则表达式-awk-sed/Users\优积谷\AppData\Roaming\Typora\typora-user-images\1551854206133.png" alt="1551854206133"></p><p><img src="/2019/08/11/grep-正则表达式-awk-sed/Users\优积谷\AppData\Roaming\Typora\typora-user-images\1551854262131.png" alt="1551854262131"></p><hr><h2 id="4-sed"><a href="#4-sed" class="headerlink" title="4.sed"></a>4.sed</h2><blockquote><p>awk的基本语法结构</p><p>awk  [options]  ‘动作’</p></blockquote><h3 id="4-1新增与删除"><a href="#4-1新增与删除" class="headerlink" title="4.1新增与删除"></a>4.1新增与删除</h3><p>sed  ‘sed  2,5d’             其中d表示删除，意味删除2到第5行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">[root@vultr ~]<span class="comment"># nl /etc/passwd</span></span><br><span class="line">     1root:x:0:0:root:/root:/bin/bash</span><br><span class="line">     2bin:x:1:1:bin:/bin:/sbin/nologin</span><br><span class="line">     3daemon:x:2:2:daemon:/sbin:/sbin/nologin</span><br><span class="line">     4adm:x:3:4:adm:/var/adm:/sbin/nologin</span><br><span class="line">     5lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin</span><br><span class="line">     6sync:x:5:0:sync:/sbin:/bin/sync</span><br><span class="line">     7shutdown:x:6:0:shutdown:/sbin:/sbin/shutdown</span><br><span class="line">     8halt:x:7:0:halt:/sbin:/sbin/halt</span><br><span class="line">     9mail:x:8:12:mail:/var/spool/mail:/sbin/nologin</span><br><span class="line">    10operator:x:11:0:operator:/root:/sbin/nologin</span><br><span class="line">    11games:x:12:100:games:/usr/games:/sbin/nologin</span><br><span class="line">    12ftp:x:14:50:FTP User:/var/ftp:/sbin/nologin</span><br><span class="line">    13nobody:x:99:99:Nobody:/:/sbin/nologin</span><br><span class="line">    14systemd-network:x:192:192:systemd Network Management:/:/sbin/nologin</span><br><span class="line">    15dbus:x:81:81:System message bus:/:/sbin/nologin</span><br><span class="line">    16polkitd:x:999:998:User <span class="keyword">for</span> polkitd:/:/sbin/nologin</span><br><span class="line">    17ntp:x:38:38::/etc/ntp:/sbin/nologin</span><br><span class="line">    18sshd:x:74:74:Privilege-separated SSH:/var/empty/sshd:/sbin/nologin</span><br><span class="line">    19postfix:x:89:89::/var/spool/postfix:/sbin/nologin</span><br><span class="line">    20chrony:x:998:996::/var/lib/chrony:/sbin/nologin</span><br><span class="line">    21tcpdump:x:72:72::/:/sbin/nologin</span><br><span class="line">[root@vultr ~]<span class="comment"># </span></span><br><span class="line">[root@vultr ~]<span class="comment"># nl /etc/passwd | sed '2,20d'</span></span><br><span class="line">     1root:x:0:0:root:/root:/bin/bash</span><br><span class="line">    21tcpdump:x:72:72::/:/sbin/nologin</span><br></pre></td></tr></table></figure><p>sed  ‘2a  字符串’，在第2行后面插入一字符串，i表示在第n行前插入字符串</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">[root@vultr ~]<span class="comment"># nl /etc/passwd | sed '2,20d' |sed '1a nihaoa'</span></span><br><span class="line">     1root:x:0:0:root:/root:/bin/bash</span><br><span class="line">nihaoa</span><br><span class="line">    21tcpdump:x:72:72::/:/sbin/nologin</span><br><span class="line">[root@vultr ~]<span class="comment"># </span></span><br><span class="line">[root@vultr ~]<span class="comment"># </span></span><br><span class="line">[root@vultr ~]<span class="comment"># nl /etc/passwd | sed '2,20d' |sed '1i nihaoa'</span></span><br><span class="line">nihaoa</span><br><span class="line">     1root:x:0:0:root:/root:/bin/bash</span><br><span class="line">    21tcpdump:x:72:72::/:/sbin/nologin</span><br><span class="line">[root@vultr ~]<span class="comment"># </span></span><br><span class="line">[root@vultr ~]<span class="comment"># </span></span><br><span class="line">[root@vultr ~]<span class="comment"># nl /etc/passwd | sed '2,20d' |sed '2i nihaoa'</span></span><br><span class="line">     1root:x:0:0:root:/root:/bin/bash</span><br><span class="line">nihaoa</span><br><span class="line">    21tcpdump:x:72:72::/:/sbin/nologin</span><br><span class="line">[root@vultr ~]<span class="comment"># </span></span><br><span class="line">[root@vultr ~]<span class="comment"># </span></span><br><span class="line">[root@vultr ~]<span class="comment"># nl /etc/passwd | sed '2,20d' |sed '20i nihaoa'</span></span><br><span class="line">     1root:x:0:0:root:/root:/bin/bash</span><br><span class="line">    21tcpdump:x:72:72::/:/sbin/nologin</span><br><span class="line">[root@vultr ~]<span class="comment">#</span></span><br></pre></td></tr></table></figure><p>想要增加多行，可以先输入\，然后回车，就会跳转到下一行。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[root@vultr ~]<span class="comment"># nl /etc/passwd | sed '2,19d' |sed '2a nihaoa \&gt;zaijian'</span></span><br><span class="line">     1root:x:0:0:root:/root:/bin/bash</span><br><span class="line">    20chrony:x:998:996::/var/lib/chrony:/sbin/nologin</span><br><span class="line">nihaoa &gt;zaijian</span><br><span class="line">    21tcpdump:x:72:72::/:/sbin/nologin</span><br><span class="line">[root@vultr ~]<span class="comment"># </span></span><br><span class="line">[root@vultr ~]<span class="comment"># nl /etc/passwd | sed '2,19d' |sed '2a nihaoa \</span></span><br><span class="line">&gt; zaijian<span class="string">'</span></span><br><span class="line"><span class="string">     1root:x:0:0:root:/root:/bin/bash</span></span><br><span class="line"><span class="string">    20chrony:x:998:996::/var/lib/chrony:/sbin/nologin</span></span><br><span class="line"><span class="string">nihaoa </span></span><br><span class="line"><span class="string">zaijian</span></span><br><span class="line"><span class="string">    21tcpdump:x:72:72::/:/sbin/nologin</span></span><br><span class="line"><span class="string">[root@vultr ~]#</span></span><br></pre></td></tr></table></figure><h3 id="4-2替代"><a href="#4-2替代" class="headerlink" title="4.2替代"></a>4.2替代</h3><p>sed  ‘2,19c  字符串’，c表示从2到19行被该字符串替代掉</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@vultr ~]<span class="comment"># nl /etc/passwd | sed '2,19c 2 to 19 no show'</span></span><br><span class="line">     1root:x:0:0:root:/root:/bin/bash</span><br><span class="line">2 to 19 no show</span><br><span class="line">    20chrony:x:998:996::/var/lib/chrony:/sbin/nologin</span><br><span class="line">    21tcpdump:x:72:72::/:/sbin/nologin</span><br><span class="line">[root@vultr ~]<span class="comment">#</span></span><br></pre></td></tr></table></figure><p>sed  -n  ‘2,4p’，表示显示第2到第4行，-n参数需要加上</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">[root@vultr ~]<span class="comment"># nl /etc/passwd | sed '2,4p'</span></span><br><span class="line">     1root:x:0:0:root:/root:/bin/bash</span><br><span class="line">     2bin:x:1:1:bin:/bin:/sbin/nologin</span><br><span class="line">     2bin:x:1:1:bin:/bin:/sbin/nologin</span><br><span class="line">     3daemon:x:2:2:daemon:/sbin:/sbin/nologin</span><br><span class="line">     3daemon:x:2:2:daemon:/sbin:/sbin/nologin</span><br><span class="line">     4adm:x:3:4:adm:/var/adm:/sbin/nologin</span><br><span class="line">     4adm:x:3:4:adm:/var/adm:/sbin/nologin</span><br><span class="line">     5lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin</span><br><span class="line">     6sync:x:5:0:sync:/sbin:/bin/sync</span><br><span class="line">     7shutdown:x:6:0:shutdown:/sbin:/sbin/shutdown</span><br><span class="line">     8halt:x:7:0:halt:/sbin:/sbin/halt</span><br><span class="line">     9mail:x:8:12:mail:/var/spool/mail:/sbin/nologin</span><br><span class="line">    10operator:x:11:0:operator:/root:/sbin/nologin</span><br><span class="line">    11games:x:12:100:games:/usr/games:/sbin/nologin</span><br><span class="line">    12ftp:x:14:50:FTP User:/var/ftp:/sbin/nologin</span><br><span class="line">    13nobody:x:99:99:Nobody:/:/sbin/nologin</span><br><span class="line">    14systemd-network:x:192:192:systemd Network Management:/:/sbin/nologin</span><br><span class="line">    15dbus:x:81:81:System message bus:/:/sbin/nologin</span><br><span class="line">    16polkitd:x:999:998:User <span class="keyword">for</span> polkitd:/:/sbin/nologin</span><br><span class="line">    17ntp:x:38:38::/etc/ntp:/sbin/nologin</span><br><span class="line">    18sshd:x:74:74:Privilege-separated SSH:/var/empty/sshd:/sbin/nologin</span><br><span class="line">    19postfix:x:89:89::/var/spool/postfix:/sbin/nologin</span><br><span class="line">    20chrony:x:998:996::/var/lib/chrony:/sbin/nologin</span><br><span class="line">    21tcpdump:x:72:72::/:/sbin/nologin</span><br><span class="line">[root@vultr ~]<span class="comment"># </span></span><br><span class="line">[root@vultr ~]<span class="comment"># nl /etc/passwd | sed -n '2,4p'</span></span><br><span class="line">     2bin:x:1:1:bin:/bin:/sbin/nologin</span><br><span class="line">     3daemon:x:2:2:daemon:/sbin:/sbin/nologin</span><br><span class="line">     4adm:x:3:4:adm:/var/adm:/sbin/nologin</span><br></pre></td></tr></table></figure><p>sed  ‘s/需要被替代的字符串/替换后的字符串/g’</p><p><img src="/2019/08/11/grep-正则表达式-awk-sed/Users\优积谷\AppData\Roaming\Typora\typora-user-images\1552289061967.png" alt="1552289061967"></p><h3 id="4-3直接在文本中做修改操作"><a href="#4-3直接在文本中做修改操作" class="headerlink" title="4.3直接在文本中做修改操作"></a>4.3直接在文本中做修改操作</h3><p><img src="/2019/08/11/grep-正则表达式-awk-sed/Users\优积谷\AppData\Roaming\Typora\typora-user-images\1552289476341.png" alt="1552289476341"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Linux三剑客&lt;/p&gt;
&lt;p&gt;grep适合单纯的查找或是匹配文本&lt;/p&gt;
&lt;p&gt;sed适合编辑我们查找到的文本&lt;/p&gt;
&lt;p&gt;awk对于查找到的文本，可以进行格式化处理，即输出成我们想要看到的样子&lt;/p&gt;
&lt;p&gt;正则表达式是公式。我们可以在三剑客中按（正则表达式）条件查找
      
    
    </summary>
    
      <category term="linux" scheme="https://dilidonglong.github.io/categories/linux/"/>
    
    
  </entry>
  
  <entry>
    <title>iptables笔记</title>
    <link href="https://dilidonglong.github.io/2019/08/11/iptables%E7%AC%94%E8%AE%B0/"/>
    <id>https://dilidonglong.github.io/2019/08/11/iptables笔记/</id>
    <published>2019-08-11T13:25:59.000Z</published>
    <updated>2019-08-11T13:28:50.372Z</updated>
    
    <content type="html"><![CDATA[<h1 id="iptables笔记"><a href="#iptables笔记" class="headerlink" title="iptables笔记"></a>iptables笔记</h1><blockquote><p><a href="http://www.zsythink.net/archives/category/%E8%BF%90%E7%BB%B4%E7%9B%B8%E5%85%B3/iptables/" target="_blank" rel="noopener">朱双印博客-iptables规则</a></p></blockquote><p>数据经过防火墙流程图</p><p><img src="/2019/08/11/iptables笔记/1.png" alt="1550890197135"></p><hr><h2 id="1-查找规则"><a href="#1-查找规则" class="headerlink" title="1.查找规则"></a>1.查找规则</h2><blockquote><ul><li>iptables  -t  表名  -L</li><li>iptables  -t  表名  -L  链名                    #-L显示链名下的表名规则</li><li>iptables  -t  表名  -vL  链名                  #-v显示详细信息</li><li>iptables  -t  表名  -nvL  链名               #-n不进行地址解析</li><li>iptables  -t  表名  -xnvL  链名             #-x显示精确计数值</li><li>iptables  –line  -t  表名  -xnvL  链名             #–line在规则前加上序列号</li></ul></blockquote><h2 id="2-添加规则"><a href="#2-添加规则" class="headerlink" title="2.添加规则"></a>2.添加规则</h2><blockquote><ul><li>iptables  -t  表名  -A  链名  匹配条件  -j  动作</li></ul><p><code>iptables -t filter -A INPUT -s 192.168.1.1 -j DROP</code>   #-A插入到规则最后</p><ul><li>iptables  -t  表名  -I  链名  匹配条件  -j  动作</li></ul><p><code>iptables -t filter -I INPUT -s 192.168.1.1 -j ACCEPT</code>  #-I插入到规则开头</p><ul><li>iptables  -t  表名  -I  链名  规则序号  匹配条件  -j  动作</li></ul><p><code>iptables -t filter -I INPUT 5 -s 192.168.1.1 -j REJECT</code>  #在第五行规则中插入</p><ul><li>iptables  -t  表名  -P  链名  动作 </li></ul><p><code>iptables -t filter -P INPUT REJECT</code>           #设置INPUT链中filter表的默认规则</p></blockquote><h2 id="3-删除规则"><a href="#3-删除规则" class="headerlink" title="3.删除规则"></a>3.删除规则</h2><blockquote><ul><li>按规则序号删除<br>iptables  -t  表名  -D  链名  规则序号 </li></ul><p><code>iptables -t filter -D INPUT 5</code>     </p><ul><li>按匹配条件与动作删除</li></ul><p>iptables  -t  表名  -D  链名  匹配条件  -j  匹配动作 </p><p><code>iptables -t filter -D INPUT -s 192.168.1.1 -j ACCEPT</code>     </p><ul><li>删除某个链下指定表的所有规则</li></ul><p>iptables  -t  表名  -F  链名  </p><p><code>iptables -t filter -F INPUT</code>     </p><ul><li>删除所有链下指定表的所有规则</li></ul><p>iptables  -t  表名  -F </p><p><code>iptables -t filter -F</code>   </p></blockquote><h2 id="4-修改规则"><a href="#4-修改规则" class="headerlink" title="4.修改规则"></a>4.修改规则</h2><p>如果要修改规则，必须要指明原规则中的匹配条件（或者理解为只能修改动作）</p><blockquote><p>iptables  -t  表名  -R  链名  规则序号  规则原始匹配条件  -j  动作</p><p><code>iptables -t filter -R INPUT 3 -S 192.168.1.1 -J ACCEPT</code></p><p>另外一种方式是，先删除规则。再在原来的位置添加规则   </p></blockquote><h2 id="5-保存规则"><a href="#5-保存规则" class="headerlink" title="5.保存规则"></a>5.保存规则</h2><p><img src="/2019/08/11/iptables笔记/Users\优积谷\AppData\Roaming\Typora\typora-user-images\1550893264062.png" alt="1550893264062"></p><h2 id="6-匹配条件"><a href="#6-匹配条件" class="headerlink" title="6.匹配条件"></a>6.匹配条件</h2><h3 id="6-1基本匹配条件"><a href="#6-1基本匹配条件" class="headerlink" title="6.1基本匹配条件"></a>6.1基本匹配条件</h3><ul><li>-s用于匹配源IP地址。可以指定多个IP地址，多个IP地址间用“，”号隔开；也可以指定IP网段</li></ul><p><code>iptables -t filter -I INPUT -s 192.168.1.111,192.168.1.118 -j DROP</code></p><p><code>iptables -t filter -I INPUT -s 192.168.1.0/24 -j ACCEPT</code></p><p><code>iptables -t filter -I INPUT ! -s 192.168.1.0/24 -j ACCEPT</code></p><hr><ul><li>-d用于匹配目的IP地址。可以指定多个IP地址，多个IP地址间用“，”号隔开；也可以指定IP网段</li></ul><p><code>iptables -t filter -I OUTPUT -d 192.168.1.111,192.168.1.118 -j DROP</code></p><p><code>iptables -t filter -I INPUT -d 192.168.1.0/24 -j ACCEPT</code></p><p><code>iptables -t filter -I INPUT ! -d 192.168.1.0/24 -j ACCEPT</code></p><hr><ul><li>-p用于匹配协议类型，常见的匹配类型有TCP、UDP、ICMP、ESP、AH等</li></ul><p><code>iptables -t filter -I INPUT -p tcp -s 192.168.1.146 -j ACCEPT</code></p><p><code>iptables -t filter -I INPUT ! -p udp -s 192.168.1.146 -j ACCEPT</code></p><hr><ul><li>-i表示从哪个网卡接口流入本机，不能用于output链和postrouting链</li><li>-o表示从哪个网卡接口流出本机，不能用于prerouting链和input链</li></ul><h3 id="6-2扩展匹配条件-如果协议和扩展模块一致，扩展模块可省略"><a href="#6-2扩展匹配条件-如果协议和扩展模块一致，扩展模块可省略" class="headerlink" title="6.2扩展匹配条件(如果协议和扩展模块一致，扩展模块可省略)"></a>6.2扩展匹配条件(如果协议和扩展模块一致，扩展模块可省略)</h3><p>TCP扩展模块：</p><ul><li>-p tcp -m tcp –sport，用于匹配协议源端口，可以用冒号”:”指定一个连续的端口范围(udp类似)</li><li>-p tcp -m tcp –dport，用于匹配协议目的端口，可以用冒号”:”指定一个连续的端口范围（udp类似）</li></ul><p><code>iptables -t filter -I OUTPUT -d 192.168.1.146 -p tcp -m tcp --sport 22 -j REJECT</code></p><p><code>iptables -t filter -I INPUT -s 192.168.1.146 -p tcp -m tcp --dport 22:25 -j REJECT</code></p><p><code>iptables -t filter -I INPUT -s 192.168.1.146 -p tcp -m tcp --dport :22 -j REJECT</code></p><p><code>iptables -t filter -I INPUT -s 192.168.1.146 -p tcp -m tcp --dport 80: -j REJECT</code></p><p><code>iptables -t filter -I OUTPUT -d 192.168.1.146 -p tcp -m tcp ! --sport 22 -j ACCEPT</code></p><ul><li>–tcp-flags用于匹配tcp头部中的标志位</li></ul><p><code>iptables -t filter -I INPUT -p tcp -m tcp --dport 22 --tcp-flags SYN,ACK,FIN,RST,URG,PSH SYN -j REJECT</code></p><p><code>iptables -t filter -I OUTPUT -p tcp -m tcp --sport 22 --tcp-flags SYN,ACK,FIN,RST,URG,PSH SYN,ACK -j REJECT</code></p><p><code>iptables -t filter -I INPUT -p tcp -m tcp --dport 22 --tcp-flags ALL SYN -j REJECT</code></p><p><code>iptables -t filter -I OUTPUT -p tcp -m tcp --sport 22 --tcp-flags ALL SYN,ACK -j REJECT</code></p><ul><li>–syn,相当于使用了“–tcp-flags SYN,ACK,FIN,RST SYN”</li></ul><p><code>iptables -t filter -I INPUT -p tcp -m tcp --dport 22 --syn -j REJECT</code></p><hr><p>multiport扩展模块：</p><ul><li>-p tcp -m multiport –sports，用于匹配协议源端口，可以用逗号”,”指定多个离散端口</li><li>-p tcp -m multiport –dports，用于匹配协议目的端口，可以用逗号”,”指定多个离散端口</li></ul><p><code>iptables -t filter -I OUTPUT -d 192.168.1.146 -p udp -m multiport --sports 137,138 -j REJECT</code></p><p><code>iptables -t filter -I INPUT -s 192.168.1.146 -p tcp -m multiport --dports 22,80 -j REJECT</code></p><p><code>iptables -t filter -I INPUT -s 192.168.1.146 -p tcp -m multiport ! --dports 22,80 -j REJECT</code></p><p><code>iptables -t filter -I INPUT -s 192.168.1.146 -p tcp -m multiport --dports 80:88 -j REJECT</code></p><p><code>iptables -t filter -I INPUT -s 192.168.1.146 -p tcp -m multiport --dports 22,80:88 -j REJECT</code></p><hr><p><a href="http://www.zsythink.net/archives/1588" target="_blank" rel="noopener">icmp扩展模块（略）</a></p><p><a href="http://www.zsythink.net/archives/1597" target="_blank" rel="noopener">state扩展模块（略，但是概念重要）</a></p><h2 id="7-匹配动作"><a href="#7-匹配动作" class="headerlink" title="7.匹配动作"></a>7.匹配动作</h2><ul><li>动作SNAT，进行源地址转换(公网是固定IP)</li></ul><p><code>iptables -t nat -A POSTROUTING -s 10.1.0.0/16 -j SNAT --to-source 公网IP</code></p><ul><li>动作MASQUERADE，进行源地址转换（公网是动态IP）</li></ul><p><code>iptables -t nat -A POSTROUTING -s 10.1.0.0/16 -o eth0 -j MASQUERADE</code></p><ul><li>动作DNAT，进行目的地址转换</li></ul><p><code>iptables -t nat -I PREROUTING -d 公网IP -p tcp --dport 公网端口 -j DNAT --to-destination 私网IP:端口号</code></p><p><code>iptables -t nat -I PREROUTING -d 公网IP -p tcp --dport 8080 -j DNAT --to-destination 10.1.0.1:80</code></p><p><code>iptables -t nat -A POSTROUTING -s 10.1.0.0/16 -j SNAT --to-source 公网IP</code></p><ul><li>动作REDIRECT，进行本机端口重定向</li></ul><p><code>iptables -t nat -A PREROUTING -p tcp --dport 80 -j REDIRECT --to-ports 8080</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;iptables笔记&quot;&gt;&lt;a href=&quot;#iptables笔记&quot; class=&quot;headerlink&quot; title=&quot;iptables笔记&quot;&gt;&lt;/a&gt;iptables笔记&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://www.zsyth
      
    
    </summary>
    
      <category term="linux" scheme="https://dilidonglong.github.io/categories/linux/"/>
    
    
  </entry>
  
  <entry>
    <title>新东方赵丽托福英语词汇8000-01</title>
    <link href="https://dilidonglong.github.io/2019/07/18/%E6%96%B0%E4%B8%9C%E6%96%B9%E8%B5%B5%E4%B8%BD%E6%89%98%E7%A6%8F%E8%8B%B1%E8%AF%AD%E8%AF%8D%E6%B1%878000-01/"/>
    <id>https://dilidonglong.github.io/2019/07/18/新东方赵丽托福英语词汇8000-01/</id>
    <published>2019-07-18T14:53:40.000Z</published>
    <updated>2019-07-18T15:34:05.604Z</updated>
    
    <content type="html"><![CDATA[<h1 id="新东方赵丽托福英语词汇8000-01"><a href="#新东方赵丽托福英语词汇8000-01" class="headerlink" title="新东方赵丽托福英语词汇8000-01"></a>新东方赵丽托福英语词汇8000-01</h1><p>共30词</p><table><thead><tr><th style="text-align:center">compel</th><th style="text-align:center">repel</th><th style="text-align:center">insidious</th><th style="text-align:center">assist</th><th style="text-align:center">timid</th><th style="text-align:center">toxic</th></tr></thead><tbody><tr><td style="text-align:center"><strong>compulsive</strong></td><td style="text-align:center"><strong>repulsive</strong></td><td style="text-align:center"><strong>preside</strong></td><td style="text-align:center"><strong>resist</strong></td><td style="text-align:center"><strong>intimidate</strong></td><td style="text-align:center"><strong>intoxicate</strong></td></tr><tr><td style="text-align:center"><strong>compulsion</strong></td><td style="text-align:center"><strong>repulsion</strong></td><td style="text-align:center"><strong>resident</strong></td><td style="text-align:center"><strong>insist</strong></td><td style="text-align:center"><strong>Fawn</strong></td><td style="text-align:center"><strong>Pawn</strong></td></tr><tr><td style="text-align:center"><strong>expel</strong></td><td style="text-align:center"><strong>impel</strong></td><td style="text-align:center"><strong>Vigor</strong></td><td style="text-align:center"><strong>persist</strong></td><td style="text-align:center"><strong>Spawn</strong></td><td style="text-align:center"><strong>Brawn</strong></td></tr><tr><td style="text-align:center"><strong>propel</strong></td><td style="text-align:center"><strong>dispel</strong></td><td style="text-align:center"><strong>invigorate</strong></td><td style="text-align:center"><strong>Lawn</strong></td><td style="text-align:center"><strong>Yawn</strong></td><td style="text-align:center"><strong>Dawn</strong></td></tr></tbody></table><h2 id="4-词根词缀法"><a href="#4-词根词缀法" class="headerlink" title="4.词根词缀法"></a>4.词根词缀法</h2><p>词根:(本义) body</p><p>前缀:改变含义不变词性  anti(反)+body(体)-抗体</p><p>后缀:改变词性,不变含义 pass       passable</p><p><br></p><ol><li><p>词性转换库:</p><p>pel表示推（verb）—pulsive（形容词）—pulsion（名词）</p><p>compel （com共同+pel）</p><blockquote><p>verb:强迫，迫使</p><p>The law can compel fathers to make regular payments for their children.<br>这项法律可强制父亲定期支付子女的费用。</p></blockquote><blockquote><p>compulsive( adjective ):难以制止的；难控制的</p><p>compulsive eating/spending/gambling<br>强迫性进食╱消费；上瘾的赌博</p><p>The programme made compulsive viewing.<br>这节目引人入胜，收看起来欲罢不能。</p></blockquote><blockquote><p>compulsion（noun）:强迫；强制</p><p>compulsion(on sb) to do sth</p><p>There are no compulsions on students to attend classes.<br>没有强求学生上课。</p></blockquote><p><br></p><p>repel(re向后+pel)</p><blockquote><p>verb:击退；驱逐</p><p>Troops repelled an attempt to infiltrate the south of the island.<br>部队挫败了对该岛南部的潜入企图。</p></blockquote><p><br></p><p> expel (ex老大+pel)</p><blockquote><p>verb:把…开除（或除名）;驱逐出境;排出；喷出</p><p>1.She was expelled from school at 15.<br>她 15 岁时被学校开除了。</p><p>2.Foreign journalists are being expelled.<br>外国记者被驱逐出境。</p></blockquote><p><br></p><p>impel (im内心深处+pel)</p><blockquote><p>verb:迫使(激励)</p><p>He felt impelled to investigate further.<br>他觉得有必要作进一步调查。</p></blockquote><p><br></p><p>propel (pro向前+pel)</p><blockquote><p>verb:推动；驱动；推进</p><p>He succeeded in propelling the ball across the line.<br>他成功地把球带过线。</p><p>Fury propelled her into action.<br>怒火驱使她行动起来。</p></blockquote><p><br></p><p>dispel(dis分开+pel)</p><blockquote><p>verb:驱散，消除（尤指感觉或信仰）</p><p>His speech dispelled any fears about his health.<br>他的发言消除了人们对他身体健康的担心。</p></blockquote></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;新东方赵丽托福英语词汇8000-01&quot;&gt;&lt;a href=&quot;#新东方赵丽托福英语词汇8000-01&quot; class=&quot;headerlink&quot; title=&quot;新东方赵丽托福英语词汇8000-01&quot;&gt;&lt;/a&gt;新东方赵丽托福英语词汇8000-01&lt;/h1&gt;&lt;p&gt;共30词&lt;/
      
    
    </summary>
    
      <category term="英语" scheme="https://dilidonglong.github.io/categories/%E8%8B%B1%E8%AF%AD/"/>
    
    
  </entry>
  
  <entry>
    <title>新东方赵丽托福英语词汇8000-00</title>
    <link href="https://dilidonglong.github.io/2019/07/15/%E6%96%B0%E4%B8%9C%E6%96%B9%E8%B5%B5%E4%B8%BD%E6%89%98%E7%A6%8F%E8%8B%B1%E8%AF%AD%E8%AF%8D%E6%B1%878000-00/"/>
    <id>https://dilidonglong.github.io/2019/07/15/新东方赵丽托福英语词汇8000-00/</id>
    <published>2019-07-15T13:50:05.000Z</published>
    <updated>2019-07-15T14:50:35.194Z</updated>
    
    <content type="html"><![CDATA[<h1 id="新东方赵丽托福英语词汇8000-00"><a href="#新东方赵丽托福英语词汇8000-00" class="headerlink" title="新东方赵丽托福英语词汇8000-00"></a>新东方赵丽托福英语词汇8000-00</h1><p>共18词</p><table><thead><tr><th style="text-align:center">haunt</th><th style="text-align:center">flaunt</th><th style="text-align:center">daunt</th><th style="text-align:center">vaunt</th><th style="text-align:center">gaunt</th><th style="text-align:center">jaunt</th></tr></thead><tbody><tr><td style="text-align:center">journey</td><td style="text-align:center">saunter</td><td style="text-align:center">taunt</td><td style="text-align:center">ponderous</td><td style="text-align:center">slurp</td><td style="text-align:center">drone</td></tr><tr><td style="text-align:center">quaff</td><td style="text-align:center">ambition</td><td style="text-align:center">schedule</td><td style="text-align:center">pajama</td><td style="text-align:center">famine</td><td style="text-align:center">sanguine</td></tr></tbody></table><h2 id="1-拆分法—aunt系列"><a href="#1-拆分法—aunt系列" class="headerlink" title="1.拆分法—aunt系列"></a>1.拆分法—aunt系列</h2><p><strong>haunt</strong>(home+aunt)</p><blockquote><blockquote><p>verb:(鬼魂)出没;(不快的事情)萦绕</p><p>1.A headless rider haunts the country lanes.<br>一个无头骑士常出没于乡间的小路上。</p><p>2.The memory of that day still haunts me.<br>我的脑海中常常回想起那天的情景。</p></blockquote><blockquote><p>noun:常来常往的地方</p><p>The pub is a favourite haunt of artists.<br>这家酒吧是艺术家最爱光顾的地方。</p></blockquote></blockquote><p><br></p><p><strong>flaunt</strong>(fly+aunt)</p><blockquote><p>verb:炫耀，夸耀</p><p>He did not believe in flaunting his wealth.<br>他不相信摆阔有什么好处。</p></blockquote><p><br></p><p><strong>daunt</strong>(da打+aunt)</p><blockquote><p>verb:恐吓；使胆怯；使气馁；使失去信心 </p><p>She was a brave woman but she felt daunted by the task ahead.<br>她是一个勇敢的女人，但对面前的任务却感到信心不足。</p></blockquote><p><br></p><p><strong>vaunt</strong>(v5+aunt)</p><blockquote><p>不及物动词<br>夸耀, 吹嘘[…] [of, over, about]<br>~ of one’s skill夸耀自己的技巧</p><p>可数名词<br>自夸, 夸张, 吹嘘<br>make a ~ of﹍ 夸耀…</p></blockquote><p><br></p><p><strong>gaunt</strong>(gre+aunt)</p><blockquote><p>adjective:瘦削憔悴的（常因疾病、饥饿或忧虑）</p><p>a gaunt face<br>憔悴的面容</p></blockquote><p><br></p><p><strong>jaunt</strong>(接+aunt)</p><blockquote><p>noun:短途旅行</p><p>a weekend jaunt</p><p>周末小旅行</p></blockquote><p>ps:<strong>journey</strong>接你：长途旅行</p><p><br></p><p><strong>saunter</strong>(see+aunter)姑姑到处乱看</p><blockquote><p>verb:闲逛</p><p>He sauntered by, looking as if he had all the time in the world.<br>他悠闲地走过，仿佛时间对他来说是无穷无尽的。</p></blockquote><p><br></p><p><strong>taunt</strong>(吐，呸+aunt)</p><blockquote><blockquote><p>verb:辱骂；嘲笑</p><p>The other kids continually taunted him about his size.<br>其他孩子不断地耻笑他的个头儿。</p></blockquote><blockquote><p>noun:嘲笑（或讽刺、奚落等）的言辞</p><p>Black players often had to endure racist taunts.<br>黑人运动员经常得忍受种族歧视性的奚落。</p></blockquote></blockquote><p><br></p><hr><h2 id="2-谐音联想法"><a href="#2-谐音联想法" class="headerlink" title="2.谐音联想法"></a>2.谐音联想法</h2><p><strong>ponderous</strong>(胖的要死)</p><blockquote><p>adjective:笨重的，缓慢的</p><p>She watched the cow’s ponderous progress.<br>她看着牛迟缓地向前走着。</p></blockquote><p><br></p><p><strong>slurp</strong>(嗖的一下)</p><blockquote><p>verb:（喝东西时）发出啧啧的声音</p><p>He was slurping his tea.<br>他正咂着嘴喝茶。</p></blockquote><p><br></p><p><strong>drone</strong>(juan～juan～,蜜蜂等嗡嗡的声音)</p><blockquote><p>noun:嗡嗡声</p><p>the distant drone of traffic<br>远处车辆往来发出的嗡嗡声</p></blockquote><p><br></p><p><strong>quaff</strong>(夸父追日饮一河之水；马和骡子kuafukuafu喝水的声音)</p><blockquote><p>verb:豪饮；痛饮；开怀畅饮</p></blockquote><p><br></p><p><strong>ambition</strong>(俺必胜)</p><blockquote><p>noun:追求的目标;野心</p><p>1.It had been her lifelong ambition.<br>这是她终身追求的目标。</p><p>2.She was intelligent but suffered from a lack of ambition.<br>她很聪明，但却缺乏远大志向。</p></blockquote><p><br></p><hr><h2 id="3-拼音联想法"><a href="#3-拼音联想法" class="headerlink" title="3.拼音联想法"></a>3.拼音联想法</h2><p><strong>schedule</strong>(s+che+du+le,该死的车又堵了，我们不得不改变我们的计划表)</p><blockquote><p>noun:工作计划；日程安排</p><p>I have a hectic schedule for the next few days.<br>我今后几天的日程紧得要命。</p></blockquote><p><br></p><p><strong>pajama</strong>(pa+ja+ma,趴在家妈妈穿的)</p><blockquote><p>noun:睡衣</p></blockquote><p><br></p><p><strong>famine</strong>(fa+mi+ne,发米呢)</p><blockquote><p>noun:饥荒</p><p>a severe famine<br>严重饥荒</p></blockquote><p><br></p><p><strong>sanguine</strong>(san+gui+ne,三桂呢)</p><blockquote><p>adjective:充满信心的；乐观的;面色红润的</p><p>hey are less sanguine about the company’s long-term prospects.<br>他们对公司的远景不那么乐观。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;新东方赵丽托福英语词汇8000-00&quot;&gt;&lt;a href=&quot;#新东方赵丽托福英语词汇8000-00&quot; class=&quot;headerlink&quot; title=&quot;新东方赵丽托福英语词汇8000-00&quot;&gt;&lt;/a&gt;新东方赵丽托福英语词汇8000-00&lt;/h1&gt;&lt;p&gt;共18词&lt;/
      
    
    </summary>
    
      <category term="英语" scheme="https://dilidonglong.github.io/categories/%E8%8B%B1%E8%AF%AD/"/>
    
    
  </entry>
  
  <entry>
    <title>远程桌面访问不了</title>
    <link href="https://dilidonglong.github.io/2019/07/07/%E8%BF%9C%E7%A8%8B%E6%A1%8C%E9%9D%A2%E8%AE%BF%E9%97%AE%E4%B8%8D%E4%BA%86/"/>
    <id>https://dilidonglong.github.io/2019/07/07/远程桌面访问不了/</id>
    <published>2019-07-07T08:08:47.000Z</published>
    <updated>2019-07-07T08:44:45.940Z</updated>
    
    <content type="html"><![CDATA[<h1 id="远程桌面访问不了"><a href="#远程桌面访问不了" class="headerlink" title="远程桌面访问不了"></a>远程桌面访问不了</h1><p><strong>问题：总部PC去访问分支的服务器3389桌面，会出现不定时中断的问题</strong></p><ol><li><p>10.0.2.132为PC 10.16.2.200为远程桌面的服务器</p></li><li><p>拓扑环境</p><p><img src="/2019/07/07/远程桌面访问不了/13.png" alt="1"></p></li></ol><p>总部有三层环境，AC透明模式部署，分支二层环境，就一个网段</p><ol start="3"><li>数据包是总部访问分支访问不了的时候抓取的数据包，要求通过数据包，分析问题原因。</li></ol><hr><p><strong>排查思路：</strong></p><ol><li><p>只抓取了分支vpn上eth0口的包和总部vpn设备eth0上的包（建议是分支电脑和总部服务器都抓取，抓不了也没    办法）</p></li><li><p>因为是终端pc访问服务器的时候经常断开。所以先看在终端侧的数据包，也即是查看zbssleth0这个包</p><blockquote><ol><li>打开之后，先点击<strong>Statistics</strong>，选中<strong>conversation</strong></li></ol><p><img src="/2019/07/07/远程桌面访问不了/1.jpg" alt="1"></p><ol start="2"><li>出现下图界面，选中<strong>TCP</strong>，看到存在三个连接。说明应该是测试过3次。其中注意到字节数Bytes， 第二个连接有112kB，比其他连接传输的数据都多，那我们就先来看这个连接。</li></ol><p><img src="/2019/07/07/远程桌面访问不了/2.jpg" alt="1"></p><ol start="3"><li>怎么看呢？右键该连接后，照下图操作</li></ol><p><img src="/2019/07/07/远程桌面访问不了/3.jpg" alt="1"></p><ol start="4"><li>wireshark自动过滤该连接，显示如下界面</li></ol><p><img src="/2019/07/07/远程桌面访问不了/4.jpg" alt="1"></p><ol start="5"><li>我们可以点开专家分析来看看，是否存在什么问题。点开之后，记得把<strong>Limit to Display ﬁlter</strong> 给勾上，这样才会显示在wireshark过滤后展示页面的信息。</li></ol><p><img src="/2019/07/07/远程桌面访问不了/5.jpg" alt="1"></p><p><img src="/2019/07/07/远程桌面访问不了/6.jpg" alt="1"></p><ol start="6"><li>由于不涉及访问卡慢的问题，所以此时我们没必要看重传等信息。重点应该关注是什么导致的连接  断开。此时，明显能看到告警信息中，存在RST包，那我们就可以看下304号包与306号包。</li></ol><p><img src="/2019/07/07/远程桌面访问不了/7.jpg" alt="1"></p><ol start="7"><li>找到304号包与306包后，发现后面就再也没有数据了，说明此时连接是中断了。明明数据传的好好   的，怎么突然客户端10.0.2.132就发送一个RST包呢。此时需要注意的是，我们的数据包是在总部vpn设备上eth0口抓的，也就是说这个流量是从内部传过来的。结合着总部的拓扑情况，出现中断，  可能存在2种情况。要么是客户端自己的问题，要么就是有啥子设备替客户端发送了这个RST包。</li></ol><p><img src="/2019/07/07/远程桌面访问不了/8.jpg" alt="1"></p><ol start="8"><li><p>一个直接的办法就是在客户端上抓包。看下客户端有没有发出这个RST包。如果没有，结合着网络拓  扑，那基本就可以确定是AC发了这个RST包了（第一个，客户环境比较简单；第二个，谁叫AC是行  为管控呢）。如果客户端上的抓包有这个RST，那就是客户端的问题。</p></li><li><p>如果客户说，我电脑上不能安装其他软件（不管为啥，你就当死活不允许好了）。那就是说，我们  不能在客户端上抓包。那好，我们就只能在现有的数据包中获取蛛丝马迹了。</p></li><li><p>此时，我们还有一个方法判断是不是由客户端发出的这个RST包，那就是通过IP.ID这个参数。</p></li><li><p>IP.ID是什么鬼？那我们要知道数据包是如何封装的，如下图所示。如果看不懂，请参考<a href="https://wizardforcel.gitbooks.io/network-basic/content/0.html" target="_blank" rel="noopener">网络基本功</a>。IP.ID是IP数据报头中的一个字段。表明了一个数据包的身份，比如一个数据内容过大，被传输的时候就要对这个数据进行切割，即进行分片。当接收方收到这些分片后，需要把这些分片组装起来，那接收方每次收这么多的数据包，它咋知道哪些分片是从同一个数据内容中出来的呢？就要靠IP.ID了，通过IP.ID就可以把这些分片组装起来，还原成最初始的大块数据。就像你玩乐高玩具，乐  高里面这么多零件，如果这些零件中混入了其他玩具的零件。那你想把这个乐高玩具组装起来肯定需要一个标识来进行识别哪些零件是同属于一个乐高模型的。</p><p><img src="/2019/07/07/远程桌面访问不了/9.jpg" alt="1"></p></li><li><p>上述还只是告诉了你，啥是IP.ID。那回到问题中来，你还需要知道的一个点就是，如果是一个设备   去发数据包，那么他的IP.ID增长是线性的。即一般来说，同一台设备发出第一个包，如果IP.ID是1，   第二个包就是2。就算不符合这规律，那数值起码也不会差太多。</p></li><li><p>我们再来看下wireshark，299号包的IP.ID=18970。302号包的IP.ID=18971。而304号包的IP.ID=22566。那RST包和之前的两个包，这数值也差的太多了啊，所以基本能判断这个包不是客户端发出的。</p><p><img src="/2019/07/07/远程桌面访问不了/10.jpg" alt="1"></p></li></ol><p> <img src="/2019/07/07/远程桌面访问不了/11.jpg" alt="1"></p><p> <img src="/2019/07/07/远程桌面访问不了/12.jpg" alt="1"></p></blockquote></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;远程桌面访问不了&quot;&gt;&lt;a href=&quot;#远程桌面访问不了&quot; class=&quot;headerlink&quot; title=&quot;远程桌面访问不了&quot;&gt;&lt;/a&gt;远程桌面访问不了&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;问题：总部PC去访问分支的服务器3389桌面，会出现不定时中断的问题&lt;/st
      
    
    </summary>
    
      <category term="实战" scheme="https://dilidonglong.github.io/categories/%E5%AE%9E%E6%88%98/"/>
    
    
  </entry>
  
  <entry>
    <title>视频会议卡顿</title>
    <link href="https://dilidonglong.github.io/2019/06/13/%E8%A7%86%E9%A2%91%E4%BC%9A%E8%AE%AE%E5%8D%A1%E9%A1%BF/"/>
    <id>https://dilidonglong.github.io/2019/06/13/视频会议卡顿/</id>
    <published>2019-06-13T14:29:26.000Z</published>
    <updated>2019-06-13T14:54:10.974Z</updated>
    
    <content type="html"><![CDATA[<h1 id="视频会议卡顿——用wireshark定位问题"><a href="#视频会议卡顿——用wireshark定位问题" class="headerlink" title="视频会议卡顿——用wireshark定位问题"></a>视频会议卡顿——用wireshark定位问题</h1><p><strong>基础知识</strong>（TCP和UDP的比较）</p><p>TCP报文和UDP报文如下</p><p><img src="/2019/06/13/视频会议卡顿/1.png" alt="1551317757941"></p><p>在报文头部中，我们可以知道，TCP除了源目端口，还会有seq号，ack号，6个标志位以及一个接受窗口字段。而UDP报文头部只有源目端口，长度和校验和字段。UDP报文头部8字节，TCP的最短报文头部20字节，UDP报文头部连TCP头部长度的一半都不到，想复杂也复杂不起来。</p><p>我们知道TCP是需要建立连接后才会开始传输数据的，而UDP不用。TCP就像打电话，必须先拨通对方手机，然后才互相交流，如果对方没有听清，那自己就可以把话语重复一遍，确保对方接收无误。UDP就像发短信，我给一个人发送短信后，第一不会知道对方是否有收到；即便对方收到后，我也不知道信息发给对方有没有出错。</p><p>在TCP中，假设有很长一段数据要发送，假设有4380（1460*3）字节的数据。我们知道在以太网中，以太网帧的数据部分最大长度是1500字节，假设TCP和IP头部各占20字节，那么一个TCP段的数据就是1460字节，超过这个字节就要分段。所以这4380个字节就要分成3个包去发送。这3个包就类似于下表，假设第一个包的seq号是0，那么下一个包的seq号就是1460（上一个包的seq号+长度）。</p><table><thead><tr><th>包号</th><th>seq号</th><th>lenth长度</th></tr></thead><tbody><tr><td>1</td><td>0</td><td>1460</td></tr><tr><td>2</td><td>1460</td><td>1460</td></tr><tr><td>3</td><td>2920</td><td>1460</td></tr></tbody></table><p>正常情况下，接收方要收到这3个包。假设第二个包在传输过程中丢失了，接收方只能收到seq号是0（长度是1460字节）和seq号是2920（1460字节）的包，那他就清楚1460的这个包在路上丢失了，就可以要发送方重传第二个包。</p><p>对于UDP而言，它没有建立连接的机制，同时也没有流控和差错控制机制。那它要发送数据出去，如果数据部分超过了最大的数据长度1472字节（以太网帧的数据部分最大长度是1500字节，IP头部20字节，UDP头部8字节），就要靠下层的IP来分片。分片要如何组装起来，在之前的文章中提到过，涉及的就是ip.id和片偏移。</p><p>如果数据部分没有超过UDP中的最大数据长度，就不会被分片，那么每个报文的ip.id也就是不一样的。</p><p>也就是说在UDP中，发送方发送一个小数据出去，接收方收到就收到了，没收到那我也不知道，也不会重传。</p><p>而发送方要是发送一个大数据（超过UDP最大数据长度，会有多个分片），如果有一个分片丢失，那么接收方按ip.id和片偏移无法组装起来，那么就会向发送方发送消息，让发送方重传。此时的重传不会像TCP一样，只发送丢弃的那个包，而是要把之前这个包的所有分片全部重传。</p><hr><p><strong>客户问题</strong></p><p>左边是分支，右边是总部。分支的视频服务器上看总部端的画面很流程，但是在总部的视频服务器上看分支端的画面则特别卡。</p><p><strong>客户拓扑</strong></p><p><img src="/2019/06/13/视频会议卡顿/2.png" alt="1551317757941"></p><p><strong>问题分析</strong></p><ol><li><p>视频会议和语音通话基本都是使用UDP协议。同时数据字节不会很大，一般不会超过最大UDP数据报文长度，那么每个数据包ip.id的值是不一样的。不会出现设备收到分片组装不起来的情况。</p></li><li><p>分支的视频服务器看总部的画面正常，说明总部给分支传的UDP数据流是没有丢包的。</p></li><li><p>总部的视频服务器看分支画面有卡顿，说明分支给总部传的UDP数据流可能存在丢包。</p></li><li><p>总部和分支之间互传数据是互不干扰的。因为不是TCP下，建立连接后的两端数据互传。</p></li><li><p>两台设备上都做了策略路由，视频服务器的流量都走了联通线路。（其实最开始的情况是，分支到总部的数据往电信线路传了，总部往分支的数据就走了联通，存在总部看分支画面丢包的情况。怀疑是线路问题，就调整了策略，让数据都走了联通，但是问题还是存在。）</p></li><li><p>查看两端的控制台配置，策略都是正常的。出现丢包的时候，经过设备的流量都不大，cpu利用率也不高。</p></li><li><p>于是在客户两端都开启视频服务器的情况下，抓包分析。</p></li></ol><p><img src="/2019/06/13/视频会议卡顿/3.png" alt="1551317757941"></p><ol start="8"><li>先看分支的内网口（eth0）的抓包情况。</li></ol><p><img src="/2019/06/13/视频会议卡顿/4.png" alt="1551317757941"></p><ol start="9"><li>由于是总部看分支，画面存在卡顿。那我们主要关注的就是分支视频服务器172.17.160.8给总部视频服务器10.16.121.250这个方向的流量</li></ol><p><img src="/2019/06/13/视频会议卡顿/5.png" alt="1551317757941"></p><p>选择B到A这个方向。选择完后，主界面就会自动给你过滤出分支视频服务器给总部视频服务器这个方向的流量</p><p><img src="/2019/06/13/视频会议卡顿/6.png" alt="1551317757941"></p><p><img src="/2019/06/13/视频会议卡顿/7.png" alt="1551317757941"></p><ol start="10"><li><p>由于画面存在卡顿，很可能的原因是丢包。UDP不像TCP那样，有所谓的seq号。在TCP中，哪个包丢了，我可以通过seq号把丢的包找到，但UDP不行。那有没有什么办法可以让UDP像TCP一样，能给这些数据包按顺序编个号吗？哪个UDP包丢了，我可以通过这个编号识别到。</p></li><li><p>是可以的。那就是把UDP的数据包编码为RTP的数据包，对RTP协议感兴趣的同学可以看这篇文章<a href="https://www.jianshu.com/p/631273bc9847?utm_campaign=maleskine&amp;utm_content=note&amp;utm_medium=reader_share&amp;utm_source=weibo" target="_blank" rel="noopener">实时传输协议RTP/RTCP</a></p></li></ol><p><img src="/2019/06/13/视频会议卡顿/8.png" alt="1551317757941"></p><p>我们来看下把UDP包编码成RTP包在wireshark中是啥样的。</p><p><img src="/2019/06/13/视频会议卡顿/9.png" alt="1551317757941"></p><p><img src="/2019/06/13/视频会议卡顿/10.png" alt="1551317757941"></p><p>上图看到，其实所谓的编码，是把UDP包中的数据部分变成了RTP数据报文，RTP数据报文中存在seq号。</p><ol start="12"><li>我们在<strong>会话统计</strong>中可以看到分支给总部传数据的时候，建立了6个连接。其中前2个连接的数据量相对大一些。</li></ol><p><img src="/2019/06/13/视频会议卡顿/11.png" alt="1551317757941"></p><p>为什么前2个连接，传输的数据多些呢？</p><p><img src="/2019/06/13/视频会议卡顿/12.png" alt="1551317757941"></p><p><img src="/2019/06/13/视频会议卡顿/13.png" alt="1551317757941"></p><ol start="13"><li>我们先选择第一个连接，即端口49152到端口2326的。把这个连接使用的UDP协议编码为RTP协议</li></ol><p><img src="/2019/06/13/视频会议卡顿/14.png" alt="1551317757941"></p><p><img src="/2019/06/13/视频会议卡顿/15.png" alt="1551317757941"></p><ol start="14"><li>编码之后，此时wireshark界面如图所示</li></ol><p><img src="/2019/06/13/视频会议卡顿/16.png" alt="1551317757941"></p><ol start="15"><li>接下来，我们打开RTP流分析。可以看到面板已经给我们统计出有2个丢包了，你还能分析出是丢了哪两个包。</li></ol><p><img src="/2019/06/13/视频会议卡顿/17.png" alt="1551317757941"></p><p><img src="/2019/06/13/视频会议卡顿/18.png" alt="1551317757941"></p><p><img src="/2019/06/13/视频会议卡顿/19.png" alt="1551317757941"></p><p> <strong>16.由于是打开的分支eth0接口的抓包，所以此时就可以说明，丢包是丢在了内网</strong></p><ol start="17"><li>按照同样的方法，我们还要查看下在公网链路上是否存在丢包，以及在总部内网是否存在丢包。</li></ol><p><img src="/2019/06/13/视频会议卡顿/2.png" alt="1551317757941"></p><ol start="18"><li><p>因为分支内网存在丢包，所以在查看公网链路上的数据包时（即fzeth3和zbeth2），如果公网数据包中，丢包的序列号和在fzeth0数据包内的一致，说明公网是没有丢包的。如果除去内网中丢包的序列号，还有其他序列号丢失，说明公网链路也有问题。</p></li><li><p>从fzeth3的数据包中，可以看到丢了2个，也是seq=34591和seq=34637丢包了。和内网抓包fzeth0丢包情况一致。而在总部设备的2个口抓包情况也是一样的，就不赘述了。查看方法和上述一致。</p></li></ol><p><img src="/2019/06/13/视频会议卡顿/20.png" alt="1551317757941"></p><ol start="20"><li><p>定位了问题后，可以判断分支内网存在丢包。那么有条件的话就可以在分支视频服务器及交换机上抓包对比查看。</p></li><li><p>最后定位出的问题是交换机网口有问题，换一个交换机问题就解决了。</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;视频会议卡顿——用wireshark定位问题&quot;&gt;&lt;a href=&quot;#视频会议卡顿——用wireshark定位问题&quot; class=&quot;headerlink&quot; title=&quot;视频会议卡顿——用wireshark定位问题&quot;&gt;&lt;/a&gt;视频会议卡顿——用wireshark定位
      
    
    </summary>
    
      <category term="实战" scheme="https://dilidonglong.github.io/categories/%E5%AE%9E%E6%88%98/"/>
    
    
  </entry>
  
  <entry>
    <title>并行/串行/异步传输</title>
    <link href="https://dilidonglong.github.io/2019/06/12/%E5%B9%B6%E8%A1%8C-%E4%B8%B2%E8%A1%8C-%E5%BC%82%E6%AD%A5%E4%BC%A0%E8%BE%93/"/>
    <id>https://dilidonglong.github.io/2019/06/12/并行-串行-异步传输/</id>
    <published>2019-06-12T14:45:28.000Z</published>
    <updated>2019-06-12T15:06:34.049Z</updated>
    
    <content type="html"><![CDATA[<h1 id="【转载】什么是并行传输、串行传输、异步传输？"><a href="#【转载】什么是并行传输、串行传输、异步传输？" class="headerlink" title="【转载】什么是并行传输、串行传输、异步传输？"></a>【转载】什么是并行传输、串行传输、异步传输？</h1><blockquote><p>文章收录自互联网，著作权归原作者所有，若有冒犯请联系我删除。</p><p>商业转载请联系作者获得授权，非商业转载请注明出处。</p><p>本人转载只作个人学习及后续查阅使用</p><p>该篇文档作者：航空航天迷</p><p>原文链接：<a href="https://www.zhihu.com/question/29033993" target="_blank" rel="noopener">什么是并行传输、串行传输、异步传输？</a></p><p>来源：知乎</p></blockquote><hr><p><img src="/2019/06/12/并行-串行-异步传输/1.jpg" alt="img"></p><p>传输可以分为<strong>串行传输</strong>和<strong>并行传输。</strong></p><p><strong>串行传输</strong>可分为<strong>异步传输、同步传输</strong>和<strong>等时传输</strong>。</p><p>下图2是<strong>并行传输</strong>的示意图：</p><p><img src="/2019/06/12/并行-串行-异步传输/2.jpg" alt="img"></p><p>在<strong>并行传输</strong>中，使用多根并行的数据线一次同时传输多个比特。</p><p>例如在图2中，共有8根数据线，一次同时传输8个比特，每个比特占用一根数据线。</p><p>下图3是<strong>串行传输</strong>的示意图：</p><p><img src="/2019/06/12/并行-串行-异步传输/3.jpg" alt="img"></p><p>在<strong>串行传输</strong>中，使用一根数据线传输数据，一次传输1个比特，多个比特需要一个接一个依次传输。</p><p>下面简单介绍一下<strong>串行传输</strong>与<strong>并行传输</strong>的发展历史，从而了解他们俩各自的优缺点，以及发展趋势。</p><p>最早的计算机（电子管计算机和晶体管计算机），其各个接口，例如输入接口、输出接口和存储器接口等，一般采用串行接口，以<strong>串行传输</strong>的方式传输数据。</p><p>下图4为电子管计算机ENIAC</p><p><img src="/2019/06/12/并行-串行-异步传输/4.jpg" alt="img"></p><p>电子管计算机ENIAC诞生于美国宾夕法尼亚大学。重30多吨，占地约170平方米，装有约18000只电子管。</p><p>下图5为电子管计算机中使用的电子管</p><p><img src="/2019/06/12/并行-串行-异步传输/5.jpg" alt="img"></p><p>图5中小玻璃瓶状的东西就是电子管，电子管的体积比较大  下图6为晶体管计算机TRADIC</p><p><img src="/2019/06/12/并行-串行-异步传输/6.jpg" alt="img"></p><p>1954年，贝尔实验室使用800只晶体管组装了世界上第一台晶体管计算机TRADIC。相比电子管，晶体管体积小、重量轻、寿命长、发热少、功耗低，大大改进了计算机中的电子线路的结构，大幅度提高了运算速度。  下图7为晶体管计算机TRADIC中使用的晶体管</p><p><img src="/2019/06/12/并行-串行-异步传输/7.jpg" alt="img"></p><p>电子管计算机和晶体管计算机以<strong>串行传输</strong>的方式传输数据，其原因是当时各个部件都是分立的部件，而不是像今天这样使用集成电路设计。如果采用并行线路的话，元件的数量和占用的空间将成倍增长。比如，一个8比特并行线路的元件数量是串行线路的元件数量的8倍（因为需要为每根线路配置一套接收元件）。另外，元件的数量成倍增长的话，耗电量也会大幅增加。  集成电路技术出现后，大量元件可以集成到一个小小的芯片上，<strong>并行传输</strong>变得方便而便宜。不论是8比特、16比特还是更高比特位数的并行线路，只需要一个并行接口芯片就可以处理，而且并行接口芯片只比串行接口芯片贵一点。</p><p>除了方便便宜外，在相同的工作频率下<strong>并行传输</strong>的传输速度是<strong>串行传输</strong>的数倍，迎合了人们对速度的追求，所以硬盘、打印机等设备开始使用<strong>并行传输</strong>以提高传输速度。PATA（Parallel Advanced Technology Attachment，并行高级技术附件）接口、并口（Parallel Port）和PCI（Peripheral Component Interconnect，外设部件互连）接口成为流行的并行接口。</p><p>下图8为电脑主板上的PATA接口（<strong>并行传输</strong>），用于连接硬盘和光驱</p><p><img src="/2019/06/12/并行-串行-异步传输/8.jpg" alt="img"></p><p>下图9为用于PATA接口的连接线缆</p><p><img src="/2019/06/12/并行-串行-异步传输/9.jpg" alt="img"></p><p>下图10中的编号2为电脑上的并口（<strong>并行传输</strong>），用于连接打印机、扫描仪等</p><p><img src="/2019/06/12/并行-串行-异步传输/10.jpg" alt="img"></p><p>下图11为电脑主板上的PCI接口（<strong>并行传输</strong>），用于插接外置网卡、声卡、显卡和调制解调器卡等）</p><p><img src="/2019/06/12/并行-串行-异步传输/11.jpg" alt="img"></p><p>下图12为采用PCI接口的显卡</p><p><img src="/2019/06/12/并行-串行-异步传输/12.jpg" alt="img"></p><p>图12中的显卡使用时是插入图11中的PCI接口（插槽）中。</p><p>在相同的工作频率下<strong>并行传输</strong>的传输速度是<strong>串行传输</strong>的数倍，但并行线路有一些难以克服的缺点，导致依靠并行线路的<strong>并行传输</strong>无法用于长距离通信。计算机与外界的长距离通信，例如与网络中的另外一台计算机进行通信时，只能使用<strong>串行传输</strong>。</p><p>在计算机内部，如今<strong>串行传输</strong>也显示出了它的优势，有取代<strong>并行传输</strong>的趋势。</p><p>例如，</p><p>SATA接口取代PATA接口；</p><p>USB接口取代并口；</p><p>PCI Express接口取代PCI接口。</p><p>为什么<strong>串行传输</strong>有取代<strong>并行传输</strong>的趋势呢？</p><p>与<strong>串行传输</strong>相比，<strong>并行传输</strong>的缺点是：</p><p>一、线路的成本高</p><p><strong>并行传输</strong>如果每个时钟节拍发送16个比特，则需要16根数据线（另外还需要多根控制线）。</p><p><img src="/2019/06/12/并行-串行-异步传输/13.jpg" alt="img"></p><p>PATA（<strong>并行传输</strong>）连接线缆包含40根导线（16根数据线，24根用于接地和进行控制）；</p><p>SATA（<strong>串行传输</strong>）连接线缆包含7根导线（4数据线+3接地线）。</p><p>如果是长距离通信，<strong>并行传输</strong>的线路成本是<strong>串行传输</strong>的若干倍。</p><p>另外，只有一对传输线时，<strong>串行传输</strong>也可以实现双向通信，所以可以直接利用现有的电话线路进行数据传输；而<strong>并行传输</strong>要多根并行的传输线，没有现有的线路可以利用，要另外专门铺设线路，成本高。</p><p>二、体积大</p><p>并行接口占用空间大，对应线缆占用空间也大。</p><p><img src="/2019/06/12/并行-串行-异步传输/14.jpg" alt="img"></p><p>如图14所示，PATA的接口与连接线缆的尺寸大大于SATA的接口与连接线缆的尺寸</p><p>如果是长距离通信，要求使用比较粗的信号线，以便降低信号的衰减，<strong>并行传输</strong>需要使用多根较粗的信号线捆扎在一起组成通信线缆，占很大空间。</p><p>即使是计算机内部通信，<strong>并行传输</strong>的线缆所占用的空间也比<strong>串行传输</strong>的线缆所占用的空间大很多。</p><p>并行接口的尺寸比串行接口的尺寸大很多，则不利于设备的小型化。例如，在手机和穿戴式设备等领域，希望零件的尺寸越小越好。</p><p>三、信号线之间的干扰大，不能用于长距离传输</p><p>并排的信号线在进行高速传输时，会在每条信号线的周围产生微弱的电磁场，出现串音干扰，进而影响到其它信号线中的数据传输。传输距离越长，串音干扰越严重。</p><p><img src="/2019/06/12/并行-串行-异步传输/15.jpg" alt="img"></p><p>所以，PATA线缆的长度不能超过0.4米，而SATA线缆可以达到1米。</p><p>四、<strong>并行传输</strong>具有同步问题</p><p><img src="/2019/06/12/并行-串行-异步传输/16.jpg" alt="img"></p><p><strong>并行传输</strong>中，如果并行的线路之间的物理性质不一致，例如长度上有细微差别，会导致并行线路中传输的比特不是同时到达接收方，接收器接收数据时容易出错。</p><p>五、传输频率低</p><p>在<strong>并行传输</strong>中，如果传输频率高的话，数据线之间会产生很大的干扰，造成数据出错，即使为数据线添加屏蔽层，也不能保证屏蔽掉高频率产生的干扰。所以，<strong>并行传输</strong>的最高传输频率有一定限制。</p><p>PATA接口的最高传输频率为33MHz，这个几乎已经达到了并行接口的极限。</p><p><strong>串行传输</strong>每次只传输一个比特，但是它的传输频率可以非常高，达到10GHz，是33MHz的300倍。相当于<strong>并行传输</strong>每发送1次，<strong>串行传输</strong>可以发送300次。<strong>并行传输</strong>每次发送300比特，才能赶上<strong>串行传输</strong>的速度，但是每次发送300比特，就需要300根并行的数据线，这是不现实的。</p><p>因为<strong>并行传输</strong>和<strong>串行传输</strong>各自的这些优缺点，导致<strong>并行传输</strong>仅仅用于短距离传输，而长距离传输则采用<strong>串行传输</strong>；同时，在短距离传输中，<strong>串行传输</strong>也在逐步取代<strong>并行传输</strong>。</p><p>什么是<strong>异步传输</strong>呢？</p><p><img src="/2019/06/12/并行-串行-异步传输/17.jpg" alt="img"></p><p>计算机的键盘与主机之间的数据传输就是<strong>异步传输</strong>。</p><p>在键盘上按下一个字母键、数字键或特殊字符键，键盘就需要向主机发送一个对应的长度为8比特的ASCII字符，这个8比特的ASCII字符就是需要发送的数据，大小为1个字节。</p><p><img src="/2019/06/12/并行-串行-异步传输/18.jpg" alt="img"></p><p>如上图所示：例如，当用户按下小写字母键“k”，键盘需要向主机发送字符“01101011”</p><p>用户可能在任意时刻按键盘，所以键盘向主机发送数据的时间不是固定的，也不会事先约好，任何时刻都有可能发送。</p><p>主机事先并不知道键盘什么时候会给自己发送数据，只能静静地等待，一旦发现键盘向自己发送数据，则马上接收。</p><p>主机如何发现键盘开始向自己发送数据了呢？</p><p><img src="/2019/06/12/并行-串行-异步传输/19.jpg" alt="img"></p><p>当键盘不需要向主机发送有效数据时，也就是键盘处于空闲（idle）时，键盘会连续不断地向主机发送比特“1”，告诉主机自己处于空闲状态。比特“1”用正电平表示，也就是键盘一直向主机发送正电平，表示当前没有有效数据发送给主机。</p><p>当键盘被按下，键盘需要向主机发送数据时，键盘会先在数据前添加比特“0”，组成新字符，再发送。</p><p><img src="/2019/06/12/并行-串行-异步传输/20.jpg" alt="img"></p><p>例如，如上图所示，发送数据“01101011”之前，先在“01101011”的前面添加“0”，组成新字符“011010110”</p><p>比特“0”可以用零电平表示。 </p><p><img src="/2019/06/12/并行-串行-异步传输/21.jpg" alt="img"></p><p>如上图所示，键盘处于空闲时，主机接收的一直是比特“1”（正电平），当主机突然接收到比特“0”（零电平）时，马上反应过来，键盘在向自己发送有效数据，则主机开始接收“0”后面的有效数据，这个“0”相当于这个新字符的起始位（start bit）。</p><p>主机开始接收有效数据后，怎么才能知道有效数据接收完了要停下来呢？</p><p>为了解决这个问题，键盘和主机事先约定好：</p><ol><li>每次发送的有效数据为1个字节，即8个比特</li></ol><p><img src="/2019/06/12/并行-串行-异步传输/22.jpg" alt="img"></p><ol start="2"><li><p>数据的传输速率（例如1000比特/秒）</p></li><li><p>键盘在有效数据前面添加起始位（比特0），以通知主机，数据开始发送</p></li></ol><p><img src="/2019/06/12/并行-串行-异步传输/23.jpg" alt="img"></p><ol start="4"><li>键盘在有效数据后面添加停止位（比特1），以通知主机，数据发送结束</li></ol><p><img src="/2019/06/12/并行-串行-异步传输/24.jpg" alt="img"></p><p>下图显示的是：键盘根据和主机的约定，发送给主机的数据和对应的信号。 </p><p><img src="/2019/06/12/并行-串行-异步传输/25.jpg" alt="img"></p><p>当按键“k”被按下时，键盘实际上发送的是“起始位”+k对应的ASCII码+“停止位”。</p><p>键盘发送信号的过程：</p><p>键盘在空闲时，连续地发送正电平给主机，表示当前没有有效数据发送给主机。</p><p>当按键“k”被按下时，键盘发送“起始位”+k对应的ASCII码+“停止位”这3者所对应的信号。然后紧跟着继续发送正电平，表示又处于空闲状态。</p><p>主机接收信号的过程：</p><p>主机开始接收到的一直是正电平，表示当前没有有效数据发送给主机。</p><p>主机接收到起始位比特“0”（零电平）后，开始接收比特“0”后面的有效数据。</p><p>根据约定，有效数据为1个字节，共8个比特；数据的传输速率例如为1000比特/秒，也就是每毫秒传输1个比特，则8个比特的传输时间为8毫秒。</p><p>所以主机根据自己的时钟，在起始位比特“0”后面的8毫秒内接收有效数据。</p><p>具体的接收方式（举例说明）是：</p><p><img src="/2019/06/12/并行-串行-异步传输/26.jpg" alt="img"></p><p>主机在起始位后面的0.5毫秒、1.5毫秒、2.5毫秒、3.5毫秒、4.5毫秒、5.5毫秒、6.5毫秒、7.5毫秒分别对信号进行采样，也就是在每个比特的正中间进行采样，以获得这8比特的有效数据。</p><p>根据约定，8比特的有效数据后面跟着的是停止位。</p><p>如果主机在第8.5毫秒接收到比特“1”（停止位），则主机可以确定数据的发送确实结束了，则结束有效数据的接收，并接受所接收的数据。</p><p>如果主机在第8.5毫秒接收到的不是比特“1”（停止位），则主机判断传输过程中发生错误，就放弃所接收到的数据。</p><p>无论接受还是放弃所接收到的数据，主机都不会向键盘进行反馈。</p><p>键盘向主机发送数据后，就撒手不管了，不会等待主机的确认或其他任何反馈。</p><p>在停止位之后，主机接收到的是表示空闲的正电平，继续等待键盘发送数据。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;【转载】什么是并行传输、串行传输、异步传输？&quot;&gt;&lt;a href=&quot;#【转载】什么是并行传输、串行传输、异步传输？&quot; class=&quot;headerlink&quot; title=&quot;【转载】什么是并行传输、串行传输、异步传输？&quot;&gt;&lt;/a&gt;【转载】什么是并行传输、串行传输、异步传
      
    
    </summary>
    
      <category term="收录文章" scheme="https://dilidonglong.github.io/categories/%E6%94%B6%E5%BD%95%E6%96%87%E7%AB%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>访问X友软件卡顿</title>
    <link href="https://dilidonglong.github.io/2019/06/11/%E8%AE%BF%E9%97%AEX%E5%8F%8B%E8%BD%AF%E4%BB%B6%E5%8D%A1%E9%A1%BF/"/>
    <id>https://dilidonglong.github.io/2019/06/11/访问X友软件卡顿/</id>
    <published>2019-06-11T14:23:27.000Z</published>
    <updated>2019-06-11T15:13:09.014Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2017年应用访问卡慢分析"><a href="#2017年应用访问卡慢分析" class="headerlink" title="2017年应用访问卡慢分析"></a>2017年应用访问卡慢分析</h1><h2 id="1-基本情况："><a href="#1-基本情况：" class="headerlink" title="1.基本情况："></a>1.基本情况：</h2><p>客户环境现象：</p><p>总部和分支使用sangfor vpn对接，分支内网电脑ping总部内网服务器，没有丢包，没有延时。但是在分支使用X友客户端访问总部的X友服务器会出现卡顿（即打开客户端后，有些内容显示出来的等待时间较长）</p><p>为了排错，客户那边基本没有其他流量在跑。</p><hr><p>客户内网拓扑：</p><p>总部和分部通过woc做vpn对接（没开加速），其中eth0口是内网口，pppoe和wan（eth2）口是外网口。分支woc的wan口（pppoe）地址是100.64.7.184，eth0（lan口）地址是10.37.11.254，lan口下连一台测试电脑10.37.11.180。总部单臂部署，X友服务器是10.37.1.77。分支pc通过X友软件和总部的X友服务器做数据交互。</p><p><img src="/2019/06/11/访问X友软件卡顿/1.png" alt="1"></p><h2 id="2-排错操作："><a href="#2-排错操作：" class="headerlink" title="2.排错操作："></a>2.排错操作：</h2><ol><li><p>在分支客户端电脑开始访问X友前，在分支woc和总部woc的eth0口，vpntun口，wan口写下抓包命令。写完之后执行命令，之后再用电脑正式访问X友。看到现象后，等待几秒再停止所有接口的抓包。</p><p><img src="/2019/06/11/访问X友软件卡顿/2.png" alt="2"></p></li><li><p>其实在抓到上述6份比较漂亮的包之前，我还重复上述操作过几次。虽然时间比较久了，但是我看到自己有导出csv的后缀文件，估计是我那时候想通过比较几个文件中的ip.id来判断访问应用的时候是否存在丢包。估计那时候我没看出啥东西来，就纯浪费时间去了。</p><p><img src="/2019/06/11/访问X友软件卡顿/3.png" alt="3"></p></li><li><p>后来听说X友这种应用访问卡慢，是因为小包交互过多导致的。就试着打开了一个包fenzhieth0.pcap，然后输入过滤条件，来看下200字节以下的包有多少。emmmm一看占比57.6%呢，小包很多了很多了</p><p><img src="/2019/06/11/访问X友软件卡顿/4.png" alt="4"></p></li><li><p>于是脑补出理由，打电话给渠道。举个例子，访问X友打开软件要传输15000字节的数据，公网延时是20-30ms，比如小包只传100字节，那这15000字节的数据就要传输150次，时间上就是20ms*150，这样访问就会出现卡顿的情况。如果是用ftp等测试，每次传输是1000字节的话，就是传输15次，所以访问ftp服务器的时候你就不会觉得卡。所以这是X友那边发包机制的问题，和我们设备没有关系</p></li><li><p>渠道觉得好有道理，然后就信了，之后他去和客户解释就再也没找我了。工单关闭</p></li></ol><hr><h2 id="3-上述排错错在哪"><a href="#3-上述排错错在哪" class="headerlink" title="3.上述排错错在哪"></a>3.上述排错错在哪</h2><ol><li><p>自己想当然的瞎JB乱讲，同时基础概念不清晰，或者说是完全没有概念</p></li><li><p>在TCP中，发送方和接收方都会存在一个发送窗口和接受窗口。发送窗口表示我发送方一口气能发送多少数据，接收窗口表示我接收方还能接收多少数据放在缓存区中。发送方要尽量保证多发数据，同时也得保证接收方能接收的过来，不至于数据发生溢出。MSS是一个数据段的数据最大长度，那么发送窗口和MSS存在啥关系呢。刚刚说道，发送窗口表示我发送方一口气能发送多少数据，那么MSS的值就确定了，我要一口气发这么多数据要发出多少个包。举个例子来说，我发送方一口气能发送1000个字节，但是一个数据段的MSS是100字节，那么我一口气就能发10个包出去。</p></li><li><p>给渠道说的理由，看上去好像没问题。其实概念就没弄清。给渠道的说法表明，我的数据包是一个一个发出的，但是实际上TCP中不是这么传输数据的</p></li></ol><hr><h2 id="4-重新整理排错思路"><a href="#4-重新整理排错思路" class="headerlink" title="4.重新整理排错思路"></a>4.重新整理排错思路</h2><ol><li><p>访问一个应用卡慢，分两种情况。一个是网络问题，一个是设备性能问题。</p></li><li><p>ping测试是在网络层的测试。客户环境中ping测试不丢包不延时，基本上可以判断网络是没啥问题的</p></li><li><p>之前做了这么一个操作，把pcap文件导出成csv文件，想通过比较各个csv文件中是否存在丢包。但是没有看是什么东西来，而且上述操作比较耗时间。要知道的是，如果数据包丢失，就会导致重传或是有重复ACK。那我们是不是可以通过wireshark工具来自动分析下</p></li><li><p>先通过过滤条件，把测试电脑与服务器的互访流量给过滤处理</p><p><img src="/2019/06/11/访问X友软件卡顿/5.png" alt="5"></p></li><li><p>然后在把文件重新保存一份</p><p><img src="/2019/06/11/访问X友软件卡顿/6.png" alt="6"></p></li><li><p>先打开fenzhieth0这个包。过滤出客户端和服务器双向交互的流量</p></li><li><p>随机选择一个包，然后右键点击<strong>Follow</strong>—&gt;<strong>tcp stream</strong>，过滤出一个tcp连接的互访流量</p><p><img src="/2019/06/11/访问X友软件卡顿/7.png" alt="7"></p></li><li><p>然后点击<strong>统计</strong> <strong>statistics</strong>—&gt;<strong>TCP Stream Graphs</strong>—&gt;<strong>time sequence</strong> <strong>（stevens）</strong>，可以看到该连接，一个方向上的seq号增长情况</p><p><img src="/2019/06/11/访问X友软件卡顿/8.png" alt="8"></p></li><li><p>可以看到弹出下框，也就意味着。在该连接中，服务器到用户客户端方向的数据流增长过程中，有5s左右是卡住了。那我们通过Stevens图，可以找到卡住的2个点，包号分别是467号包与819号包</p><p><img src="/2019/06/11/访问X友软件卡顿/9.png" alt="9"></p></li><li><p>可以看到下图，服务器在等待客户端发送816号包。而816号包的发出，是在468号包发出之后耗时近6s。</p><p><img src="/2019/06/11/访问X友软件卡顿/10.png" alt="10"></p></li><li><p>后续又按上述操作，观察了其他的几个tcp连接，以及zongbueth0口的抓包情况。都是一模一样的，总会有几秒卡住</p></li><li><p>也就意味着，这是180这台客户端的问题</p></li><li><p>为什么会出现这种情况，这就是X友厂商应该去分析的了。因为这个是X友应用层层面的问题</p></li></ol><hr><h2 id="5-联想"><a href="#5-联想" class="headerlink" title="5.联想"></a>5.联想</h2><ul><li>为什么和我们设备无关了？ </li></ul><p>​       ——因为在woc的eth0口抓包，发现上图中468号包发出之后，隔了近6s才收到了816号包。我们设备都没做封装啥的操作呢，只是单纯接收包而已</p><ul><li>用woc开启加速后，会有效果吗？</li></ul><p>​        ——个人认为不会，因为woc开启后，是分支的woc设备和分支内网电脑做交互。把woc设备当做是总部的服务器，那内网客户端和woc交互数据的时候，依旧会出现上面这种情况，因为这种情况是在客户端电脑上发生的。要想解决，就得从客户端上看是什么原因导致了这6s的延时发包。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;2017年应用访问卡慢分析&quot;&gt;&lt;a href=&quot;#2017年应用访问卡慢分析&quot; class=&quot;headerlink&quot; title=&quot;2017年应用访问卡慢分析&quot;&gt;&lt;/a&gt;2017年应用访问卡慢分析&lt;/h1&gt;&lt;h2 id=&quot;1-基本情况：&quot;&gt;&lt;a href=&quot;#1-
      
    
    </summary>
    
      <category term="实战" scheme="https://dilidonglong.github.io/categories/%E5%AE%9E%E6%88%98/"/>
    
    
  </entry>
  
  <entry>
    <title>英语名词</title>
    <link href="https://dilidonglong.github.io/2019/05/06/%E8%8B%B1%E8%AF%AD%E5%90%8D%E8%AF%8D/"/>
    <id>https://dilidonglong.github.io/2019/05/06/英语名词/</id>
    <published>2019-05-06T14:57:04.000Z</published>
    <updated>2019-05-06T14:57:34.321Z</updated>
    
    <content type="html"><![CDATA[<h1 id="英语名词"><a href="#英语名词" class="headerlink" title="英语名词"></a>英语名词</h1><h2 id="1-名词简介"><a href="#1-名词简介" class="headerlink" title="1.名词简介"></a>1.名词简介</h2><p>名词是<strong>人</strong>（people）、<strong>地</strong>（places）、<strong>事</strong>（things）和<strong>想法</strong>（ideas）</p><h3 id="1-1单复数名词singular-and-plural-nouns"><a href="#1-1单复数名词singular-and-plural-nouns" class="headerlink" title="1.1单复数名词singular  and  plural  nouns"></a>1.1单复数名词singular  and  plural  nouns</h3><p>单数名词只包含名词本身，只有一个事物</p><p>复数名词意味着有更多（more），即一个以上的事物</p><p>大部分名词由单数变成复数都是有规律的（即直接在名词后面+s）。但是也有部分名词的变化没有规律</p><h2 id="2-名词种类"><a href="#2-名词种类" class="headerlink" title="2.名词种类"></a>2.名词种类</h2><h3 id="2-1普通名词（common）和专有名词（proper）。"><a href="#2-1普通名词（common）和专有名词（proper）。" class="headerlink" title="2.1普通名词（common）和专有名词（proper）。"></a>2.1普通名词（common）和专有名词（proper）。</h3><p>普通名词在句首时，首字母才大写。而专有名词的首字母是一直大写</p><table><thead><tr><th style="text-align:center">common nouns</th><th style="text-align:center">proper nouns</th></tr></thead><tbody><tr><td style="text-align:center">city</td><td style="text-align:center">Chicago</td></tr><tr><td style="text-align:center">frog</td><td style="text-align:center">Kermit</td></tr><tr><td style="text-align:center">river</td><td style="text-align:center">Nile</td></tr><tr><td style="text-align:center">mountain</td><td style="text-align:center">Kilimanjaro</td></tr></tbody></table><h3 id="2-2具象名词（concrete）和抽象名词（abstract）。"><a href="#2-2具象名词（concrete）和抽象名词（abstract）。" class="headerlink" title="2.2具象名词（concrete）和抽象名词（abstract）。"></a>2.2具象名词（concrete）和抽象名词（abstract）。</h3><p>具象表示看得见摸得着的，而抽象名词则相反，比如一些概念。</p><h2 id="3-不规则名词复数"><a href="#3-不规则名词复数" class="headerlink" title="3.不规则名词复数"></a>3.不规则名词复数</h2><h3 id="3-1-f变为-ves"><a href="#3-1-f变为-ves" class="headerlink" title="3.1-f变为-ves"></a>3.1-f变为-ves</h3><table><thead><tr><th style="text-align:center">singular</th><th style="text-align:center">plural</th></tr></thead><tbody><tr><td style="text-align:center">lea<strong>f</strong></td><td style="text-align:center">lea<strong>ves</strong></td></tr><tr><td style="text-align:center">loa<strong>f</strong></td><td style="text-align:center">loa<strong>ves</strong></td></tr><tr><td style="text-align:center">cal<strong>f</strong></td><td style="text-align:center">cal<strong>ves</strong></td></tr></tbody></table><h3 id="3-2以en结尾的复数名词"><a href="#3-2以en结尾的复数名词" class="headerlink" title="3.2以en结尾的复数名词"></a>3.2以en结尾的复数名词</h3><p>只需要记住一个，<strong>child</strong>要变成<strong>children</strong></p><h3 id="3-3单复数同形"><a href="#3-3单复数同形" class="headerlink" title="3.3单复数同形"></a>3.3单复数同形</h3><p>sheep，fish，bison</p><h3 id="3-4突变体复数"><a href="#3-4突变体复数" class="headerlink" title="3.4突变体复数"></a>3.4突变体复数</h3><table><thead><tr><th style="text-align:center">singular</th><th style="text-align:center">plural</th></tr></thead><tbody><tr><td style="text-align:center">f<strong>oo</strong>t</td><td style="text-align:center">f<strong>ee</strong>t</td></tr><tr><td style="text-align:center">wom<strong>a</strong>n</td><td style="text-align:center">wom<strong>e</strong>n</td></tr><tr><td style="text-align:center">m<strong>a</strong>n</td><td style="text-align:center">m<strong>e</strong>n</td></tr><tr><td style="text-align:center">t<strong>oo</strong>th</td><td style="text-align:center">t<strong>ee</strong>th</td></tr><tr><td style="text-align:center">g<strong>oo</strong>se</td><td style="text-align:center">g<strong>ee</strong>se</td></tr><tr><td style="text-align:center">m<strong>ous</strong>e</td><td style="text-align:center">m<strong>ic</strong>e</td></tr><tr><td style="text-align:center">l<strong>ous</strong>e</td><td style="text-align:center">l<strong>ic</strong>e</td></tr></tbody></table><h3 id="3-5外来词复数"><a href="#3-5外来词复数" class="headerlink" title="3.5外来词复数"></a>3.5外来词复数</h3><table><thead><tr><th style="text-align:center">语言</th><th style="text-align:center">变化</th><th style="text-align:center">单数</th><th style="text-align:center">复数</th><th style="text-align:center">规则变化复数</th></tr></thead><tbody><tr><td style="text-align:center">拉丁语</td><td style="text-align:center">a—ae</td><td style="text-align:center">larv<strong>a</strong></td><td style="text-align:center">larv<strong>ae</strong></td><td style="text-align:center">larva<strong>s</strong></td></tr><tr><td style="text-align:center">拉丁语</td><td style="text-align:center">us—i</td><td style="text-align:center">fung<strong>us</strong></td><td style="text-align:center">fung<strong>i</strong></td><td style="text-align:center">fungus<strong>es</strong></td></tr><tr><td style="text-align:center">拉丁语</td><td style="text-align:center">um—a</td><td style="text-align:center">dat<strong>um</strong></td><td style="text-align:center">dat<strong>a</strong></td><td style="text-align:center">无</td></tr><tr><td style="text-align:center">拉丁语</td><td style="text-align:center">ex—ices</td><td style="text-align:center">ind<strong>ex</strong></td><td style="text-align:center">ind<strong>ices</strong></td><td style="text-align:center">index<strong>es</strong></td></tr><tr><td style="text-align:center">希腊语</td><td style="text-align:center">is—es</td><td style="text-align:center">thes<strong>is</strong></td><td style="text-align:center">thes<strong>es</strong></td><td style="text-align:center">thesis<strong>es</strong></td></tr><tr><td style="text-align:center">希腊语</td><td style="text-align:center">on—a</td><td style="text-align:center">criteci<strong>on</strong></td><td style="text-align:center">criteci<strong>a</strong></td><td style="text-align:center">无</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;英语名词&quot;&gt;&lt;a href=&quot;#英语名词&quot; class=&quot;headerlink&quot; title=&quot;英语名词&quot;&gt;&lt;/a&gt;英语名词&lt;/h1&gt;&lt;h2 id=&quot;1-名词简介&quot;&gt;&lt;a href=&quot;#1-名词简介&quot; class=&quot;headerlink&quot; title=&quot;1.名词简
      
    
    </summary>
    
      <category term="英语" scheme="https://dilidonglong.github.io/categories/%E8%8B%B1%E8%AF%AD/"/>
    
    
  </entry>
  
  <entry>
    <title>软考试题3</title>
    <link href="https://dilidonglong.github.io/2019/05/06/%E8%BD%AF%E8%80%83%E8%AF%95%E9%A2%983/"/>
    <id>https://dilidonglong.github.io/2019/05/06/软考试题3/</id>
    <published>2019-05-06T14:56:29.000Z</published>
    <updated>2019-05-06T15:02:17.975Z</updated>
    
    <content type="html"><![CDATA[<h1 id="软考试题3"><a href="#软考试题3" class="headerlink" title="软考试题3"></a>软考试题3</h1><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>A、B是局域网上两个相距1km的站点，A采用同步传输方式以1Mb/s的速率向B发送长度为200，000字节的文件。假定数据帧长为128比特，其中首部为48比特:应答帧为22比特，A在收到B的应答帧后发送下一帧。传送文件花费的时间为（  ）s，有效的数据速率为（  ）Mb/s（传播速率为200m/us）<br>A.1.6            B.2.4              C.3.2                  D.3.6<br>A.0.2            B.0.5              C.0.7                  D.0.8</p><h2 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h2><ol><li><p>数据传输的过程中，可以理解成是寄快递。比如我想给我妈寄一支牙刷，牙刷用纸盒子包着。我妈拿到这个快递后，真正有用的想要的也就只有这个牙刷而已，那个纸盒子不是真正想要的东西。不过纸盒子上会有寄件人和收件人的信息。</p></li><li><p>题干中说的<code>假定数据帧长为128比特，其中首部为48比特</code>，其中首部48比特就类似于是纸盒子。128比特就类似于是被纸盒子包着的牙刷。那此时真正有用的数据部分是多少比特呢？聪明如你，很快就知道了是128-48=80bit。也就是说这80bit就类似于是这个牙刷。</p><hr></li><li><p>现在假设寄的不是牙刷，而是一个需要组装的电脑桌。这个桌子不像牙刷那么好寄，东西太多了，一个纸盒子可能还放不下，要多个纸盒子包着，然后再寄出去。</p></li><li><p>题干中说的200，000字节（即200，000x8=1600，000比特）的文件就类似于是需要组装的电脑桌。每个纸盒子只能放电脑桌部件的一部分，即每个盒子只能放80比特的内容。</p></li><li><p>那么此时需要多少个纸盒子装呢？聪明如你，相信已经知道了。1600 000/80=20 000。</p></li><li><p>一个纸盒子再加上里面的部件，合起来一共是128个比特。那么所有的包裹（纸盒子+电脑桌部件）加起来，占多少个比特呢。就是20 000x128=2560 000比特。</p><hr></li><li><p>快递公司穷，只有一辆车来运包裹，一次还只能运一个。运过去之后，还得等对方说一句我收到了，才能接着发第二个包裹。对方说的那句我收到了，就类似于题干中说的22比特的应答帧。也就是说，我发20 000个包裹过去，居然要回应20 000次我收到了。</p><hr></li><li><p>上述了解完后，可以开始做题了。我们知道如何计算一个数据帧从发出到对方接收所需要时间的公式，即发送时延+传播时延</p></li><li><p><strong>发送时延=数据帧长度/数据速率。把题中数值带入，即128bit/1Mbps=0.000128s。</strong></p></li><li><p><strong>传播时延=两点间距离/光速的三分之二。把题中数值带入，即1000m/（2x10^8）mps=0.000005s</strong></p></li><li><p><strong>所以从发送方发出一个帧到接收方接收，所需要的时间是0.000128+0.000005s=0.000133s</strong></p></li><li><p>我们把包裹发出去，还得等对方说句收到了才能继续发下一个包裹。那么对方说一句收到了，到我们发送方接收到需要多少时间呢？同理可得，<strong>发送时延=数据帧长度/数据速率。把题中数值带入，即22bit/1Mbps=0.000022s。传播时延=两点间距离/光速的三分之二。把题中数值带入，即1000m/（2x10^8）mps=0.000005s</strong>。所以需要的时间是<strong>0.000022s+0.000005s=0.000027s</strong></p><hr></li><li><p>综上，一来一回所需要的时间就是0.000027s+0.000133s=0.00016s</p></li><li><p>这还只是一个包需要的时间，现在要发20 000个包，那总共需要多长时间呢？<strong>对的，0.00016x20 000=3.2s</strong></p><hr></li><li><p>最后一问，问你有效数据速率是多少。你的电脑桌就是真正有效的东西，总共也就1600，000比特，为了发这1600000比特，花了一共3.2s的时间。<strong>所以有效数据速率就是1600000bit/3.2s=500 000bps=0.5Mbps</strong></p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;软考试题3&quot;&gt;&lt;a href=&quot;#软考试题3&quot; class=&quot;headerlink&quot; title=&quot;软考试题3&quot;&gt;&lt;/a&gt;软考试题3&lt;/h1&gt;&lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问
      
    
    </summary>
    
      <category term="软考" scheme="https://dilidonglong.github.io/categories/%E8%BD%AF%E8%80%83/"/>
    
    
  </entry>
  
  <entry>
    <title>软考试题2</title>
    <link href="https://dilidonglong.github.io/2019/05/06/%E8%BD%AF%E8%80%83%E8%AF%95%E9%A2%982/"/>
    <id>https://dilidonglong.github.io/2019/05/06/软考试题2/</id>
    <published>2019-05-06T14:55:13.000Z</published>
    <updated>2019-05-06T15:02:08.023Z</updated>
    
    <content type="html"><![CDATA[<h1 id="软考试题2"><a href="#软考试题2" class="headerlink" title="软考试题2"></a>软考试题2</h1><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>用64K×8的RAM芯片和32K×16的ROM芯片设计一个256K×16的存储器，地址范围为00000H～3FFFFH，其中ROM的地址范围为10000H～1FFFFH，其余为RAM的地址。则地址线为（）根，数据线为（）根；RAM需要（）片，ROM需要（）片。<br>问题1选项<br>A 18       B 9          C 16        D 8<br>问题2选项<br>A 18            B 9             C 16            D 8<br>问题3选项<br>A 1             B 2             C 3                D 6<br>问题4选项<br>A 12            B 2             C 9               D 6</p><h2 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h2><ol><li><p>64Kx8表示什么？</p><p>表示一个芯片的容量。其中64K表示一个芯片内地址块的数目，8表示每个地址块里面存放的比特位数。</p><p>其中，1K=1024，1M=1024K。64K=64x1024=65536，即一个芯片内有65536个地址块</p><p>你可以理解成，有一个大菜地（芯片），你把这个大菜地分成65536个小菜地（地址块）。每个小菜地里面都能种8颗白菜（比特位数）。一个芯片的容量就是整个大菜地里面能种的白菜数量。</p><hr></li><li><p>64Kx8与地址线，数据线的关系？</p><p>64K是一个十进制数，即$2^{16}$。</p><p>地址线传递地址信息。如果用1个比特，可以表示2个地址块（地址块数目是$2^1$），即编号为0的地址块和编号为1的地址块。如果用2个比特，可以表示4个地址块（地址块数目是$2^2$），即编号为00，01，10，11的四个地址块。那么我有16个比特的话，就能表示64K个地址块。<strong>一根地址线就占一个比特位，有16根地址线就表示有16个地址比特位。</strong></p><p>数据线传递数据信息。<strong>一根数据线就占一个比特位，8根数据线就占8个数据比特位。</strong></p><p>这些所谓的线，通过电平的高低变化来表示0或1。只是说不同的线，传递的信息是不同的。地址线传地址信息，数据线传数据信息，控制线传控制信息。这些信息是用0和1表示出来的。</p><hr></li><li><p>一个256K×16的存储器，由64K×8的RAM芯片和32K×16的ROM芯片组成。</p><p>你可以理解成，一个超级大菜地分成2个中型菜地，一个种白菜，一个种辣椒。</p><p>这两个中型菜地又分别由小菜地（RAM和ROM芯片）组成。</p><hr></li><li><p>一个256K×16的存储器，地址范围为00000H～3FFFFH（地址编号为十六进制数）。表示有（3FFFF-00000+1）H个地址块。你想下如果有3个数，编号分别为0~3，是不是一共有4个地址块。用3-0=3是不对的，还得再+1。</p><p>即这个存储器（超级大菜地）有（3FFFF-00000+1）H=40000H个地址块，每个地址块能容纳16个比特位数（种16个农作物）。</p><hr></li><li><p>其中ROM的地址范围为10000H～1FFFFH，这是占了超级大菜地里面的一部分地址块。这部分地址块的数目是多少呢？是（1FFFF-10000+1）H=10000H个。这个十六进制数换成十进制数是64K。</p><p>存储器中ROM芯片给的地址块是64K，每个地址块能容纳16个比特。所以存储器中关于ROM的总容量就是64Kx16。</p><p>由于题目中说了，存储器是由32K×16的ROM芯片组成。ROM总容量已知，每个ROM芯片的容量也已知，此时问你需要多少片<strong>ROM，聪明如你，相信已经知道答案了。（64Kx16）/（32Kx16）=2</strong></p><hr></li><li><p>ROM占了整个存储器的地址块有64K个。存储器共有256K个。那么留下来给RAM的地址块数目即是（256-64）K=192K个。RAM的总容量就是192Kx16。</p><p>知道RAM的总容量，知道每片RAM芯片的容量64K×8，问你需要多少片<strong>RAM。聪明如你，相信已经知道答案了。（192Kx16）/（64Kx8）=6</strong></p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;软考试题2&quot;&gt;&lt;a href=&quot;#软考试题2&quot; class=&quot;headerlink&quot; title=&quot;软考试题2&quot;&gt;&lt;/a&gt;软考试题2&lt;/h1&gt;&lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问
      
    
    </summary>
    
      <category term="软考" scheme="https://dilidonglong.github.io/categories/%E8%BD%AF%E8%80%83/"/>
    
    
  </entry>
  
  <entry>
    <title>tcpdump技巧</title>
    <link href="https://dilidonglong.github.io/2019/04/30/tcpdump%E6%8A%80%E5%B7%A7/"/>
    <id>https://dilidonglong.github.io/2019/04/30/tcpdump技巧/</id>
    <published>2019-04-30T15:44:49.000Z</published>
    <updated>2019-04-30T15:45:16.612Z</updated>
    
    <content type="html"><![CDATA[<h1 id="tcpdump使用技巧"><a href="#tcpdump使用技巧" class="headerlink" title="tcpdump使用技巧"></a>tcpdump使用技巧</h1><p>1.监视指定网络接口的数据包</p><p>   [root@www ~]# tcpdump -i eth1                          </p><p>2.也可以指定ip,例如截获所有210.27.48.1 的主机收到的和发出的所有的数据包</p><p>   [root@www ~]# tcpdump host 210.27.48.1       </p><p>3.截获主机210.27.48.1 和主机210.27.48.2 或210.27.48.3的通信</p><p>   [root@www ~]# tcpdump host 210.27.48.1 and \ (210.27.48.2 or 210.27.48.3 \ )      </p><p>4.获取主机210.27.48.1除了和主机210.27.48.2之外所有主机通信的ip包</p><p>   [root@www ~]# tcpdump ip host 210.27.48.1 and ! 210.27.48.2     </p><p>5.截获主机webserver发送的所有数据</p><p>   [root@www ~]# tcpdump -i eth0 src host webserver </p><p>6.监视所有送到主机webserver的数据包       </p><p>   [root@www ~]# tcpdump -i eth0 dst host webserver        </p><p>7.获取主机210.27.48.1接收或发出的telnet包</p><p>   [root@www ~]# tcpdump tcp port 23 and host 210.27.48.1       </p><p>8.打印所有源地址或目标地址是本地主机的IP数据包</p><p>   [root@www ~]# tcpdump ip and not net localnet       </p><p> 9.打印长度超过576字节</p><p>   [root@www ~]# tcpdump ip[2:2] &gt; 576     </p><p>10.第一个n表示以IP地址的方式显示主机名，第二个N是以端口数字的形式代替服务名。</p><p>   [root@www ~]# tcpdump -nn </p><hr><p>[root@www ~]# tcpdump tcp -i eth1 -t -s 0 -c 100 and dst port ! 22 and src net 192.168.1.0/24 -w ./target.cap<br>(1)tcp: ip icmp arp rarp 和 tcp、udp、icmp这些选项等都要放到第一个参数的位置，用来过滤数据报的类型<br>(2)-i eth1 : 只抓经过接口eth1的包<br>(3)-t : 不显示时间戳<br>(4)-s 0 : 抓取数据包时默认抓取长度为68字节。加上-S 0 后可以抓到完整的数据包<br>(5)-c 100 : 只抓取100个数据包<br>(6)dst port ! 22 : 不抓取目标端口是22的数据包<br>(7)src net 192.168.1.0/24 : 数据包的源网络地址为192.168.1.0/24<br>(8)-w ./target.cap : 保存成cap文件，方便用ethereal(即wireshark)分析</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;tcpdump使用技巧&quot;&gt;&lt;a href=&quot;#tcpdump使用技巧&quot; class=&quot;headerlink&quot; title=&quot;tcpdump使用技巧&quot;&gt;&lt;/a&gt;tcpdump使用技巧&lt;/h1&gt;&lt;p&gt;1.监视指定网络接口的数据包&lt;/p&gt;
&lt;p&gt;   [root@www
      
    
    </summary>
    
      <category term="linux" scheme="https://dilidonglong.github.io/categories/linux/"/>
    
    
  </entry>
  
  <entry>
    <title>wireshark技巧</title>
    <link href="https://dilidonglong.github.io/2019/04/30/wireshark%E6%8A%80%E5%B7%A7/"/>
    <id>https://dilidonglong.github.io/2019/04/30/wireshark技巧/</id>
    <published>2019-04-30T15:40:03.000Z</published>
    <updated>2019-04-30T15:42:53.623Z</updated>
    
    <content type="html"><![CDATA[<h1 id="wireshark技巧"><a href="#wireshark技巧" class="headerlink" title="wireshark技巧"></a>wireshark技巧</h1><blockquote><p>资料来源：</p><p><a href="https://community.emc.com/go/chinese" target="_blank" rel="noopener">1.EMC中文支持论坛</a></p><p><a href="https://www.dell.com/community/%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8%E8%AE%A8%E8%AE%BA%E5%8C%BA/%E5%A6%82%E6%9E%9C%E7%9C%8B%E4%BA%86%E8%BF%99%E4%B8%AA%E4%BD%A0%E8%BF%98%E6%98%AF%E4%B8%8D%E4%BC%9A%E7%94%A8Wireshark-%E9%82%A3%E5%B0%B1%E6%9D%A5%E6%89%BE%E6%88%91%E5%90%A7-8%E6%9C%886%E6%97%A5%E5%AE%8C%E7%BB%93/td-p/7007033/page/5" target="_blank" rel="noopener">2.如果看了这个你还是不会用Wireshark-那就来找我吧-8月6日完结</a></p><p><a href="http://linux.51yip.com/search/tcpdump" target="_blank" rel="noopener">3.Linux命令手册-tcpdump</a></p><p><a href="https://chegva.com/3019.html" target="_blank" rel="noopener">4.Linux上使用wireshark(tshark)抓包分析</a></p><p><a href="https://chegva.com/2473.html" target="_blank" rel="noopener">5.tcpdump使用技巧</a></p></blockquote><h2 id="1-抓包前设置过滤条件（捕捉过滤器）"><a href="#1-抓包前设置过滤条件（捕捉过滤器）" class="headerlink" title="1.抓包前设置过滤条件（捕捉过滤器）"></a>1.抓包前设置过滤条件（捕捉过滤器）</h2><p><strong>尽量避免使用抓包过滤。即便多看几个报文，也比漏看一个报文要好。</strong>当你抓取了大量报文的时候，用显示过滤（过滤选项也更多）来重点查看某一数据流。</p><h3 id="1-1-抓取指定IP地址的数据流："><a href="#1-1-抓取指定IP地址的数据流：" class="headerlink" title="1.1 抓取指定IP地址的数据流："></a>1.1 抓取指定IP地址的数据流：</h3><ol><li>host 10.3.1.1：抓取发到/来自10.3.1.1的数据流</li><li>host 2406:da00:ff00::6b16:f02d：抓取发到/来自IPv6地址2406:da00:ff00::6b16:f02d的数据流</li><li>not host 10.3.1.1：抓取除了发到/来自10.3.1.1以外的所有数据流</li><li>src host 10.3.1.1：抓取来自10.3.1.1的数据流</li><li>dst host 10.3.1.1：抓取发到10.3.1.1的数据流</li><li>host 10.3.1.1 or 10.3.1.2：抓取发到/来自10.3.1.1，以及与之通讯的所有数据流，与10.3.1.2，以及与之通讯的所有数据流</li><li>host <a href="http://www.espn.com：抓取发到/来自所有解析为www.espn.com的IP地址的数据流" target="_blank" rel="noopener">www.espn.com：抓取发到/来自所有解析为www.espn.com的IP地址的数据流</a></li></ol><h3 id="1-2-抓取指定IP地址范围的数据流"><a href="#1-2-抓取指定IP地址范围的数据流" class="headerlink" title="1.2 抓取指定IP地址范围的数据流:"></a>1.2 抓取指定IP地址范围的数据流:</h3><ol><li>net 10.3.0.0/16：抓取网络10.3.0.0上发到/来自所有主机的数据流(16表示长度)</li><li>net 10.3.0.0 mask 255.255.0.0：与之前的过滤结果相同</li><li>ip6 net 2406:da00:ff00::/64：抓取网络2406:da00:ff00:0000(IPv6)上发到/来自所有主机的数据流</li><li>not dst net 10.3.0.0/16：抓取除了发到以10.3开头的IP地址以外的所有数据流</li><li>not src net 10.3.0.0/16：抓取除了来自以10.3开头的IP地址以外的所有数据流</li><li>ip proto &lt; protocol code &gt;：抓取ip协议字段等于&lt; protocol code &gt;值的报文。如TCP(code 6), UDP(code 17), ICMP(code 1)。</li><li>ip[2:2]==&lt; number &gt;：ip报文大小</li><li>ip[8]==&lt; number &gt;：TTL(Time to Live)值</li><li>ip[9]==&lt; number &gt;：协议值</li><li>icmp[icmptype]==&lt; identifier &gt;: 抓取 ICMP代码等于identifier的ICMP报文, 如icmp-echo 以及 icmp-request。</li></ol><p>方括号中第一个数字表示从<u><strong>协议头</strong></u>开始的偏移量，第二个数字表示需要观察多少位。</p><p><img src="/2019/04/30/wireshark技巧/1.png" alt="image004.png"></p><h3 id="1-3-抓取发到广播或多播地址的数据流"><a href="#1-3-抓取发到广播或多播地址的数据流" class="headerlink" title="1.3 抓取发到广播或多播地址的数据流:"></a>1.3 抓取发到广播或多播地址的数据流:</h3><p>只需侦听广播或多播数据流，就可以掌握网络上主机的许多信息。</p><ol><li>ip broadcast：抓取广播报文</li><li>ip multicast：抓取多播报文</li><li>dst host ff02::1：抓取到IPv6多播地址所有主机的数据流</li><li>dst host ff02::2：抓取到IPv6多播地址所有路由器的数据流</li></ol><h3 id="1-4-抓取基于MAC地址的数据流"><a href="#1-4-抓取基于MAC地址的数据流" class="headerlink" title="1.4 抓取基于MAC地址的数据流:"></a>1.4 抓取基于MAC地址的数据流:</h3><p>当你需要抓取发到/来自某一主机的IPv4或IPv6数据流，可创建基于主机MAC地址的抓包过滤条件。</p><p>应用MAC地址时，需确保与目标主机处于同一网段。</p><ol><li>ether host 00:08:15:00:08:15：抓取发到/来自00:08:15:00:08:15的数据流</li><li>ether src 02:0A:42:23:41:AC：抓取来自02:0A:42:23:41:AC的数据流</li><li>ether dst 02:0A:42:23:41:AC：抓取发到02:0A:42:23:41:AC的数据流</li><li>not ether host 00:08:15:00:08:15：抓取除了发到/来自00:08:15:00:08:15以外的所有数据流</li><li>ether broadcast或ether dst ff:ff:ff:ff:ff:ff：抓取广播报文</li><li>ether multicast：多播报文</li><li>抓取指定以太网类型的报文：ether proto 0800</li><li>抓取指定VLAN：vlan &lt; vlan number &gt;</li><li>抓取指定几个VLAN：vlan &lt; vlan number &gt; and vlan &lt; vlan number &gt;</li></ol><h3 id="1-5-抓取基于指定应用的数据流"><a href="#1-5-抓取基于指定应用的数据流" class="headerlink" title="1.5 抓取基于指定应用的数据流:"></a>1.5 抓取基于指定应用的数据流:</h3><p>你可能需要查看基于一个或几个应用的数据流。抓包过滤器语法无法识别应用名，因此需要根据端口号来定义应用。通过目标应用的TCP或UDP端口号，将不相关的报文过滤掉。</p><ol><li>port 53：抓取发到/来自端口53的UDP/TCP数据流（典型是DNS数据流）</li><li>not port 53：抓取除了发到/来自端口53以外的UDP/TCP数据流</li><li>port 80：抓取发到/来自端口80的UDP/TCP数据流（典型是HTTP数据流）</li><li>udp port 67：抓取发到/来自端口67的UDP数据流（典型是DHCP据流）</li><li>tcp port 21：抓取发到/来自端口21的TCP数据流（典型是FTP命令通道）</li><li>portrange 1-80：抓取发到/来自端口1-80的所有UDP/TCP数据流</li><li>tcp portrange 1-80：抓取发到/来自端口1-80的所有TCP数据流</li></ol><h3 id="1-6-抓取结合端口的数据流"><a href="#1-6-抓取结合端口的数据流" class="headerlink" title="1.6 抓取结合端口的数据流:"></a>1.6 抓取结合端口的数据流:</h3><p>当你需要抓取多个不连续端口号的数据流，将它们通过逻辑符号连接起来，如下图所示：</p><ol><li>port 20 or port 21：抓取发到/来自端口20或21的UDP/TCP数据流（典型是FTP数据和命令端口）</li><li>host 10.3.1.1 and port 80：抓取发到/来自10.3.1.1端口80的数据流</li><li>host 10.3.1.1 and not port 80：抓取发到/来自10.3.1.1除了端口80以外的数据流</li><li>udp src port 68 and udp dst port 67：抓取从端口68到端口67的所有UDP数据流（典型是从DHCP客户端到DHCP服务器）</li><li>udp src port 67 and udp dst port 68：抓取从端口67到端口68的所有UDP数据流（典型是从DHCP服务器到DHCP客户端）</li><li>抓取TCP连接的开始（SYN）和结束（FIN）报文，配置tcp[tcpflags] &amp; (tcp-syn|tcp-fin)!=0</li><li>抓取所有RST(Reset)标志位为1的TCP报文，配置tcp[tcpflags] &amp; (tcp-rst)!=0</li><li>less &lt; length &gt;：抓取小于等于某一长度的报文，等同于len &lt;=&lt; length &gt;</li><li>greater &lt; length &gt;：抓取大于等于某一长度的报文，等同于len &gt;=&lt; length &gt;</li></ol><p>SYN: 建立连接的信号</p><p>FIN: 关闭连接的信号</p><p>ACK: 确认接收数据的信号</p><p>RST: 立即关闭连接的信号</p><p>PSH: 推信号，尽快将数据转由应用处理</p><ul><li>tcp[13] &amp; 0x00 = 0: No flags set (null scan)</li><li>tcp[13] &amp; 0x01 = 1: FIN set and ACK not set</li><li>tcp[13] &amp; 0x03 = 3: SYN set and FIN set</li><li>tcp[13] &amp; 0x05 = 5: RST set and FIN set</li><li>tcp[13] &amp; 0x06 = 6: SYN set and RST set</li><li>tcp[13] &amp; 0x08 = 8: PSH set and ACK not set</li><li>tcp[13]是从<u><strong>协议头</strong></u>开始的偏移量，0,1,3,5,6,8是标识位。</li></ul><p><img src="/2019/04/30/wireshark技巧/2.png" alt="image005.png"></p><hr><h2 id="2-抓包后设置过滤条件（显示过滤器）"><a href="#2-抓包后设置过滤条件（显示过滤器）" class="headerlink" title="2.抓包后设置过滤条件（显示过滤器）"></a>2.抓包后设置过滤条件（显示过滤器）</h2><h3 id="2-1-协议过滤器"><a href="#2-1-协议过滤器" class="headerlink" title="2.1 协议过滤器"></a>2.1 协议过滤器</h3><ol><li>arp：显示所有包括ARP请求和回复在内的所有ARP数据流。</li><li>ip：显示内含IPv4头在内的（如ICMP目的地址不可达报文，在ICMP报文头之后返回到来方向的IPv4头）IP数据流。</li><li>ipv6：显示所有IPv6数据流，包括内含IPv6报文头的IPv4报文，如6to4，Teredo，以及ISATAP数据流。</li><li>tcp：显示所有基于TCP的数据流。</li></ol><h3 id="2-2-应用过滤器"><a href="#2-2-应用过滤器" class="headerlink" title="2.2 应用过滤器"></a>2.2 应用过滤器</h3><ol><li>bootp：显示所有DHCP数据流（基于BOOTP）。</li><li>dns：显示包括TCP区域传输以及基于标准UDP的DNS请求和回复在内的所有DNS数据流。</li><li>tftp：显示所有TFTP（Trivial File Transfer Protocol）数据流。</li><li>http：显示所有HTTP命令，回复以及数据传输报文，但不显示TCP握手报文，TCP ACK报文以及TCP结束报文。</li><li>icmp：显示所有ICMP报文。</li></ol><h3 id="2-3-字符过滤器"><a href="#2-3-字符过滤器" class="headerlink" title="2.3 字符过滤器"></a>2.3 字符过滤器</h3><ol><li>tcp.analysis.flags：显示所有包含TCP分析标识的所有报文，包括报文丢失，重传，或零窗口标识。</li><li>tcp.analysis.zero_window：显示含有表明发送方的接收缓存用完标识的报文。</li></ol><h3 id="2-4-域过滤器"><a href="#2-4-域过滤器" class="headerlink" title="2.4 域过滤器"></a>2.4 域过滤器</h3><ol><li>boot.option.hostname：显示所有包含主机名的DHCP数据流（DHCP基于BOOTP）。</li><li>http:host：显示所有包含HTTP主机名字段的所有HTTP报文。此报文是客户端向网络服务器发送请求时发出的。</li><li>ftp.request.command：显示所有包含命令的FTP数据流，比如USER，PASS，或RETR命令。</li></ol><h3 id="2-5-显示过滤器的比较运算符"><a href="#2-5-显示过滤器的比较运算符" class="headerlink" title="2.5 显示过滤器的比较运算符"></a>2.5 显示过滤器的比较运算符</h3><ol><li><p>==或eq</p><p>例如：ip.src == 10.2.2.2</p><p>显示所有源地址为10.2.2.2的IPv4数据流</p></li><li><p>！=或ne</p><p>例如：tcp.srcport != 80</p><p>显示源端口除了80以外的所有TCP数据流</p></li><li><p>gt 或 &gt;</p><p>例如：frame.time_relative &gt; 1</p><p>显示距前一个报文到达时间相差1秒的报文</p></li><li><p>&lt;或lt</p><p>例如：tcp.window_size &lt; 1460</p><p>显示当TCP接收窗口小于1460字节时的报文</p></li><li><p>ge 或 &gt;=</p><p>例如：dns.count.answers &gt;= 10</p><p>显示包含10个以上answer的DNS响应报文</p></li><li><p>&lt;=或le</p><p>例如：ip.ttl &lt;= 10</p><p>显示IP报文中Time to Live字段小于等于10的报文</p></li><li><p>contains</p><p>例如：http contains “GET”</p><p>显示所有HTTP客户端发送给HTTP服务器的GET请求</p></li></ol><p>对于基于TCP应用的过滤条件采用比较运算符。例如，如果想看端口80上面的HTTP数据流，使用HTTP.port==80。</p><p>小贴士：</p><p>运算符两边不用留空格。ip.src == 10.2.2.2与ip.src==10.2.2.2的效果是相同的。</p><h3 id="2-6-举例应用"><a href="#2-6-举例应用" class="headerlink" title="2.6 举例应用"></a>2.6 举例应用</h3><h4 id="2-6-1-按照某一IP地址或主机过滤报文："><a href="#2-6-1-按照某一IP地址或主机过滤报文：" class="headerlink" title="2.6.1 按照某一IP地址或主机过滤报文："></a>2.6.1 按照某一IP地址或主机过滤报文：</h4><ul><li><p>例如：ip.addr==10.3.1.1</p><p>显示在IP源地址字段或IP目的地址字段包含10.3.1.1的帧。</p><hr></li><li><p>例如：！ip.addr==10.3.1.1</p><p>显示除了在IP源地址字段或IP目的地址字段包含10.3.1.1以外的帧。</p><hr></li><li><p>例如：ipv6.addr==2406:da00:ff00::6b16:f02d</p><p>显示以2406:da00:ff00::6b16:f02d为源地址或目的地址的帧。</p><hr></li><li><p>例如：ip.src==10.3.1.1</p><p>显示所有来自10.3.1.1的数据流。</p><hr></li><li><p>例如：ip.dst==10.3.1.1</p><p>显示所有发往10.3.1.1的数据流</p><hr></li><li><p>例如：ip.host==<a href="http://www.wireshark.org" target="_blank" rel="noopener">www.wireshark.org</a></p><p>显示所有解析为<a href="http://www.wireshark.org的IP" target="_blank" rel="noopener">www.wireshark.org的IP</a></p><hr></li></ul><h4 id="2-6-2-按照某一IP地址范围过滤报文："><a href="#2-6-2-按照某一IP地址范围过滤报文：" class="headerlink" title="2.6.2 按照某一IP地址范围过滤报文："></a>2.6.2 按照某一IP地址范围过滤报文：</h4><p>可以使用&gt;或&lt;比较运算符或逻辑运算符&amp;&amp;查找某一地址范围内的报文。</p><ul><li><p>例如：ip.addr&gt;10.3.0.1&amp;&amp;ip.addr&lt;10.3.0.5</p><p>显示来自或发往10.3.0.2，10.3.0.3，10.3.0.4的数据流。</p><hr></li><li><p>例如：(ip.addr&gt;=10.3.0.1&amp;&amp;ip.addr&lt;=10.3.0.6)&amp;&amp;!ip.addr==10.3.0.3</p><p>显示来自或发往10.3.0.1，10.3.0.2，10.3.0.4，10.3.0.5，10.3.0.6的数据流，10.3.0.3排除在外。</p><hr></li><li><p>例如：ipv6.addr&gt;=fe80::&amp;&amp;ipv6.addr&lt;fec0::</p><p>显示IPv6地址从0xfe80到0xfec0开头的数据流。</p><hr></li></ul><h4 id="2-6-3-按照某一IP子网过滤报文："><a href="#2-6-3-按照某一IP子网过滤报文：" class="headerlink" title="2.6.3 按照某一IP子网过滤报文："></a>2.6.3 按照某一IP子网过滤报文：</h4><p>可以通过ip.addr字段名定义一个子网。这种格式使用IP地址后跟斜杠以及一个后缀，表明IP地址中定义的网络部分的比特数。</p><ul><li><p>例如：ip.addr==10.3.0.0/16</p><p>显示在IP源地址或目的地址字段以10.3开头的数据流。</p><hr></li><li><p>例如：ip.addr == 10.3.0.0/16 &amp;&amp; ！ip.addr==10.3.1.1</p><p>显示除了10.3.1.1以外，在IP源地址或目的地址字段以10.3开头的数据流。</p><hr></li><li><p>例如：!ip.addr == 10.3.0.0/16 &amp;&amp; !ip.addr==10.2.0.0/16</p><p>显示所有数据流，除了在IP源地址或目的地址字段以10.3和10.2开头的数据流</p><hr></li></ul><blockquote><p>注意：</p><p>错误的用法导致不work：</p><hr><p>错误：ip.addr != 10.2.2.2</p><p>显示在IP源地址或IP目的地址不包含10.2.2.2的报文。只要在源或目的IP地址不为10.2.2.2，报文就会被显示出来。这时隐含的或会导致实际上并未过滤任何报文。</p><p>正确：！ip.addr == 10.2.2.2</p><p>显示IP源地址和IP目的地址都不包含10.2.2.2的报文。</p><hr><p>错误：!tcp.flags.syn==1</p><p>显示所有不含TCP SYN bit设置为1的报文。其他协议报文，必须UDP和ARP报文也符合这一过滤条件，因为它们的TCP SYN bit没有设置为1。</p><p>正确：tcp.flags.syn！=1</p><p>只显示包含SYN设置为0的TCP报文。</p><hr></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;wireshark技巧&quot;&gt;&lt;a href=&quot;#wireshark技巧&quot; class=&quot;headerlink&quot; title=&quot;wireshark技巧&quot;&gt;&lt;/a&gt;wireshark技巧&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;资料来源：&lt;/p&gt;
&lt;p&gt;&lt;a href=
      
    
    </summary>
    
      <category term="小技巧" scheme="https://dilidonglong.github.io/categories/%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    
    
  </entry>
  
  <entry>
    <title>文件系统的简单操作</title>
    <link href="https://dilidonglong.github.io/2019/04/30/%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E7%9A%84%E7%AE%80%E5%8D%95%E6%93%8D%E4%BD%9C/"/>
    <id>https://dilidonglong.github.io/2019/04/30/文件系统的简单操作/</id>
    <published>2019-04-30T15:34:18.000Z</published>
    <updated>2019-04-30T15:34:45.560Z</updated>
    
    <content type="html"><![CDATA[<h1 id="文件系统的简单操作"><a href="#文件系统的简单操作" class="headerlink" title="文件系统的简单操作"></a>文件系统的简单操作</h1><h2 id="1-df和du命令"><a href="#1-df和du命令" class="headerlink" title="1.df和du命令"></a>1.df和du命令</h2><h3 id="df"><a href="#df" class="headerlink" title="df"></a>df</h3><p>列出文件系统的整体磁盘使用量，df读取的数据几乎针对一整个文件系统，因为读取范围是<strong>超级区块</strong>内的信息。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">[root@vultr ~]<span class="comment"># df</span></span><br><span class="line">Filesystem     1K-blocks    Used Available Use% Mounted on</span><br><span class="line">devtmpfs          214728       0    214728   0% /dev</span><br><span class="line">tmpfs             246392       0    246392   0% /dev/shm</span><br><span class="line">/dev/vda1       10291200 2231176   7519412  23% /</span><br><span class="line"><span class="comment"># Filesystem表示文件系统在哪个磁盘分区</span></span><br><span class="line"><span class="comment"># 1K-blocks表示单位为1k，可以利用-h来变成人们易于理解的单位格式</span></span><br><span class="line"><span class="comment"># Mounted on表示挂载点</span></span><br><span class="line">--------------------------------------------------------------</span><br><span class="line">[root@vultr ~]<span class="comment"># df -h</span></span><br><span class="line">Filesystem      Size  Used Avail Use% Mounted on</span><br><span class="line">devtmpfs        210M     0  210M   0% /dev</span><br><span class="line">tmpfs           241M     0  241M   0% /sys/fs/cgroup</span><br><span class="line">/dev/vda1       9.9G  2.2G  7.2G  23% /</span><br><span class="line">--------------------------------------------------------------</span><br><span class="line">[root@vultr ~]<span class="comment"># df -Th</span></span><br><span class="line">Filesystem     Type      Size  Used Avail Use% Mounted on</span><br><span class="line">devtmpfs       devtmpfs  210M     0  210M   0% /dev</span><br><span class="line">tmpfs          tmpfs     241M     0  241M   0% /sys/fs/cgroup</span><br><span class="line">/dev/vda1      ext4      9.9G  2.2G  7.2G  23% /</span><br><span class="line"><span class="comment"># Type表示文件系统类型</span></span><br></pre></td></tr></table></figure><h3 id="du"><a href="#du" class="headerlink" title="du"></a>du</h3><p>du不同于df，du会在整个文件系统内去<strong>查找所有的文件数据</strong></p><h2 id="2-硬件链接和软链接（符号链接）"><a href="#2-硬件链接和软链接（符号链接）" class="headerlink" title="2.硬件链接和软链接（符号链接）"></a>2.硬件链接和软链接（符号链接）</h2><h3 id="2-1硬件链接"><a href="#2-1硬件链接" class="headerlink" title="2.1硬件链接"></a>2.1硬件链接</h3><p>目录的数据区块下新增一条文件名链接到某个inode号码的<strong>关联记录</strong>。即多个文件名对应到同一个inode号码。</p><p>硬链接的限制：1.不能跨文件系统。2.不能连接目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@vultr tmp]<span class="comment"># ll -i</span></span><br><span class="line">total 4</span><br><span class="line"> 11618 -rw-r--r-- 1 root root    0 Apr 18 06:16 <span class="built_in">test</span></span><br><span class="line">[root@vultr tmp]<span class="comment"># </span></span><br><span class="line">[root@vultr tmp]<span class="comment"># ln test zhang</span></span><br><span class="line">[root@vultr tmp]<span class="comment"># ll -i</span></span><br><span class="line">total 4</span><br><span class="line"> 11618 -rw-r--r-- 2 root root    0 Apr 18 06:16 <span class="built_in">test</span></span><br><span class="line"> 11618 -rw-r--r-- 2 root root    0 Apr 18 06:16 zhang</span><br></pre></td></tr></table></figure><h3 id="2-2符号链接"><a href="#2-2符号链接" class="headerlink" title="2.2符号链接"></a>2.2符号链接</h3><p>符号链接就是建立一个独立的<strong>文件</strong>，而这个文件会让数据的读取指向它连接的那个文件的文件名</p><p>当源文件被删除后，符号链接的文件就会打不开。类似于是Windows下的快捷方式</p><p>需要注意的是，通过符号链接进入到了某个目录或是打开了某个文件。操作的对象实际上还是原始文件。所以你在符号链接里面打开了东西，进行了操作，那原始文件也会发生改变。如果你在符号链接里面把内容删除了，相当于原始文件的实际内容也删除了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@vultr tmp]<span class="comment"># ln -s test zhangshuaiyang            加上-s就是符号链接，不加是硬链接</span></span><br><span class="line">[root@vultr tmp]<span class="comment"># ll -i</span></span><br><span class="line">total 4</span><br><span class="line"> 11618 -rw-r--r-- 2 root root    0 Apr 18 06:16 <span class="built_in">test</span></span><br><span class="line"> 11618 -rw-r--r-- 2 root root    0 Apr 18 06:16 zhang</span><br><span class="line"> 23193 lrwxrwxrwx 1 root root    4 Apr 18 06:43 zhangshuaiyang -&gt; <span class="built_in">test</span></span><br></pre></td></tr></table></figure><h2 id="3-磁盘分区、格式化、检验及挂载"><a href="#3-磁盘分区、格式化、检验及挂载" class="headerlink" title="3.磁盘分区、格式化、检验及挂载"></a>3.磁盘分区、格式化、检验及挂载</h2><p>如果想在系统里面新增一块硬盘，操作过程如下：</p><ol><li>对磁盘进行划分，进行磁盘分区</li><li>对分区进行格式化，以建立文件系统</li><li>对文件系统进行检验（可选）</li><li>在linux系统上，建立一个挂载点（目录），把该文件系统挂载上来</li></ol><h3 id="3-1查看磁盘分区状态"><a href="#3-1查看磁盘分区状态" class="headerlink" title="3.1查看磁盘分区状态"></a>3.1查看磁盘分区状态</h3><p><strong>lsblk</strong>（list block device）显示出所有存储设备</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[root@vultr tmp]<span class="comment"># lsblk</span></span><br><span class="line">NAME   MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT</span><br><span class="line">sr0     11:0    1 1024M  0 rom  </span><br><span class="line">vda    253:0    0   10G  0 disk </span><br><span class="line">└─vda1 253:1    0   10G  0 part /</span><br><span class="line"><span class="comment">#name表示设备文件名，会省略/dev等前面的目录；disk表示一整块磁盘；part表示分区</span></span><br><span class="line"><span class="comment">#在vda这个磁盘下，有一个分区vda1</span></span><br><span class="line">----------------------------------------------------------</span><br><span class="line">[root@vultr tmp]<span class="comment"># lsblk -ipf                 通过-f选项可以列出UUID</span></span><br><span class="line">NAME        FSTYPE LABEL UUID                                 MOUNTPOINT</span><br><span class="line">/dev/sr0                                                      </span><br><span class="line">/dev/vda                                                      </span><br><span class="line">`-/dev/vda1 ext4         19c82273-828c-4d85-bc4e-6fc269acc524 /</span><br><span class="line">-----------------------------------------------------------</span><br><span class="line">[root@vultr tmp]<span class="comment"># blkid                       通过blkid也可以显示出UUID</span></span><br><span class="line">/dev/vda1: UUID=<span class="string">"19c82273-828c-4d85-bc4e-6fc269acc524"</span> TYPE=<span class="string">"ext4"</span></span><br></pre></td></tr></table></figure><p><strong>parted</strong>列出磁盘的分区表类型及分区信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@vultr tmp]<span class="comment"># parted /dev/vda print</span></span><br><span class="line">Model: Virtio Block Device (virtblk)</span><br><span class="line">Disk /dev/vda: 10.7GB</span><br><span class="line">Sector size (logical/physical): 512B/512B</span><br><span class="line">Partition Table: msdos                     <span class="comment">#分区表格式，比如MBR/GPT，这里显示的是msdos</span></span><br><span class="line">Disk Flags: </span><br><span class="line">   <span class="comment">#下面内容是分区数据</span></span><br><span class="line">Number  Start   End     Size    Type     File system  Flags</span><br><span class="line"> 1      1049kB  10.7GB  10.7GB  primary  ext4         boot</span><br></pre></td></tr></table></figure><h3 id="3-2磁盘分区"><a href="#3-2磁盘分区" class="headerlink" title="3.2磁盘分区"></a>3.2磁盘分区</h3><p>MBR分区表使用fdisk工具进行，GPT分区表使用gdisk工具进行。</p><h3 id="3-3磁盘格式化"><a href="#3-3磁盘格式化" class="headerlink" title="3.3磁盘格式化"></a>3.3磁盘格式化</h3><p>所谓格式化，其实是指在分区上创建文件系统。使用的命令是mkfs（make filesystem）</p><p>如果我们要创建的文件系统是xfs。那么命令的写法就是mkfs.xfs。例如<code>mkfs.xfs /dev/vda4</code>，表示在/dev/vda4这个分区上建立一个xfs文件系统。</p><p>如果是创建ext4文件系统。则命令写法是mkfs.ext4。只是xfs的文件系统建立起来速度更快。</p><p>想知道能创建哪些文件系统。只要再命令行中输入<code>mkfs[tab][tab]</code>，就能看到了。</p><h3 id="3-4文件系统的挂载"><a href="#3-4文件系统的挂载" class="headerlink" title="3.4文件系统的挂载"></a>3.4文件系统的挂载</h3><p>注意点：</p><ol><li>单一文件系统不要被重复挂载到不同的挂载点中</li><li>单一目录不要重复挂载多个文件系统</li><li>作为挂载点的目录，最好是空目录</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@vultr tmp]<span class="comment"># blkid                       </span></span><br><span class="line">/dev/vda1: UUID=<span class="string">"19c82273-828c-4d85-bc4e-6fc269acc524"</span> TYPE=<span class="string">"ext4"</span> </span><br><span class="line"></span><br><span class="line">[root@vultr tmp]<span class="comment"># mount UUID="19c82273-828c-4d85-bc4e-6fc269acc524" /data/ext4</span></span><br><span class="line">其中UUID表示文件系统的ID。/data/ext4表示挂载点。也就是说把这个文件系统挂载在/data/ext4目录下。</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;文件系统的简单操作&quot;&gt;&lt;a href=&quot;#文件系统的简单操作&quot; class=&quot;headerlink&quot; title=&quot;文件系统的简单操作&quot;&gt;&lt;/a&gt;文件系统的简单操作&lt;/h1&gt;&lt;h2 id=&quot;1-df和du命令&quot;&gt;&lt;a href=&quot;#1-df和du命令&quot; class
      
    
    </summary>
    
      <category term="linux" scheme="https://dilidonglong.github.io/categories/linux/"/>
    
    
  </entry>
  
  <entry>
    <title>文件系统</title>
    <link href="https://dilidonglong.github.io/2019/04/30/%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/"/>
    <id>https://dilidonglong.github.io/2019/04/30/文件系统/</id>
    <published>2019-04-30T15:33:00.000Z</published>
    <updated>2019-04-30T15:33:54.927Z</updated>
    
    <content type="html"><![CDATA[<h1 id="文件系统"><a href="#文件系统" class="headerlink" title="文件系统"></a>文件系统</h1><p><strong>柱面</strong>通常是<strong>分区</strong>及<strong>文件系统</strong>的最小单位。当然如果使用GPT格式的分区表，最小单位可以为<strong>扇区</strong></p><p>磁盘分区完后，要进行<strong>格式化</strong>，使之成为操作系统能用的<strong>文件系统</strong></p><p>文件（或目录）包含<strong>属性</strong>（比如文件权限，文件属性）及<strong>内容</strong></p><table><thead><tr><th style="text-align:center">权限与属性</th><th style="text-align:center">实际数据</th></tr></thead><tbody><tr><td style="text-align:center">inode表</td><td style="text-align:center">数据区块</td></tr></tbody></table><p>区块有放置<strong>inode表</strong>的区块，有放置<strong>数据</strong>的数据区块，以及记录<strong>整个文件系统整体信息</strong>的超级区块</p><blockquote><p>超级区块：记录inode和数据区块总量、使用量、剩余量及文件系统格式等</p><p>inode：记录文件属性，一个文件占一个inode，同时记录文件对应数据所放置的区块号码</p><p>数据区块：记录实际内容，当一个区块占不下的时候，就会占用多个数据区块</p></blockquote><p><strong>索引式文件系统</strong>，包含了inode。通过inode，我们可以数据存放在哪些数据区块里面，所以可以一次性全部提取出来。该方式性能比较好，比如linux的ext2文件系统</p><p>再比如u盘一般使用FAT文件系统，这种就不是索引式文件系统。它没有inode，所以无法把数据一次性全提取出来。每个区块号码都记录在前一个区块里面，所以提取的时候得一个连着一个提取。</p><p><strong>碎片整理</strong>，在非索引式文件系统里面，由于有时候数据写入的区块太过于分散，所以读取的时候性能会很差，通过磁盘碎片整理，可以把同一个文件的区块集合在一起，这样读取起来就比较容易。</p><h2 id="1-ext2文件系统"><a href="#1-ext2文件系统" class="headerlink" title="1.ext2文件系统"></a>1.ext2文件系统</h2><p>在分区上进行格式化的时候，就已经规划好了<strong>inode</strong>和<strong>数据区块</strong></p><p>把放置inode的区块和数据区块全部都放一起，会导致很难管理</p><p>所以在ext2的文件系统上，会弄出多个<strong>区块群组</strong>，每个区块群组都有自己的<strong>inode</strong>，<strong>数据区块</strong>和<strong>超级区块</strong></p><p>在<strong>文件系统</strong>最前面有个启动扇区，里面可以存放<strong>启动引导程序</strong>。（注：或是想到之前的磁盘分区，分区的第一个扇区用来放MBR，MBR中的446字节来存放启动引导程序）</p><p>这种设计可以把引导启动程序放在<strong>不同文件系统</strong>的最前端，而不必把程序全都放在整个磁盘唯一的MBR下。</p><h3 id="1-1数据区块"><a href="#1-1数据区块" class="headerlink" title="1.1数据区块"></a>1.1数据区块</h3><p>数据区块用来放置文件数据。ext2文件系统支持的区块大小有1k，2k及4k共3种。</p><p>每个区块都有编号，方便inode表记录。</p><p>数据放在数据区块里面，如果数据的大小要小于区块的容量的话，就会造成浪费。</p><h3 id="1-2inode表"><a href="#1-2inode表" class="headerlink" title="1.2inode表"></a>1.2inode表</h3><p>inode表记录如下内容</p><blockquote><ul><li><strong>该文件的读写属性（读、写、执行）</strong></li><li><strong>文件所有者及用户组</strong></li><li>文件大小</li><li>文件建立或状态改变时间</li><li>最近一次读取时间</li><li>最近修改时间</li><li>定义文件特征标识</li><li><strong>文件真正内容指向</strong></li></ul></blockquote><p>inode表的数量和大小在格式化的时候就确定好了</p><blockquote><ul><li>每个inode表大小为128B（其中4B来记录一个数据区块的位置编号，一共能记录12个）</li><li>每个文件仅占用一个inode表</li><li>文件系统能建立的文件数量和inode数量有关</li><li>系统读取文件先找到inode表，分析文件记录用户及权限是否符合，如果符合最后才去找数据区块读取</li></ul></blockquote><h3 id="1-3超级区块"><a href="#1-3超级区块" class="headerlink" title="1.3超级区块"></a>1.3超级区块</h3><p>没有超级区块，就没有文件系统，它记录整个文件系统相关信息。</p><blockquote><ul><li>数据区块与inode的总量</li><li>未使用与已经使用的inode与数据区块的数量</li><li>数据区块与inode的大小</li><li>文件系统的挂载时间、最近一次写入数据时间等文件系统相关信息</li><li>一个有效位数值，文件系统被挂载，则有效位为0，未被挂载则为1</li></ul></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 显示目前系统被格式化的设备</span></span><br><span class="line">[root@vultr ~]<span class="comment"># blkid</span></span><br><span class="line">/dev/vda1: UUID=<span class="string">"19c82273-828c-4d85-bc4e-6fc269acc524"</span> TYPE=<span class="string">"ext4"</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">[root@vultr ~]<span class="comment"># dumpe2fs /dev/vda1</span></span><br><span class="line">dumpe2fs 1.42.9 (28-Dec-2013)</span><br><span class="line">Filesystem volume name:   &lt;none&gt;</span><br><span class="line">Last mounted on:          /</span><br><span class="line">Filesystem UUID:          19c82273-828c-4d85-bc4e-6fc269acc524</span><br><span class="line">Filesystem magic number:  0xEF53</span><br><span class="line">Filesystem revision <span class="comment">#:    1 (dynamic)</span></span><br><span class="line">Filesystem features:      has_journal ext_attr resize_inode dir_index filetype needs_recovery extent 64bit flex_bg sparse_super large_file huge_file uninit_bg dir_nlink extra_isize</span><br><span class="line">Filesystem flags:         signed_directory_hash </span><br><span class="line">Default mount options:    user_xattr acl</span><br><span class="line">Filesystem state:         clean                    <span class="comment">#文件系统状态，clean表示没问题</span></span><br><span class="line">Errors behavior:          Continue</span><br><span class="line">Filesystem OS <span class="built_in">type</span>:       Linux</span><br><span class="line">Inode count:              640000                   <span class="comment">#inode总数</span></span><br><span class="line">Block count:              2621179                  <span class="comment">#区块总数</span></span><br><span class="line">Reserved block count:     131057                   <span class="comment">#保留的区块总数</span></span><br><span class="line">Free blocks:              2026205                  <span class="comment">#还有多少可用区块</span></span><br><span class="line">Free inodes:              599345                   <span class="comment">#还有多少可用inode</span></span><br><span class="line">First block:              0</span><br><span class="line">Block size:               4096                     <span class="comment">#单个区块大小</span></span><br><span class="line">Fragment size:            4096</span><br><span class="line">Group descriptor size:    64</span><br><span class="line">Reserved GDT blocks:      248</span><br><span class="line">Blocks per group:         32768</span><br><span class="line">Fragments per group:      32768</span><br><span class="line">Inodes per group:         8000</span><br><span class="line">Inode blocks per group:   500</span><br><span class="line">Flex block group size:    16</span><br><span class="line">Filesystem created:       Wed Dec  5 17:22:49 2018</span><br><span class="line">Last mount time:          Wed Apr 10 10:10:48 2019</span><br><span class="line">Last write time:          Wed Apr 10 10:10:46 2019</span><br><span class="line">Mount count:              4</span><br><span class="line">Maximum mount count:      -1</span><br><span class="line">Last checked:             Sat Mar  9 02:38:28 2019</span><br><span class="line">Check interval:           0 (&lt;none&gt;)</span><br><span class="line">Lifetime writes:          3452 MB</span><br><span class="line">Reserved blocks uid:      0 (user root)</span><br><span class="line">Reserved blocks gid:      0 (group root)</span><br><span class="line">First inode:              11</span><br><span class="line">Inode size:          256                           <span class="comment">#inode表大小</span></span><br><span class="line">Required extra isize:     28</span><br><span class="line">Desired extra isize:      28</span><br><span class="line">Journal inode:            8</span><br><span class="line">Default directory <span class="built_in">hash</span>:   half_md4</span><br><span class="line">Directory Hash Seed:      6cbf0c8a-63c4-43df-aaba-cd82ae9cb153</span><br><span class="line">Journal backup:           inode blocks</span><br><span class="line">Journal features:         journal_incompat_revoke journal_64bit</span><br><span class="line">Journal size:             32M</span><br><span class="line">Journal length:           8192</span><br><span class="line">Journal sequence:         0x0004f118</span><br><span class="line">Journal start:            7195</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Group 0: (Blocks 0-32767) [ITABLE_ZEROED]                <span class="comment">#区块组0所占区块号码为0-32767</span></span><br><span class="line">  Checksum 0x6f25, unused inodes 0</span><br><span class="line">  Primary superblock at 0, Group descriptors at 1-2      <span class="comment">#文件系统描述说明在1-2号区块内</span></span><br><span class="line">  Reserved GDT blocks at 3-250</span><br><span class="line">  Block bitmap at 251 (+251), Inode bitmap at 267 (+267) </span><br><span class="line">                                                    <span class="comment">#区块对照表和inode对照表在251和267区块内</span></span><br><span class="line">  Inode table at 283-782 (+283)                     </span><br><span class="line">  <span class="comment">#一个inode表占256B，总共有782-283+1=500个区块，一个区块大小占4KB。所以inode的总数是500*4kB/256B</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">#以下几行记录，记录了可用的区块数，及可用的inode表述。可知，inode表为0了。</span></span><br><span class="line">  19990 free blocks, 0 free inodes, 1728 directories</span><br><span class="line">  Free blocks: 11866, 11890-11922, 11928-11935, 11943-11951, 12249, 12313, 12350, 12832-32767</span><br><span class="line">  Free inodes: </span><br><span class="line">……后续省略……</span><br></pre></td></tr></table></figure><h2 id="2-文件系统与目录树的关系"><a href="#2-文件系统与目录树的关系" class="headerlink" title="2.文件系统与目录树的关系"></a>2.文件系统与目录树的关系</h2><h3 id="2-1目录"><a href="#2-1目录" class="headerlink" title="2.1目录"></a>2.1目录</h3><p>在文件系统上创建一个目录时，文件系统会分配<strong>一个inode</strong>与<strong>至少一块区块</strong>（里面记录了子目录及文件的inode表位置编号）给目录</p><h3 id="2-2文件"><a href="#2-2文件" class="headerlink" title="2.2文件"></a>2.2文件</h3><p>在文件系统上创建一个文件时，文件系统会分配<strong>一个inode</strong>及所需个数的<strong>数据区块</strong>。</p><h3 id="2-3目录树的读取"><a href="#2-3目录树的读取" class="headerlink" title="2.3目录树的读取"></a>2.3目录树的读取</h3><p>文件存放在目录下，所以我们得要先知道该目录所对应的区块。区块里面记录了子目录及文件的inode表号。找到我想要的文件所对应的inode表号，再去找该文件的inode。找到之后就知道该文件放置在哪个区块了。</p><h2 id="3-挂载"><a href="#3-挂载" class="headerlink" title="3.挂载"></a>3.挂载</h2><p>文件系统和目录树结合的操作称为挂载</p><p>挂载点一定是目录，该目录为进入文件系统的入口</p><p>文件系统要挂载在目录树的某个目录后，我们才能使用该文件系统</p><h2 id="4-XFS文件系统"><a href="#4-XFS文件系统" class="headerlink" title="4.XFS文件系统"></a>4.XFS文件系统</h2><p>ext文件系统的支持度虽然广，但是格式化所需要时间长。因为是预先就规划好了inode和区块的位置，所以后续可以直接使用，也就是说并没有使用动态配置的做法</p><p>现在的磁盘越来越大，对于虚拟化磁盘那就更大了。对于巨型文件要考虑性能问题，不然虚拟磁盘的处理效率就会差。</p><p>xfs是一个日志式文件系统，用于高容量磁盘及高性能文件。同时还几乎有ext4文件系统有的功能。此外，inode与区块都是需要时才动态配置产生，不会预分配，所以格式化操作会很快。</p><h3 id="4-1数据区"><a href="#4-1数据区" class="headerlink" title="4.1数据区"></a>4.1数据区</h3><p>包含inode、数据区块、超级区块等数据，类似于之前ext里面的区块群组</p><h3 id="4-2文件系统活动登陆区"><a href="#4-2文件系统活动登陆区" class="headerlink" title="4.2文件系统活动登陆区"></a>4.2文件系统活动登陆区</h3><p>用来记录文件系统的变化，有点像日志区</p><h3 id="4-3实时运行区"><a href="#4-3实时运行区" class="headerlink" title="4.3实时运行区"></a>4.3实时运行区</h3><p>当有文件要被建立时，xfs会在这个区段里找一个到数个的扩展区块，将文件放置在这个区块内，等分配完毕再写入到数据区的inode与区块中。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;文件系统&quot;&gt;&lt;a href=&quot;#文件系统&quot; class=&quot;headerlink&quot; title=&quot;文件系统&quot;&gt;&lt;/a&gt;文件系统&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;柱面&lt;/strong&gt;通常是&lt;strong&gt;分区&lt;/strong&gt;及&lt;strong&gt;文件系统&lt;/strong
      
    
    </summary>
    
      <category term="linux" scheme="https://dilidonglong.github.io/categories/linux/"/>
    
    
  </entry>
  
  <entry>
    <title>磁盘分区</title>
    <link href="https://dilidonglong.github.io/2019/04/30/%E7%A3%81%E7%9B%98%E5%88%86%E5%8C%BA/"/>
    <id>https://dilidonglong.github.io/2019/04/30/磁盘分区/</id>
    <published>2019-04-30T15:32:07.000Z</published>
    <updated>2019-04-30T15:32:35.788Z</updated>
    
    <content type="html"><![CDATA[<h1 id="磁盘分区"><a href="#磁盘分区" class="headerlink" title="磁盘分区"></a>磁盘分区</h1><h2 id="1-磁盘分区"><a href="#1-磁盘分区" class="headerlink" title="1.磁盘分区"></a>1.磁盘分区</h2><p><strong>磁盘</strong>包含：碟片（细分为<strong>扇区</strong>和<strong>磁道</strong>）、机械手臂、磁头、主轴马达</p><p><strong>扇区</strong>大小分为<strong>512B</strong>和<strong>4KB</strong></p><h3 id="1-1第一个扇区（MBR）"><a href="#1-1第一个扇区（MBR）" class="headerlink" title="1.1第一个扇区（MBR）"></a>1.1第一个扇区（MBR）</h3><p><strong>磁盘第一个扇区</strong>存放<strong>启动引导程序</strong>和<strong>磁盘分区表</strong>（格式分为<strong>MBR</strong>[Windows支持]和<strong>GPT</strong>）</p><table><thead><tr><th style="text-align:center">MBR（master boot record）</th><th style="text-align:center">启动引导程序</th><th style="text-align:center">磁盘分区表</th></tr></thead><tbody><tr><td style="text-align:center">主引导记录容量（512B）</td><td style="text-align:center">446B</td><td style="text-align:center">64B</td></tr></tbody></table><p>MBR分区表的限制：</p><blockquote><ol><li>分区最多到2TB</li><li>MBR仅占一个扇区，被破坏后，很难恢复甚至无法恢复</li><li>MBR内的启动引导程序只有446B，无法存储较多的程序代码</li></ol></blockquote><h4 id="1-1-1MBR磁盘分区表"><a href="#1-1-1MBR磁盘分区表" class="headerlink" title="1.1.1MBR磁盘分区表"></a>1.1.1MBR<strong>磁盘分区表</strong></h4><blockquote><ol><li>分区表占64B，给磁盘划分分区，其实就是对这个分区表做设置</li><li>分区表默认最多把一个磁盘分为4个分区</li><li>分区分为<strong>主要分区</strong>和<strong>扩展分区</strong></li><li>要写入数据到磁盘时，会参考这个分区表</li></ol></blockquote><h4 id="1-1-2MBR扩展分区"><a href="#1-1-2MBR扩展分区" class="headerlink" title="1.1.2MBR扩展分区"></a>1.1.2MBR扩展分区</h4><p>由于磁盘分区表的限制，最多给磁盘划分出4个分区。那么我们可以利用额外的扇区来记录更多的分区信息。</p><p>在<strong>扩展分区</strong>的某个地方来记录在扩展分区里面的其他<strong>逻辑分区</strong>信息</p><blockquote><ol><li>扩展分区最多一个</li><li>逻辑分区是在扩展分区里面划分出来的</li><li>能格式化的是主要分区和逻辑分区，扩展分区不能被格式化</li><li>逻辑分区能划分多少个，依据不同操作系统来定</li></ol></blockquote><hr><h3 id="1-2GPT磁盘分区表"><a href="#1-2GPT磁盘分区表" class="headerlink" title="1.2GPT磁盘分区表"></a>1.2GPT磁盘分区表</h3><p>现在的磁盘越来越大，如果使用磁盘阵列等技术，那么在Linux平台下看到的磁盘大小可能就有几十个TB。使用MBR格式，要划分分区时，就要2TB/2TB地划分下去。这就可能划分出好几十个分区，为了解决这个问题，就有了GPT这种磁盘分区的格式。</p><p>以前扇区大小为512B，现在已经有了4KB的扇区。为兼容所有磁盘，会使用到<strong>逻辑区块地址LBA</strong>（logical block address），LBA默认是512B。在GPT这种格式下，将磁盘的所有区块使用LBA来规划。<code>可以理解为，如果一个扇区的容量是512B，然后LBA默认是512B的话，那么一个扇区就是一个区块。如果一个扇区容量是4KB=8*512B，那么一个区块地址就是1/8扇区</code></p><p><strong>第一个LBA</strong>称为<strong>LBA0</strong></p><p><strong>MBR使用第一个扇区来记录，而GPT使用了前34个LBA区块来记录。</strong>由于MBR只有一个区块，破坏就难以恢复。不同于MBR，<strong>GPT中会用磁盘的最后34个LBA做备份</strong>。</p><h4 id="1-2-1LBA0（MBR兼容区块）"><a href="#1-2-1LBA0（MBR兼容区块）" class="headerlink" title="1.2.1LBA0（MBR兼容区块）"></a>1.2.1LBA0（MBR兼容区块）</h4><table><thead><tr><th style="text-align:center">LBA0</th><th style="text-align:center">引导启动程序</th><th style="text-align:center">特殊标志符</th></tr></thead><tbody><tr><td style="text-align:center">逻辑区块地址0</td><td style="text-align:center">446B</td><td style="text-align:center">64B，表示磁盘使用GPT格式</td></tr></tbody></table><h4 id="1-2-2LBA1（GPT表头记录）"><a href="#1-2-2LBA1（GPT表头记录）" class="headerlink" title="1.2.2LBA1（GPT表头记录）"></a>1.2.2LBA1（GPT表头记录）</h4><p>记录磁盘分区表本身的位置和大小，同时记录了备份的GPT分区位置。</p><h4 id="1-2-3LBA2-33（实际记录分区信息处）"><a href="#1-2-3LBA2-33（实际记录分区信息处）" class="headerlink" title="1.2.3LBA2-33（实际记录分区信息处）"></a>1.2.3LBA2-33（实际记录分区信息处）</h4><p><strong>从LBA2区块开始，每个LBA可以记录4组分区记录</strong>。所以一个磁盘在默认情况下，可以划分4*32=128个分区。</p><p>在MBR中，分区表的大小是64B，而在GPT中是512B。</p><p>一个区块记录4组分区，所以在GPT的分区表中，一组分区记录可以占512/4=128B的空间大小。</p><p>在这128B的空间中使用64bit来记录开始和结束的扇区号码</p><p>每个分区的最大容量限制就是：$2^{64}*512B=8ZB$</p><h2 id="2-启动程序"><a href="#2-启动程序" class="headerlink" title="2.启动程序"></a>2.启动程序</h2><p>CMOS是一个嵌入在主板的存储器，存储着各项硬件参数</p><p>BIOS是一个写入到主板的固件（<strong>固件是</strong>写入到硬件上的一个<strong>软件程序</strong>）</p><blockquote><ol><li>计算机系统在启动时，主动执行的第一个程序就是BIOS</li><li>BIOS执行后，会分析计算机里面的存储设备。比如发现了硬盘，BIOS就去找那个能启动的硬盘</li><li>找到该硬盘，就读取第一个扇区的MBR位置，找到那个446B的启动引导程序</li></ol><p>以上BIOS的任务完成，接下来就是启动引导程序干活了</p><ol start="4"><li>启动引导程序的目的是加载内核文件</li></ol><p>加载完后，启动引导程序的活也干完了</p><ol start="5"><li>之后就是内核文件开始工作，再之后就是把任务都交给我们熟悉的操作系统完成</li></ol></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;磁盘分区&quot;&gt;&lt;a href=&quot;#磁盘分区&quot; class=&quot;headerlink&quot; title=&quot;磁盘分区&quot;&gt;&lt;/a&gt;磁盘分区&lt;/h1&gt;&lt;h2 id=&quot;1-磁盘分区&quot;&gt;&lt;a href=&quot;#1-磁盘分区&quot; class=&quot;headerlink&quot; title=&quot;1.磁盘分
      
    
    </summary>
    
      <category term="linux" scheme="https://dilidonglong.github.io/categories/linux/"/>
    
    
  </entry>
  
  <entry>
    <title>软考试题1</title>
    <link href="https://dilidonglong.github.io/2019/04/29/%E8%BD%AF%E8%80%83%E8%AF%95%E9%A2%981/"/>
    <id>https://dilidonglong.github.io/2019/04/29/软考试题1/</id>
    <published>2019-04-29T14:54:48.000Z</published>
    <updated>2019-04-29T15:14:49.194Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>若主机hostA的MAC地址为aa-aa-aa-aa-aa-aa，主机hostB的MAC地址为bb-bb-bb-bb-bb-bb。由hostA发出的查询hostB的MAC地址的帧格式如下图所示，则此帧中的目标MAC地址为（ D ），ARP报文中的目标MAC地址为（ C ）。</p><p><img src="/2019/04/29/软考试题1/1.png" alt="1"></p><p>问题1选项</p><p>A aa-aa-aa-aa-aa-aa</p><p>B bb-bb-bb-bb-bb-bb</p><p>C 00-00-00-00-00-00</p><p>D ff-ff-ff-ff-ff-ff</p><p>问题2选项</p><p>A aa-aa-aa-aa-aa-aa</p><p>B bb-bb-bb-bb-bb-bb</p><p>C 00-00-00-00-00-00</p><p>D ff-ff-ff-ff-ff-ff</p><h2 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h2><ol><li>数据包从上往下层层封装。在wireshark里面是可以看到其封装情况的。</li></ol><p><img src="/2019/04/29/软考试题1/2.png" alt="2"></p><p>上图就是一个arp的数据包。在中间的框中，可以知道arp报文被Ethernet（以太网）头部封装。第一个包指的是arp广播请求包，意思是“谁知道192.168.0.1的mac地址，请告诉192.168.0.114“</p><ol start="2"><li>wireshark数据包中以太网帧头部（Ethernet）包含了destination（目标mac地址），source（源mac地址），type（类型）</li></ol><p><img src="/2019/04/29/软考试题1/3.png" alt="2"></p><p>问题一里面的目的mac指的就是以太网头部里面的mac地址。</p><p>即下图中写的目标mac地址，你能看到正好就是对应wireshark数据包中的destination这段。<img src="/2019/04/29/软考试题1/4.png" alt="2"></p><ol start="3"><li><p>问题二里面，ARP报文中的目标MAC地址，指的就是wireshark数据包中，红框的target mac address。arp报文是被mac头部封装的。</p></li><li><p><strong>sender mac address</strong>表示发送方自己的mac地址；</p><p><strong>sender ip address</strong>表示发送方自己的ip地址；</p><p><strong>target mac address</strong>表示想要知道的对方的mac地址是多少，由于是广播请求，此时并不知道对方mac，所以暂时以全0替代；</p><p><strong>target ip address</strong>表示请求对方的ip地址。</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h2&gt;&lt;p&gt;若主机hostA的MAC地址为aa-aa-aa-aa-aa-aa，主机hostB的MAC地址为bb-bb-bb-bb-bb-bb。由host
      
    
    </summary>
    
      <category term="软考" scheme="https://dilidonglong.github.io/categories/%E8%BD%AF%E8%80%83/"/>
    
    
  </entry>
  
  <entry>
    <title>设置分类列表页</title>
    <link href="https://dilidonglong.github.io/2019/04/27/%E8%AE%BE%E7%BD%AE%E5%88%86%E7%B1%BB%E5%88%97%E8%A1%A8%E9%A1%B5/"/>
    <id>https://dilidonglong.github.io/2019/04/27/设置分类列表页/</id>
    <published>2019-04-27T02:46:42.000Z</published>
    <updated>2019-04-27T03:18:37.689Z</updated>
    
    <content type="html"><![CDATA[<h1 id="设置分类列表页"><a href="#设置分类列表页" class="headerlink" title="设置分类列表页"></a>设置分类列表页</h1><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>最近通过github+hexo(ocean主题)搭建了博客。期间遇到了各种问题，主要还是因为自己不是程序员，有些代码看不懂。</p><p>比如我想，以后如果文章多起来，只有一个归档可不行，最好要有个分类的界面。把文章都整理好，以后也方便自己查东西。</p><p>照着网上的操作：</p><blockquote><ol><li>先生成一个分类的网页，输入命令<code>hexo new page categories</code></li><li>找到对应网页的md文件，在其头部内添加上<code>type: &quot;categories&quot;</code></li><li>最后测试，新建一篇文章，在文章md文件头部上添加<code>categories: 分类的名称</code></li><li>保存</li><li>最后需要在主页上把分类页展现出来。</li><li>找到主题配置文件<code>_config.yml</code>。在<code>meun</code>中加入<code>分类: /categories</code></li><li>保存</li></ol></blockquote><p>上述操作做完之后，查看效果。发现文章里面是有分类的显示</p><p><img src="/2019/04/27/设置分类列表页/1.png" alt="分类显示"></p><p>但是，在主页里面点击分类的连接，进入分类网页，没有任何显示。如下图红框处，最开始是没有任何显示的.</p><p><img src="/2019/04/27/设置分类列表页/2.png" alt="2"></p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>网上查了大量文章，很多都只是说了配置问题，我是按配置正确操作的，但是就是解决不了。</p><p>后来看到一篇文章，猜测出应该是这个ocean主题缺少对应的代码。</p><p>参考链接：<a href="http://chensd.com/2016-06/hexo-theme-guide.html#分类列表页与分类文章列表页" target="_blank" rel="noopener">hexo主题开发指南-分类列表页与分类文章列表页</a></p><blockquote><p>分类列表页显示博客里的所有分类，分类文章列表页显示某个分类中的文章列表。</p><p>Hexo 并没有专门分类列表页的模板，那该如何处理呢？一般是写在页面模板中，即 <code>layout/page.swig</code> 里，然后判断页面类型变量 <code>page.type</code>，如果是 <code>categories</code>，则显示分类列表页。再在博客里创建一个页面，指定其 <code>type</code> 为 <code>categories</code> </p></blockquote><p>ocean主题是用ejs写出来的。而这个链接里面给的是swig的代码。所以估计不能直接用</p><p>定位了问题，接下来就好处理了。由于我暂时还不会写代码，所以只好找答案复制粘贴。</p><p>参考链接：<a href="http://orzcss.com/posts/5a207d64/" target="_blank" rel="noopener">Hexo-创建分类（categories）和标签（tags）首页</a>，给出如下代码</p><blockquote><p>找到 <code>layout/_partial/article.ejs</code> </p><p>然后找到 <code>&lt;div class=&quot;article-entry&quot; itemprop=&quot;articleBody&quot;&gt;</code> 这一行</p><p>这个 div 里面的内容全部替换为：(注：再此处，我没有全部替换，而是补充接在原始文档内容后了)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&gt; &lt;% if (page.type === "tags") &#123; %&gt;</span><br><span class="line">&gt; &lt;div class="tag-cloud"&gt;</span><br><span class="line">&gt; &lt;div class="tag-cloud-title"&gt;</span><br><span class="line">&gt; &lt;%- _p('counter.tag_cloud', site.tags.length) %&gt;</span><br><span class="line">&gt; &lt;/div&gt;</span><br><span class="line">&gt; </span><br><span class="line">&gt; &lt;div class="tag-cloud-tags"&gt;</span><br><span class="line">&gt; &lt;%- tagcloud(&#123;</span><br><span class="line">&gt; min_font: 12,</span><br><span class="line">&gt; max_font: 30,</span><br><span class="line">&gt; amount: 200,</span><br><span class="line">&gt; color: true,</span><br><span class="line">&gt; start_color: '#ccc',</span><br><span class="line">&gt; end_color: '#111'</span><br><span class="line">&gt; &#125;) %&gt;</span><br><span class="line">&gt; &lt;/div&gt;</span><br><span class="line">&gt; &lt;/div&gt;</span><br><span class="line">&gt; </span><br><span class="line">&gt; &lt;% &#125; else if (page.type === 'categories') &#123; %&gt;</span><br><span class="line">&gt; </span><br><span class="line">&gt; &lt;div class="category-all-page"&gt;</span><br><span class="line">&gt; &lt;div class="category-all-title"&gt;</span><br><span class="line">&gt; &lt;%- _p('counter.categories', site.categories.length) %&gt;</span><br><span class="line">&gt; &lt;/div&gt;</span><br><span class="line">&gt; </span><br><span class="line">&gt; &lt;div class="category-all"&gt;</span><br><span class="line">&gt; &lt;%- list_categories() %&gt;</span><br><span class="line">&gt; &lt;/div&gt;</span><br><span class="line">&gt; </span><br><span class="line">&gt; &lt;/div&gt;</span><br><span class="line">&gt; </span><br><span class="line">&gt; &lt;% &#125; else &#123; %&gt;</span><br><span class="line">&gt; </span><br><span class="line">&gt; &lt;% if (post.excerpt &amp;&amp; index)&#123; %&gt;&lt;%- post.excerpt %&gt;</span><br><span class="line">&gt; &lt;% &#125; else &#123; %&gt;</span><br><span class="line">&gt; &lt;%- post.content %&gt;</span><br><span class="line">&gt; &lt;% &#125; %&gt;</span><br><span class="line">&gt; &lt;% &#125; %&gt;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>修改样式，如果觉得不好看，自己改喜欢的样式</p><p>找到 <code>yilia/source/css/_partial/article.styl</code> 在最后面添加下面的 css 代码</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="comment">/*tag-cloud*/</span></span><br><span class="line">&gt; <span class="selector-class">.tag-cloud</span> &#123;</span><br><span class="line">&gt;   text-align: center;</span><br><span class="line">&gt;   <span class="selector-tag">margin-top</span>: 50<span class="selector-tag">px</span>;</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt; <span class="selector-class">.tag-cloud</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">&gt;   display: inline-block;</span><br><span class="line">&gt;   <span class="selector-tag">margin</span>: 10<span class="selector-tag">px</span>;</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt; <span class="selector-class">.tag-cloud-title</span> &#123;</span><br><span class="line">&gt;   font-weight: 700;</span><br><span class="line">&gt;   <span class="selector-tag">font-size</span>: 24<span class="selector-tag">px</span>;</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt; <span class="selector-class">.tag-cloud-tags</span> &#123;</span><br><span class="line">&gt;   margin-top: 15px;</span><br><span class="line">&gt;   <span class="selector-tag">a</span> &#123;</span><br><span class="line">&gt;     display: inline-block;</span><br><span class="line">&gt;     <span class="selector-tag">text-decoration</span>: <span class="selector-tag">none</span>;</span><br><span class="line">&gt;     <span class="selector-tag">font-weight</span>: <span class="selector-tag">normal</span>;</span><br><span class="line">&gt;     <span class="selector-tag">font-size</span>: 10<span class="selector-tag">px</span>;</span><br><span class="line">&gt;     <span class="selector-tag">color</span>: <span class="selector-id">#fff</span>;</span><br><span class="line">&gt;     <span class="selector-tag">line-height</span>: <span class="selector-tag">normal</span>;</span><br><span class="line">&gt;     <span class="selector-tag">padding</span>: 5<span class="selector-tag">px</span> 5<span class="selector-tag">px</span> 5<span class="selector-tag">px</span> 10<span class="selector-tag">px</span>;</span><br><span class="line">&gt;     <span class="selector-tag">position</span>: <span class="selector-tag">relative</span>;</span><br><span class="line">&gt;     <span class="selector-tag">border-radius</span>: 0 5<span class="selector-tag">px</span> 5<span class="selector-tag">px</span> 0;</span><br><span class="line">&gt;     <span class="selector-tag">font-family</span>: <span class="selector-tag">Menlo</span>, <span class="selector-tag">Monaco</span>, "<span class="selector-tag">Andale</span> <span class="selector-tag">Mono</span>", "<span class="selector-tag">lucida</span> <span class="selector-tag">console</span>", "<span class="selector-tag">Courier</span> <span class="selector-tag">New</span>", <span class="selector-tag">monospace</span>;</span><br><span class="line">&gt;     &amp;<span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">&gt;       opacity: 0.8;</span><br><span class="line">&gt;     &#125;</span><br><span class="line">&gt;     &amp;<span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">&gt;       content: " ";</span><br><span class="line">&gt;       <span class="selector-tag">width</span>: 0;</span><br><span class="line">&gt;       <span class="selector-tag">height</span>: 0;</span><br><span class="line">&gt;       <span class="selector-tag">position</span>: <span class="selector-tag">absolute</span>;</span><br><span class="line">&gt;       <span class="selector-tag">top</span>: 0;</span><br><span class="line">&gt;       <span class="selector-tag">left</span>: <span class="selector-tag">-18px</span>;</span><br><span class="line">&gt;       <span class="selector-tag">border</span>: 9<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-tag">transparent</span>;</span><br><span class="line">&gt;     &#125;</span><br><span class="line">&gt;     &amp;<span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">&gt;       content: " ";</span><br><span class="line">&gt;       <span class="selector-tag">width</span>: 4<span class="selector-tag">px</span>;</span><br><span class="line">&gt;       <span class="selector-tag">height</span>: 4<span class="selector-tag">px</span>;</span><br><span class="line">&gt;       <span class="selector-tag">background-color</span>: <span class="selector-id">#fff</span>;</span><br><span class="line">&gt;       <span class="selector-tag">border-radius</span>: 4<span class="selector-tag">px</span>;</span><br><span class="line">&gt;       <span class="selector-tag">box-shadow</span>: 0 0 0 1<span class="selector-tag">px</span> <span class="selector-tag">rgba</span>(0, 0, 0, <span class="selector-class">.3</span>);</span><br><span class="line">&gt;       <span class="selector-tag">position</span>: <span class="selector-tag">absolute</span>;</span><br><span class="line">&gt;       <span class="selector-tag">top</span>: 7<span class="selector-tag">px</span>;</span><br><span class="line">&gt;       <span class="selector-tag">left</span>: 2<span class="selector-tag">px</span>;</span><br><span class="line">&gt;     &#125;</span><br><span class="line">&gt;   &#125;</span><br><span class="line">&gt;   <span class="selector-tag">a</span><span class="selector-class">.color1</span> &#123;</span><br><span class="line">&gt;     background: #FF945C;</span><br><span class="line">&gt;     &amp;<span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">&gt;       border-right-color: #FF945C;</span><br><span class="line">&gt;     &#125;</span><br><span class="line">&gt;   &#125;</span><br><span class="line">&gt;   <span class="selector-tag">a</span><span class="selector-class">.color2</span> &#123;</span><br><span class="line">&gt;     background: #F5C7B7;</span><br><span class="line">&gt;     &amp;<span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">&gt;       border-right-color: #F5C7B7;</span><br><span class="line">&gt;     &#125;</span><br><span class="line">&gt;   &#125;</span><br><span class="line">&gt;   <span class="selector-tag">a</span><span class="selector-class">.color3</span> &#123;</span><br><span class="line">&gt;     background: #BA8F6C;</span><br><span class="line">&gt;     &amp;<span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">&gt;       border-right-color: #BA8F6C;</span><br><span class="line">&gt;     &#125;</span><br><span class="line">&gt;   &#125;</span><br><span class="line">&gt;   <span class="selector-tag">a</span><span class="selector-class">.color4</span> &#123;</span><br><span class="line">&gt;     background: #CFB7C4;</span><br><span class="line">&gt;     &amp;<span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">&gt;       border-right-color: #CFB7C4;</span><br><span class="line">&gt;     &#125;</span><br><span class="line">&gt;   &#125;</span><br><span class="line">&gt;   <span class="selector-tag">a</span><span class="selector-class">.color5</span> &#123;</span><br><span class="line">&gt;     background: #7B5D5F;</span><br><span class="line">&gt;     &amp;<span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">&gt;       border-right-color: #7B5D5F;</span><br><span class="line">&gt;     &#125;</span><br><span class="line">&gt;   &#125;</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt; <span class="comment">/*category-all-page*/</span></span><br><span class="line">&gt; <span class="selector-class">.category-all-page</span> &#123;</span><br><span class="line">&gt;   margin-top: 50px;</span><br><span class="line">&gt;   <span class="selector-class">.category-all-title</span> &#123;</span><br><span class="line">&gt;     font-weight: 700;</span><br><span class="line">&gt;     <span class="selector-tag">font-size</span>: 24<span class="selector-tag">px</span>;</span><br><span class="line">&gt;     <span class="selector-tag">text-align</span>: <span class="selector-tag">center</span>;</span><br><span class="line">&gt;   &#125;</span><br><span class="line">&gt;   <span class="selector-class">.category-list-item</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">&gt;     content: '';</span><br><span class="line">&gt;     <span class="selector-tag">clear</span>: <span class="selector-tag">both</span>;</span><br><span class="line">&gt;     <span class="selector-tag">display</span>: <span class="selector-tag">table</span>;</span><br><span class="line">&gt;   &#125;</span><br><span class="line">&gt;   <span class="selector-class">.category-list-count</span> &#123;</span><br><span class="line">&gt;     float: right;</span><br><span class="line">&gt;     <span class="selector-tag">margin-left</span>: 5<span class="selector-tag">px</span>;</span><br><span class="line">&gt;   &#125;</span><br><span class="line">&gt;   <span class="selector-class">.category-list-count</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">&gt;     content: '一共 ';</span><br><span class="line">&gt;   &#125;</span><br><span class="line">&gt;   <span class="selector-class">.category-list-count</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">&gt;     content: ' 篇文章';</span><br><span class="line">&gt;   &#125;</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><p>通过上述操作，问题解决。不过显示出来的样式不是自己喜欢的那种。等以后自己学会编程，再回头过来修改吧～</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;设置分类列表页&quot;&gt;&lt;a href=&quot;#设置分类列表页&quot; class=&quot;headerlink&quot; title=&quot;设置分类列表页&quot;&gt;&lt;/a&gt;设置分类列表页&lt;/h1&gt;&lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问
      
    
    </summary>
    
      <category term="小技巧" scheme="https://dilidonglong.github.io/categories/%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    
    
  </entry>
  
  <entry>
    <title>tshark使用方法</title>
    <link href="https://dilidonglong.github.io/2019/04/26/tshark%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/"/>
    <id>https://dilidonglong.github.io/2019/04/26/tshark使用方法/</id>
    <published>2019-04-25T16:10:34.000Z</published>
    <updated>2019-04-25T16:32:27.095Z</updated>
    
    <content type="html"><![CDATA[<h1 id="tshark使用方法"><a href="#tshark使用方法" class="headerlink" title="tshark使用方法"></a>tshark使用方法</h1><p><a href="https://www.wireshark.org/docs/man-pages/tshark.html" target="_blank" rel="noopener">tshark官方文档</a></p><h2 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1.介绍"></a>1.介绍</h2><p><strong>TShark</strong> is a network protocol analyzer. It lets you capture packet data from a live network, or read packets from a previously saved capture file, either printing a decoded form of those packets to the standard output or writing the packets to a file. <strong>TShark</strong>‘s native capture file format is <strong>pcapng</strong> format, which is also the format used by <strong>wireshark</strong> and various other tools.</p><p><strong>TShark</strong>是一个网络分析工具。它能帮你在实时网络中捕获数据包，或是从预先保存好的捕获文件中读取数据包，或是打印出这些数据包的解码形式到标准输出，再或是把数据包写入到一个文件中。<strong>TShark</strong>的本地捕获文件格式是pcapng格式，这种pcapng格式也被<strong>wireshark</strong>和多种其他工具使用。</p><p>Without any options set, <strong>TShark</strong> will work much like <strong>tcpdump</strong>. It will use the pcap library to capture traffic from the first available network interface and displays a summary line on the standard output for each received packet.</p><p>如果没有设置任何选项，<strong>TShark</strong>将像<strong>tcpdump</strong>一样工作。它使用pcap库，从第一个可使用的网络接口捕获流量。并且为每个接收到的包展示其摘要行到标准输出上。</p><p>When run with the <strong>-r</strong> option, specifying a capture file from which to read, <strong>TShark</strong> will again work much like <strong>tcpdump</strong>, reading packets from the file and displaying a summary line on the standard output for each packet read. <strong>TShark</strong> is able to detect, read and write the same capture files that are supported by <strong>Wireshark</strong>. The input file doesn’t need a specific filename extension; the file format and an optional gzip compression will be automatically detected. Near the beginning of the DESCRIPTION section of wireshark(1) or <a href="https://www.wireshark.org/docs/man-pages/wireshark.html" target="_blank" rel="noopener">https://www.wireshark.org/docs/man-pages/wireshark.html</a> is a detailed description of the way <strong>Wireshark</strong> handles this, which is the same way <strong>Tshark</strong> handles this.</p><p>当使用-r选项，会从我们指定的文件中读取数据包信息。<strong>TShark</strong>将再次像<strong>tcpdump</strong>一样工作，从文件中读取数据包并且把读取的数据包在标准输出上展示其摘要行。<strong>TShark</strong>可以检测，读取和写入同一份捕获文件，这些操作在<strong>Wireshark</strong>中也是支持的。输出文件不需要一个指定的文件扩展名；它将动态检测文件格式和可选的gzip压缩。在<strong>Wireshark</strong>的开始描述部分附近或是在链接<a href="https://www.wireshark.org/docs/man-pages/wireshark.html" target="_blank" rel="noopener">https://www.wireshark.org/docs/man-pages/wireshark.html</a> 中，介绍了关于<strong>Wireshark</strong>处理这些问题的方法细节描述，这些方法同样适用于<strong>TShark</strong>。</p><p>Compressed file support uses (and therefore requires) the zlib library. If the zlib library is not present when compiling <strong>TShark</strong>, it will be possible to compile it, but the resulting program will be unable to read compressed files.</p><p>支持压缩文件要使用（因此需要）zlib库。如果编译<strong>TShark</strong>时zlib库不存在，也可以编译它，但是最终程序将不可读取压缩文件。</p><p>When displaying packets on the standard output, <strong>TShark</strong> writes, by default, a summary line containing the fields specified by the preferences file (which are also the fields displayed in the packet list pane in <strong>Wireshark</strong>), although if it’s writing packets as it captures them, rather than writing packets from a saved capture file, it won’t show the “frame number” field. If the <strong>-V</strong> option is specified, it instead writes a view of the details of the packet, showing all the fields of all protocols in the packet. If the <strong>-O</strong> option is specified, it will only show the full details for the protocols specified, and show only the top-level detail line for all other protocols. Use the output of “<strong>tshark -G protocols</strong>“ to find the abbreviations of the protocols you can specify. If the <strong>-P</strong> option is specified with either the <strong>-V</strong> or <strong>-O</strong> options, both the summary line for the entire packet and the details will be displayed.</p><p>当在标准输出显示数据包时，默认情况下<strong>TShark</strong>输出摘要行信息，摘要行里包含首选项文件指定的字段（这些字段也展示在wireshark中的包列表窗），但是如果在捕获流量时输出数据包而不是在保存的文件中输出数据包的话，将不会显示“帧编号”字段。如果指定了<strong>-V</strong>选项，这将输出数据包的细节信息视图，展示了数据包中所有协议的所有字段信息。如果指定了<strong>-O</strong>选项，它将仅显示指定协议的完整详细信息，并仅显示所有其他协议的顶级详细信息行。在命令行中输入“<strong>tshark -G protocols</strong>”可以查找指定的协议缩写。如果<strong>-P</strong>选项和<strong>-V</strong>或<strong>-O</strong>一起使用，将会展示整个包的摘要行和细节信息。</p><p>Packet capturing is performed with the pcap library. That library supports specifying a filter expression; packets that don’t match that filter are discarded. The <strong>-f</strong> option is used to specify a capture filter. The syntax of a capture filter is defined by the pcap library; this syntax is different from the read filter syntax described below, and the filtering mechanism is limited in its abilities.</p><p>数据包捕获时使用pcap库。pcap库支持指定的过滤表达式；数据包没有匹配上过滤表达式则会被丢弃。<strong>-f</strong>选项被用来指定捕获过滤表达式。捕获过滤的语法在pcap库中定义；这些捕获过滤的语法不同于以下所描述的显示过滤器语法，并且其过滤机制的能力有限。</p><p>Read filters in <strong>TShark</strong>, which allow you to select which packets are to be decoded or written to a file, are very powerful; more fields are filterable in <strong>TShark</strong> than in other protocol analyzers, and the syntax you can use to create your filters is richer. As <strong>TShark</strong> progresses, expect more and more protocol fields to be allowed in read filters. Read filters use the same syntax as display and color filters in <strong>Wireshark</strong>; a read filter is specified with the <strong>-R</strong> option.</p><p>在<strong>TShark</strong>中的显示过滤器允许你选择哪一个包被解码或是把该数据包写入到一个文件，这是很强大的功能；<strong>TShark</strong>相比于其他协议分析器可以过滤出更多的字段，并且你能使用并创建的过滤器语法更为丰富。随着<strong>TShark</strong>的发展，期待更多协议字段被允许出现在显示过滤器中。显示过滤器使用与<strong>wireshark</strong>中的展示和色彩过滤器一样的语法；使用<strong>-R</strong>选项来指定显示过滤器。</p><p>Read filters can be specified when capturing or when reading from a capture file. Note that that capture filters are much more efficient than read filters, and it may be more difficult for <strong>TShark</strong> to keep up with a busy network if a read filter is specified for a live capture, so you might be more likely to lose packets if you’re using a read filter.</p><p>当正在捕获或是从一个捕获文件中读取时是可以指定显示过滤器的。需要注意的是捕获过滤器比显示过滤器会更有效率；并且在一个繁忙的网络中如果进行实时捕获时使用了显示过滤器，那么<strong>TShark</strong>可能更难跟上这个繁忙网络，同时你要是使用了显示过滤器还可能会丢失数据包。</p><p>A capture or read filter can either be specified with the <strong>-f</strong> or <strong>-R</strong> option, respectively, in which case the entire filter expression must be specified as a single argument (which means that if it contains spaces, it must be quoted), or can be specified with command-line arguments after the option arguments, in which case all the arguments after the filter arguments are treated as a filter expression. If the filter is specified with command-line arguments after the option arguments, it’s a capture filter if a capture is being done (i.e., if no <strong>-r</strong> option was specified) and a read filter if a capture file is being read (i.e., if a <strong>-r</strong> option was specified).</p><p>捕获或是显示过滤器能分别使用<strong>-f</strong>或是<strong>-R</strong>选项来指定。在这种情况下，整个过滤表达式必须作为一个参数被指定（这意味着如果含有空格，就需要使用“ ”被引用）；或者是在选项参数之后使用命令行参数被指定，在这种情况下，所有在过滤器参数之后的参数会被视为过滤表达式。如果在选项参数后，使用命令行参数来指定过滤器，那么捕获正在进行时它就是捕获过滤器（即，没有-r选项）；如果捕获文件正在被读取，那么它就是显示过滤器（即，<strong>-r</strong>选项是被指定的）。</p><p>If the <strong>-w</strong> option is specified when capturing packets or reading from a capture file, <strong>TShark</strong> does not display packets on the standard output. Instead, it writes the packets to a capture file with the name specified by the <strong>-w</strong> option.</p><p>当正在捕获数据包，或是从一个捕获文件中读取时，如果使用了-w选项，那么<strong>TShark</strong>不会在标准输出上显示数据包。相反，它将把数据包写入捕获文件，其名称由<strong>-w</strong>选项指定。</p><p>If you want to write the decoded form of packets to a file, run <strong>TShark</strong> without the <strong>-w</strong> option, and redirect its standard output to the file (do <em>not</em> use the <strong>-w</strong> option).</p><p>如果要将解码后的数据包形式写入文件，那么使用<strong>TShark</strong>时不要带上-w选项，同时会将其标准输出重定向到文件。（不要使用<strong>-w</strong>选项）</p><p>If you want the packets to be displayed to the standard output and also saved to a file, specify the <strong>-P</strong> option in addition to the <strong>-w</strong> option to have the summary line displayed, specify the <strong>-V</strong> option in addition to the <strong>-w</strong> option to have the details of the packet displayed, and specify the <strong>-O</strong> option, with a list of protocols, to have the full details of the specified protocols and the top-level detail line for all other protocols to be displayed. If the <strong>-P</strong> option is used together with the <strong>-V</strong> or <strong>-O</strong> option, the summary line will be displayed along with the detail lines.</p><p>如果你想数据包在标准输出上显示并且还能保存到一个文件中，那么除了-w选项还需要指定-P选项来显示摘要行。使用<strong>-w</strong>选项及<strong>-V</strong>选项将展示数据包的细节。如果再加上<strong>-O</strong>选项，带上了列出的协议，将显示指定协议的所有细节以及所有其他协议的顶层细节行。如果<strong>-P</strong>选项和<strong>-V</strong>或是<strong>-O</strong>选项一起使用，那么摘要行将会和细节信息一起展示。</p><p>When writing packets to a file, <strong>TShark</strong>, by default, writes the file in <strong>pcapng</strong> format, and writes all of the packets it sees to the output file. The <strong>-F</strong> option can be used to specify the format in which to write the file. This list of available file formats is displayed by the <strong>-F</strong> option without a value. However, you can’t specify a file format for a live capture.</p><p>当把数据包写入一个文件，<strong>TShark</strong>默认情况下会使用<strong>pcapng</strong>格式，并将其所有看到的包写入到输出文件。使用<strong>-F</strong>选项可以指定输出文件的格式。使用<strong>-F</strong>选项不带任何参数值，将显示可以得到的文件格式列表。但是对于实时捕获，你不能指定其文件格式。</p><p>When capturing packets, <strong>TShark</strong> writes to the standard error an initial line listing the interfaces from which packets are being captured and, if packet information isn’t being displayed to the terminal, writes a continuous count of packets captured to the standard output. If the <strong>-q</strong> option is specified, neither the continuous count nor the packet information will be displayed; instead, at the end of the capture, a count of packets captured will be displayed. If the <strong>-Q</strong> option is specified, neither the initial line, nor the packet information, nor any packet counts will be displayed. If the <strong>-q</strong> or <strong>-Q</strong> option is used, the <strong>-P</strong>, <strong>-V</strong>, or <strong>-O</strong> option can be used to cause the corresponding output to be displayed even though other output is suppressed.</p><p>当正在捕获数据包时，<strong>TShark</strong>把捕获到数据包接口的初始化行写入到标准错误中。如果数据包信息没有被展示在终端，则将写入连续的捕获数据包统计到标准输出。如果<strong>-q</strong>选项被指定，则不管是连续统计还是数据包信息都不会被展示出来；相反，在捕获结束后，被捕获的数据包统计将会显示出来。如果<strong>-Q</strong>选项被指定，初始化行、数据包信息或是任何一个数据包统计都不会被展示。如果使用<strong>-q</strong>或<strong>-Q</strong>选项，则可以使用<strong>-P</strong>，<strong>-V</strong>或<strong>-O</strong>选项来显示相应的输出，即使其他输出被抑制也是如此。</p><p>When reading packets, the <strong>-q</strong> and <strong>-Q</strong> option will suppress the display of the packet summary or details; this would be used if <strong>-z</strong> options are specified in order to display statistics, so that only the statistics, not the packet information, is displayed.</p><p>读取数据包时，<strong>-q</strong>和<strong>-Q</strong>选项将禁止显示数据包摘要或详细信息;如果指定<strong>-z</strong>选项以显示统计信息，那么只有统计信息会被展示，而不会展示数据包信息。</p><p>The <strong>-G</strong> option is a special mode that simply causes <strong>Tshark</strong> to dump one of several types of internal glossaries and then exit.</p><p><strong>-G</strong>选项是一种特殊模式，它只会导致<strong>TShark</strong>转储几种类型的内部词汇表中的一种，然后退出。</p><hr><h2 id="2-选项概要"><a href="#2-选项概要" class="headerlink" title="2.选项概要"></a>2.选项概要</h2><p><strong>Capture interface:</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">-i &lt;interface&gt;               <span class="comment"># name or idx of interface (def: first non-loopback)</span></span><br><span class="line">-f &lt;capture filter&gt;          <span class="comment"># packet filter in libpcap filter syntax</span></span><br><span class="line">-s &lt;snaplen&gt;                 <span class="comment"># packet snapshot length (def: 262144)</span></span><br><span class="line">-p                           <span class="comment"># don't capture in promiscuous mode</span></span><br><span class="line">-I                           <span class="comment"># capture in monitor mode, if available</span></span><br><span class="line">-B &lt;buffer size&gt;             <span class="comment"># size of kernel buffer (def: 4MB)</span></span><br><span class="line">-y &lt;link <span class="built_in">type</span>&gt;               <span class="comment"># link layer type (def: first appropriate)</span></span><br><span class="line">-D                           <span class="comment"># print list of interfaces and exit</span></span><br><span class="line">-L                           <span class="comment"># print list of link-layer types of iface and exit</span></span><br></pre></td></tr></table></figure><p><strong>Capture stop conditions:</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-c &lt;packet count&gt;             <span class="comment"># stop after n packets (def: infinite)</span></span><br><span class="line">-a &lt;autostop cond.&gt; ...  </span><br><span class="line">​                             duration:NUM - stop after NUM seconds</span><br><span class="line">​                             filesize:NUM - stop this file after NUM KB</span><br><span class="line">​                             files:NUM - stop after NUM files</span><br></pre></td></tr></table></figure><p><strong>Capture output:</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-b &lt;ringbuffer opt.&gt; ... </span><br><span class="line"></span><br><span class="line">​                            duration:NUM - switch to next file after NUM secs</span><br><span class="line">​                            filesize:NUM - switch to next file after NUM KB</span><br><span class="line">​                            files:NUM - ringbuffer: replace after NUM files</span><br></pre></td></tr></table></figure><p><strong>Input file:</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-r &lt;infile&gt;                  <span class="comment"># set the filename to read from (no stdin!)</span></span><br></pre></td></tr></table></figure><p><strong>Processing:</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">-2                           <span class="comment"># perform a two-pass analysis</span></span><br><span class="line">-R &lt;<span class="built_in">read</span> filter&gt;             <span class="comment"># packet Read filter in Wireshark display filter syntax</span></span><br><span class="line">-Y &lt;display filter&gt;          <span class="comment"># packet displaY filter in Wireshark display filter syntax</span></span><br><span class="line">-n                           <span class="comment"># disable all name resolutions (def: all enabled)</span></span><br><span class="line">-N &lt;name resolve flags&gt;      <span class="comment"># enable specific name resolution(s): "mnNtC"</span></span><br><span class="line">-d &lt;layer_type&gt;== &lt;selector&gt;,&lt;decode_as_protocol&gt; ...</span><br><span class="line">                             <span class="comment"># "Decode As", see the man page for details</span></span><br><span class="line">                             <span class="comment"># Example: tcp.port==8888,http</span></span><br><span class="line">-H &lt;hosts file&gt;         </span><br><span class="line">​            <span class="built_in">read</span> a list of entries from a hosts file, <span class="built_in">which</span> will  <span class="keyword">then</span> be written to a capture file. (Implies -W n)</span><br></pre></td></tr></table></figure><p><strong>Output:</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">-w &lt;outfile|-&gt;               <span class="comment"># write packets to a pcap-format file named "outfile"</span></span><br><span class="line">                             <span class="comment"># (or to the standard output for "-")</span></span><br><span class="line">                             </span><br><span class="line">-C &lt;config profile&gt;          <span class="comment"># start with specified configuration profile</span></span><br><span class="line">-F &lt;output file <span class="built_in">type</span>&gt;        <span class="comment"># set the output file type, default is pcapng</span></span><br><span class="line">                             <span class="comment"># an empty "-F" option will list the file types</span></span><br><span class="line">                             </span><br><span class="line">-V                           <span class="comment"># add output of packet tree (Packet Details)</span></span><br><span class="line">-O &lt;protocols&gt;               <span class="comment"># Only show packet details of these protocols, comma                                        separated</span></span><br><span class="line"></span><br><span class="line">-P                           <span class="comment"># print packet summary even when writing to a file</span></span><br><span class="line">-S &lt;separator&gt;               <span class="comment"># the line separator to print between packets</span></span><br><span class="line">-x                           <span class="comment"># add output of hex and ASCII dump (Packet Bytes)</span></span><br><span class="line">-T pdml|ps|psml|text|fields  <span class="comment"># format of text output (def: text)</span></span><br><span class="line"></span><br><span class="line">-e &lt;field&gt;                   <span class="comment"># field to print if -Tfields selected (e.g. tcp.port,                                      col.Info);this option can be repeated to print multiple                                  fields</span></span><br><span class="line"></span><br><span class="line">-E&lt;fieldsoption&gt;=&lt;value&gt;     <span class="comment"># set options for output when -Tfields selected:</span></span><br><span class="line">     header=y|n                 switch headers on and off</span><br><span class="line">     separator=/t|/s|&lt;char&gt;     select tab, space, printable character as separator</span><br><span class="line">     occurrence=f|l|a           <span class="built_in">print</span> first, last or all occurrences of each field</span><br><span class="line">     aggregator=,|/s|&lt;char&gt;     select comma, space, printable character as  aggregator</span><br><span class="line">     quote=d|s|n                select double, single, no quotes <span class="keyword">for</span> values</span><br><span class="line">     </span><br><span class="line">-t a|ad|d|dd|e|r|u|ud        <span class="comment"># output format of time stamps (def: r: rel. to first)</span></span><br><span class="line">-u s|hms                     <span class="comment"># output format of seconds (def: s: seconds)</span></span><br><span class="line">-l                           <span class="comment"># flush standard output after each packet</span></span><br><span class="line">-q                           <span class="comment"># be more quiet on stdout (e.g. when using statistics)</span></span><br><span class="line">-Q                           <span class="comment"># only log true errors to stderr (quieter than -q)</span></span><br><span class="line">-g                           <span class="comment"># enable group read access on the output file(s)</span></span><br><span class="line">-W n                         <span class="comment"># Save extra information in the file, if supported.</span></span><br><span class="line">                             <span class="comment"># n = write network address resolution information</span></span><br><span class="line">  </span><br><span class="line">-X &lt;key&gt;:&lt;value&gt;             <span class="comment"># eXtension options, see the man page for details</span></span><br><span class="line">-z &lt;statistics&gt;              <span class="comment"># various statistics, see the man page for details</span></span><br></pre></td></tr></table></figure><p><strong>Miscellaneous:</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">-h                           <span class="comment"># display this help and exit</span></span><br><span class="line">-v                           <span class="comment"># display version info and exit</span></span><br><span class="line">-o &lt;name&gt;:&lt;value&gt; ...        <span class="comment"># override preference setting</span></span><br><span class="line">-K &lt;keytab&gt;                  <span class="comment"># keytab file to use for kerberos decryption</span></span><br><span class="line">-G [report]                  <span class="comment"># dump one of several available reports and exit</span></span><br><span class="line">                             <span class="comment"># default report="fields"  </span></span><br><span class="line">                             <span class="comment"># use "-G ?" for more help</span></span><br></pre></td></tr></table></figure><hr><h2 id="3-选项细节"><a href="#3-选项细节" class="headerlink" title="3.选项细节"></a>3.选项细节</h2><h3 id="3-1-Capture-interface-捕获接口"><a href="#3-1-Capture-interface-捕获接口" class="headerlink" title="3.1 Capture interface:捕获接口"></a>3.1 Capture interface:捕获接口</h3><h4 id="i-指定接口"><a href="#i-指定接口" class="headerlink" title="-i        指定接口"></a>-i        指定接口</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-i &lt;interface&gt;               <span class="comment"># name or idx of interface (def: first non-loopback)</span></span><br></pre></td></tr></table></figure><p>Set the name of the network interface or pipe to use for live packet capture.</p><p>为实时数据包捕获设置网络接口或管道的名称。</p><p>Network interface names should match one of the names listed in “<strong>tshark -D</strong>“ (described above); a number, as reported by “<strong>tshark -D</strong>“, can also be used. If you’re using UNIX, “<strong>netstat -i</strong>“, “<strong>ifconfig -a</strong>“ or “<strong>ip link</strong>“ might also work to list interface names, although not all versions of UNIX support the <strong>-a</strong> option to <strong>ifconfig</strong>.</p><p>网络接口名称应该是使用“<strong>tshark -D</strong>”命令后显示的接口名称列表中的一个。当然也可以使用“<strong>tshark -D</strong>”展示的列表中的数字。如果你使用UNIX系统，“<strong>netstat -i</strong>”，“<strong>ifconfig -a</strong>”或是“<strong>iplink</strong>”也可以显示出接口名称，尽管不是所有的NUIX版本都支持在<strong>ifconfig</strong>中使用<strong>-a</strong>参数。</p><p><img src="/2019/04/26/tshark使用方法/1553424287090.png" alt="1553424287090"></p><p>If no interface is specified, <strong>TShark</strong> searches the list of interfaces, choosing the first non-loopback interface if there are any non-loopback interfaces, and choosing the first loopback interface if there are no non-loopback interfaces. If there are no interfaces at all, <strong>TShark</strong> reports an error and doesn’t start the capture.</p><p>如果没有接口被指定，<strong>TShark</strong>寻找接口列表，若在列表中存在多个非回环接口，将选择第一个非回环接口。若在列表中没有非回环接口，则选择第一个回环接口。如果设备没有一个接口，那<strong>TShark</strong>会报告一个错误，并且不会开始捕获数据。</p><p>Pipe names should be either the name of a FIFO (named pipe) or “-“ to read data from the standard input. On Windows systems, pipe names must be of the form “\\pipe\.\pipename”. Data read from pipes must be in standard pcapng or pcap format. Pcapng data must have the same endianness as the capturing host.</p><p>管道名称（此处略）</p><p>This option can occur multiple times. When capturing from multiple interfaces, the capture file will be saved in pcapng format.</p><p>这个选项可以出现多次。当从多个接口进行数据捕获，捕获文件将被保存为pcapng格式。</p><p><img src="/2019/04/26/tshark使用方法/1553424388817.png" alt="1553424388817"></p><h4 id="f-设置捕获时的过滤条件"><a href="#f-设置捕获时的过滤条件" class="headerlink" title="-f        设置捕获时的过滤条件"></a>-f        设置捕获时的过滤条件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-f &lt;capture filter&gt;            <span class="comment"># packet filter in libpcap filter syntax</span></span><br></pre></td></tr></table></figure><p>Set the capture filter expression.设置捕获过滤器表达式</p><p>This option can occur multiple times. If used before the first occurrence of the <strong>-i</strong> option, it sets the default capture filter expression. If used after an <strong>-i</strong> option, it sets the capture filter expression for the interface specified by the last <strong>-i</strong> option occurring before this option. If the capture filter expression is not set specifically, the default capture filter expression is used if provided.</p><p>这个选项可以多次出现。如果在第一次出现<strong>-i</strong>选项之前使用，则会设置默认的捕获过滤器表达式。如果在<strong>-i</strong>选项之后使用，则会为最后一个<strong>-i</strong>选项指定的接口设置捕获过滤器表达式。如果捕获过滤器表达式没有设置指定，则使用默认的捕获过滤表达式（如果提供的话）</p><p>Pre-defined capture filter names, as shown in the GUI menu item Capture-&gt;Capture Filters, can be used by prefixing the argument with “predef:”. Example: <strong>tshark -f “predef:MyPredefinedHostOnlyFilter”</strong></p><p>通过在参数前面添加前缀”predef:”可以使用预定义捕获过滤器名称，就像在GUI菜单选项 Capture-&gt;Capture Filters中一样。举个例子：<strong>tshark -f “predef:MyPredefinedHostOnlyFilter”</strong></p><p><img src="/2019/04/26/tshark使用方法/1553424447858.png" alt="1553424447858"></p><p>ps：捕获过滤器条件写法参考自己之前做的总结文档</p><h4 id="s-设置捕获的数据包长度"><a href="#s-设置捕获的数据包长度" class="headerlink" title="-s        设置捕获的数据包长度"></a>-s        设置捕获的数据包长度</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-s &lt;snaplen&gt;                <span class="comment"># packet snapshot length (def: 262144)</span></span><br></pre></td></tr></table></figure><p>Set the default snapshot length to use when capturing live data. No more than <em>snaplen</em> bytes of each network packet will be read into memory, or saved to disk. A value of 0 specifies a snapshot length of 262144, so that the full packet is captured; this is the default.</p><p>当在捕获实时数据时，设置一个默认的快照长度。每个网络数据包的快照字节将会读入到内存或是保存在硬盘中。</p><p>数值0指定了快照长度是262144字节，以便捕获完整数据包；这个也是默认的。</p><p>This option can occur multiple times. If used before the first occurrence of the <strong>-i</strong> option, it sets the default snapshot length. If used after an <strong>-i</strong> option, it sets the snapshot length for the interface specified by the last <strong>-i</strong> option occurring before this option. If the snapshot length is not set specifically, the default snapshot length is used if provided.</p><p>这个选项能出现多次。如果在第一次出现<strong>-i</strong>选项前使用，则将设置默认的快照长度。如果在<strong>-i</strong>选项后使用，则将为最后一个出现的<strong>-i</strong>选项所指定的接口设置快照长度。如果快照长度没有被指定，则使用默认的快照长度（如果被提供的话）</p><p><img src="/2019/04/26/tshark使用方法/1553424534932.png" alt="1553424534932"></p><h4 id="p-设置接口为非混杂模式"><a href="#p-设置接口为非混杂模式" class="headerlink" title="-p        设置接口为非混杂模式"></a>-p        设置接口为非混杂模式</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-p                        <span class="comment"># don't capture in promiscuous mode</span></span><br></pre></td></tr></table></figure><p><em>Don’t</em> put the interface into promiscuous mode. Note that the interface might be in promiscuous mode for some other reason; hence, <strong>-p</strong> cannot be used to ensure that the only traffic that is captured is traffic sent to or from the machine on which <strong>TShark</strong> is running, broadcast traffic, and multicast traffic to addresses received by that machine.</p><p>不让接口成为混杂模式。</p><p>This option can occur multiple times. If used before the first occurrence of the <strong>-i</strong> option, no interface will be put into the promiscuous mode. If used after an <strong>-i</strong> option, the interface specified by the last <strong>-i</strong> option occurring before this option will not be put into the promiscuous mode.</p><p>这个选项能出现多次。如果在第一次出现-i选项前使用，那么没有接口会被设置为混杂模式。如果在<strong>-i</strong>选项后被使用，那么在<strong>-p</strong>选项前的最后一个<strong>-i</strong>选项指定的接口将不会被设置为混杂模式。</p><h4 id="I-为IEEE802-11设置监控模式"><a href="#I-为IEEE802-11设置监控模式" class="headerlink" title="-I        为IEEE802.11设置监控模式"></a>-I        为IEEE802.11设置监控模式</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-I                          <span class="comment"># capture in monitor mode, if available</span></span><br></pre></td></tr></table></figure><p>Put the interface in “monitor mode”; this is supported only on IEEE 802.11 Wi-Fi interfaces, and supported only on some operating systems.</p><p>设置为监控模式；这仅在IEEE802.11 Wi-Fi接口和某些操作系统上支持。</p><h4 id="B-设置捕获缓冲区大小"><a href="#B-设置捕获缓冲区大小" class="headerlink" title="-B        设置捕获缓冲区大小"></a>-B        设置捕获缓冲区大小</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-B &lt;buffer size&gt;                 <span class="comment"># size of kernel buffer (def: 4MB)</span></span><br></pre></td></tr></table></figure><p>Set capture buffer size (in MiB, default is 2 MiB). </p><p>设置捕获缓冲区大小，TSshark官方文档中说默认是2MB。在我这台Linux服务器显示是4MB</p><h4 id="y-设置数据链路类型"><a href="#y-设置数据链路类型" class="headerlink" title="-y        设置数据链路类型"></a>-y        设置数据链路类型</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-y &lt;link <span class="built_in">type</span>&gt;                 <span class="comment"># link layer type (def: first appropriate)</span></span><br></pre></td></tr></table></figure><p>Set the data link type to use while capturing packets. The values reported by <strong>-L</strong> are the values that can be used.</p><p>当在捕获数据包时，设置数据链路类型。能够使用的值在<strong>-L</strong>参数中被展示</p><p><img src="/2019/04/26/tshark使用方法/1553424590831.png" alt="1553424590831"></p><p><img src="/2019/04/26/tshark使用方法/1553424678354.png" alt="1553424678354"></p><p>This option can occur multiple times. If used before the first occurrence of the <strong>-i</strong> option, it sets the default capture link type. If used after an <strong>-i</strong> option, it sets the capture link type for the interface specified by the last <strong>-i</strong> option occurring before this option. If the capture link type is not set specifically, the default capture link type is used if provided.</p><h4 id="D-输出接口列表"><a href="#D-输出接口列表" class="headerlink" title="-D        输出接口列表"></a>-D        输出接口列表</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-D                        <span class="comment"># print list of interfaces and exit</span></span><br></pre></td></tr></table></figure><p><img src="/2019/04/26/tshark使用方法/1553424287090.png" alt="1553424287090"></p><h4 id="L-显示数据链路类型"><a href="#L-显示数据链路类型" class="headerlink" title="-L        显示数据链路类型"></a>-L        显示数据链路类型</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-L                        <span class="comment"># print list of link-layer types of iface and exit</span></span><br></pre></td></tr></table></figure><hr><h3 id="3-2-Capture-stop-conditions-捕获停止选项"><a href="#3-2-Capture-stop-conditions-捕获停止选项" class="headerlink" title="3.2 Capture stop conditions:捕获停止选项"></a>3.2 Capture stop conditions:捕获停止选项</h3><h4 id="c-在N个数据包后停止捕获"><a href="#c-在N个数据包后停止捕获" class="headerlink" title="-c 在N个数据包后停止捕获"></a>-c 在N个数据包后停止捕获</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-c &lt;packet count&gt;         <span class="comment"># stop after n packets (def: infinite)</span></span><br></pre></td></tr></table></figure><p>Set the maximum number of packets to read when capturing live data. If reading a capture file, set the maximum number of packets to read.</p><p>在捕获实时数据时，设置一个最大的数据包读取数。如果是在读取捕获文件，依旧是要设置一个读取数据包的数量。第一张图是实时捕获的情况，第二张图是读取http_google.pcap文件只看前3个包的情况。</p><p><img src="/2019/04/26/tshark使用方法/1553424792984.png" alt="1553424792984"></p><h4 id="a-设置停止捕获条件"><a href="#a-设置停止捕获条件" class="headerlink" title="-a 设置停止捕获条件"></a>-a 设置停止捕获条件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-a &lt;autostop cond.&gt; ...  </span><br><span class="line"></span><br><span class="line">​                           duration:NUM - stop after NUM seconds</span><br><span class="line">​                           filesize:NUM - stop this file after NUM KB</span><br><span class="line">​                           files:NUM - stop after NUM files</span><br></pre></td></tr></table></figure><p>Specify a criterion that specifies when <strong>TShark</strong> is to stop writing to a capture file. The criterion is of the form <strong><em>test:value</em></strong>, where <em>test</em> is one of:</p><p>指定一个标准，指定<strong>TShark</strong>何时停止写入捕获文件。标准的写法是test：value，其中test是以下之一</p><p><strong>duration</strong>:<em>value</em>   Stop writing to a capture file after <em>value</em> seconds have elapsed. Floating point values (e.g. 0.5) are allowed.</p><p><strong>duration</strong>:<em>value</em>    经过value秒后停止捕获文件。duration是持续时间的意思。浮点数值也是被允许的（比如0.5）。下图测试，确实在1s后停止捕获，同时还告诉你6个包被捕获到了</p><p><img src="/2019/04/26/tshark使用方法/1553424874791.png" alt="1553424874791"></p><p><strong>files</strong>:<em>value</em>        Stop writing to capture files after <em>value</em> number of files were written.</p><p><strong>files</strong>:<em>value</em>        在捕获value个文件后，就停止捕获</p><p><strong>filesize</strong>:<em>value</em>    Stop writing to a capture file after it reaches a size of <em>value</em> kB. If this option is used together with the -b option, <strong>TShark</strong> will stop writing to the current capture file and switch to the next one if filesize is reached. When reading a capture file, <strong>TShark</strong> will stop reading the file after the number of bytes read exceeds this number (the complete packet will be read, so more bytes than this number may be read). Note that the filesize is limited to a maximum value of 2 GiB.</p><p><strong>filesize</strong>:<em>value</em>    在达到value kB的大小后停止写入捕获文件。如果此选项与-b选项一起使用，则<strong>TShark</strong>将停止写入当前捕获文件，并在达到文件大小时切换到下一个文件。读取捕获文件时，<strong>TShark</strong>将在读取的字节数超过此数字后停止读取该文件（因为要读取完整数据包，所以可能会读取出超出这个数值的字节数）。请注意，文件大小限制为2 GiB。</p><p><img src="/2019/04/26/tshark使用方法/1553425008635.png" alt="1553425008635"></p><hr><h3 id="3-3-Capture-output-捕获输出"><a href="#3-3-Capture-output-捕获输出" class="headerlink" title="3.3 Capture output:捕获输出"></a>3.3 Capture output:捕获输出</h3><h4 id="b-设置循环写入多个数据包条件"><a href="#b-设置循环写入多个数据包条件" class="headerlink" title="-b 设置循环写入多个数据包条件"></a>-b 设置循环写入多个数据包条件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-b &lt;ringbuffer opt.&gt; ... </span><br><span class="line">​                            duration:NUM - switch to next file after NUM secs</span><br><span class="line">​                            filesize:NUM - switch to next file after NUM KB</span><br><span class="line">​                            files:NUM - ringbuffer: replace after NUM files</span><br></pre></td></tr></table></figure><p>Cause <strong>TShark</strong> to run in “multiple files” mode. In “multiple files” mode, <strong>TShark</strong> will write to several capture files. When the first capture file fills up, <strong>TShark</strong> will switch writing to the next file and so on.</p><p>导致<strong>TShark</strong>使用“多文件”模式运行。在“多文件”模式下，<strong>TShark</strong>将写入多个捕获文件。当第一个捕获文件写满，<strong>TShark</strong>将切换写入到下一个文件，以此类推。</p><p>The created filenames are based on the filename given with the <strong>-w</strong> option, the number of the file and on the creation date and time, e.g. outfile_00001_20190714120117.pcap, outfile_00002_20190714120523.pcap, …</p><p>被创建的这些文件名是基于<strong>-w</strong>选项所给出的“文件名，文件的编号以及在创建时的数据和时间”。例如 outfile_00001_20190714120117.pcap，outfile_00002_20190714120523.pcap, …</p><p>With the <em>files</em> option it’s also possible to form a “ring buffer”. This will fill up new files until the number of files specified, at which point <strong>TShark</strong> will discard the data in the first file and start writing to that file and so on. If the <em>files</em> option is not set, new files filled up until one of the capture stop conditions match (or until the disk is full).</p><p>使用files选项还可以形成“环形缓冲区”。这将填充新文件直到所指定的文件数。在这一点上，<strong>TShark</strong>将丢弃在第一个文件中的数据并开始把数据写入另一个文件中，以此类推。如果files选项没有被设置，则将填满新文件，直到其中一个捕获停止条件匹配为止（或是直到硬盘被填满）。</p><p>The criterion is of the form <em>key:value</em>, where <em>key</em> is one of:</p><p>标准格式是<em>key:value</em>，<em>key</em>是以下参数中的一个：</p><p><strong>duration</strong>:<em>value</em>   switch to the next file after <em>value</em> seconds have elapsed, even if the current file is not completely filled up. Floating point values (e.g. 0.5) are allowed.</p><p><strong>duration</strong>:<em>value</em>    在经过<em>value</em>秒后切换到下一个文件，即便现在的文件没有被完全填满。浮点数值（例如0.5）也是可以使用的。</p><p><img src="/2019/04/26/tshark使用方法/1553317134423.png" alt="1553317134423"></p><p><strong>files</strong>:<em>value</em>     begin again with the first file after <em>value</em> number of files were written (form a ring buffer). This value must be less than 100000. Caution should be used when using large numbers of files: some filesystems do not handle many files in a single directory well. The <strong>files</strong> criterion requires either <strong>duration</strong>, <strong>interval</strong> or <strong>filesize</strong> to be specified to control when to go to the next file. It should be noted that each <strong>-b</strong> parameter takes exactly one criterion; to specify two criterion, each must be preceded by the <strong>-b</strong> option.</p><p><strong>files</strong>:<em>value</em>    在<em>value</em>个文件数被写入后，再次从第一个文件开始（形成环形缓冲区）。这个数值必须小于100000。当使用大量的文件数时，需要谨慎使用：因为一些文件系统不能在当个的目录下处理好大量的文件。文件标准要求指定持续时间，间隔或文件大小以控制何时转到下一个文件。需要注意的是每个<strong>-b</strong>参数只使用一个标准；想要使用两个标准，那么每个标准前都要加上<strong>-b</strong>参数</p><p><img src="/2019/04/26/tshark使用方法/1553317668809.png" alt="1553317668809"></p><p><strong>filesize</strong>:<em>value</em>   switch to the next file after it reaches a size of <em>value</em> kB. Note that the filesize is limited to a maximum value of 2 GiB.</p><p><strong>filesize</strong>:<em>value</em>     在到达<em>value</em> kB后，切换到下一个文件。需要注意的是文件大小被限制在2GB以下。</p><hr><h3 id="3-4-Input-file-读取本地文件"><a href="#3-4-Input-file-读取本地文件" class="headerlink" title="3.4 Input file:读取本地文件"></a>3.4 Input file:读取本地文件</h3><h4 id="r"><a href="#r" class="headerlink" title="-r"></a>-r</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-r &lt;infile&gt;                  <span class="comment"># set the filename to read from (no stdin!)</span></span><br></pre></td></tr></table></figure><p><img src="/2019/04/26/tshark使用方法/1553318042410.png" alt="1553318042410"></p><hr><h3 id="3-5-Processing-处理过程"><a href="#3-5-Processing-处理过程" class="headerlink" title="3.5 Processing:处理过程"></a>3.5 Processing:处理过程</h3><h4 id="2-执行2次分析"><a href="#2-执行2次分析" class="headerlink" title="-2 执行2次分析"></a>-2 执行2次分析</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-2                           <span class="comment"># perform a two-pass analysis</span></span><br></pre></td></tr></table></figure><p>执行两次分析</p><h4 id="R-设置显示过滤器"><a href="#R-设置显示过滤器" class="headerlink" title="-R 设置显示过滤器"></a>-R 设置显示过滤器</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-R &lt;<span class="built_in">read</span> filter&gt;             <span class="comment"># packet Read filter in Wireshark display filter syntax</span></span><br></pre></td></tr></table></figure><p>Cause the specified filter (which uses the syntax of read/display filters, rather than that of capture filters) to be applied during the first pass of analysis. Packets not matching the filter are not considered for future passes. Only makes sense with multiple passes, see -2. For regular filtering on single-pass dissect see -Y instead.</p><p>在第一遍分析中使用指定过滤器（该过滤器使用的是读取/显示过滤器的语法，而不是捕获过滤器的语法）。没有匹配过滤器的数据包将不会在后续展示。<strong>-R</strong>对于数据包进行多次分析才有意义，可以参考<strong>-2</strong>。对于单次的常规分析详见<strong>-Y</strong>。</p><h4 id="Y-设置显示过滤器（单次分析）"><a href="#Y-设置显示过滤器（单次分析）" class="headerlink" title="-Y 设置显示过滤器（单次分析）"></a>-Y 设置显示过滤器（单次分析）</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-Y &lt;display filter&gt;          <span class="comment"># packet displaY filter in Wireshark display filter syntax</span></span><br></pre></td></tr></table></figure><p>Cause the specified filter (which uses the syntax of read/display filters, rather than that of capture filters) to be applied before printing a decoded form of packets or writing packets to a file. Packets matching the filter are printed or written to file; packets that the matching packets depend upon (e.g., fragments), are not printed but are written to file; packets not matching the filter nor depended upon are discarded rather than being printed or written.</p><p>在输出数据包的解码形式或写入数据包到文件前，使用指定的过滤器（过滤器使用读取/显示过滤器的语法，而不是捕获过滤器）。匹配过滤的数据包将输出或是写入到文件；基于匹配的数据包（例如：数据段），将不会输出但是会写入到文件；不匹配过滤器的数据包被丢弃而不是被打印或写入。</p><p>Use this instead of -R for filtering using single-pass analysis. If doing two-pass analysis (see -2) then only packets matching the read filter (if there is one) will be checked against this filter.</p><p>对于过滤时使用-R将进行单次分析。如果做2次分析（见-2），那么只有数据包匹配了读取过滤器（如果有的话），将会针对这个过滤器再次检查。</p><h4 id="n-设置不做名称解析"><a href="#n-设置不做名称解析" class="headerlink" title="-n 设置不做名称解析"></a>-n 设置不做名称解析</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-n                           <span class="comment"># disable all name resolutions (def: all enabled)</span></span><br></pre></td></tr></table></figure><p>Disable network object name resolution (such as hostname, TCP and UDP port names); the <strong>-N</strong> option might override this one.</p><p>关闭所有名称解析（例如主机名，TCP和UDP的端口名）；<strong>-N</strong>选项将覆盖-n选项。</p><h4 id="N-设置只为特定情况做名称解析"><a href="#N-设置只为特定情况做名称解析" class="headerlink" title="-N 设置只为特定情况做名称解析"></a>-N 设置只为特定情况做名称解析</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-N &lt;name resolve flags&gt;      <span class="comment"># enable specific name resolution(s): "mnNtC"</span></span><br></pre></td></tr></table></figure><p>Turn on name resolving only for particular types of addresses and port numbers, with name resolving for other types of addresses and port numbers turned off. This option overrides <strong>-n</strong> if both <strong>-N</strong> and <strong>-n</strong> are present. If both <strong>-N</strong> and <strong>-n</strong> options are not present, all name resolutions are turned on.</p><p>只为特定的地址和端口号类型打开名称解析，对于没有指定的则不进行地址解析。如果<strong>-N</strong>和<strong>-n</strong>选项同时出现，则会覆盖<strong>-n</strong>选项。如果<strong>-N</strong>和<strong>-n</strong>选项都没出现，则名称解析会被开启。</p><p>The argument is a string that may contain the letters:</p><p>参数是包含以下字母的字符串</p><p><strong>d</strong> to enable resolution from captured DNS packets</p><p>从捕获的DNS数据包中开始解析</p><p><strong>m</strong> to enable MAC address resolution</p><p>开启MAC地址解析</p><p><strong>n</strong> to enable network address resolution</p><p>开启网络地址解析</p><p><strong>N</strong> to enable using external resolvers (e.g., DNS) for network address resolution</p><p>使用外部解析器（如DNS）来对网络地址进行解析</p><p><strong>t</strong> to enable transport-layer port number resolution</p><p>开启传输层端口号解析</p><p><strong>v</strong> to enable VLAN IDs to names resolution</p><p>开启VLAN ID的名称解析</p><h4 id="d-设置解码格式"><a href="#d-设置解码格式" class="headerlink" title="-d 设置解码格式"></a>-d 设置解码格式</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-d &lt;layer_type&gt;== &lt;selector&gt;,&lt;decode_as_protocol&gt; ...</span><br><span class="line">                             <span class="comment"># "Decode As", see the man page for details</span></span><br><span class="line">                             <span class="comment"># Example: tcp.port==8888,http</span></span><br></pre></td></tr></table></figure><p>Like Wireshark’s <strong>Decode As…</strong> feature, this lets you specify how a layer type should be dissected. If the layer type in question (for example, <strong>tcp.port</strong> or <strong>udp.port</strong> for a TCP or UDP port number) has the specified selector value, packets should be dissected as the specified protocol.</p><p>类似于Wireshark的<strong>Decode As…</strong>这个功能让你指定如何对每层类型进行分析。如果请求的层次类型（如TCP或是UDP端口号中的<strong>tcp.port</strong> 、<strong>udp.port</strong> ）有指定的选择值，则数据包将会使用指定的协议进行分析。</p><p>Example: <strong>tshark -d tcp.port==8888,http</strong> will decode any traffic running over TCP port 8888 as HTTP.</p><p>例如：<strong>tshark -d tcp.port==8888,http</strong>将会解码每一个TCP端口号是8888的流量为HTTP协议。</p><p>Example: <strong>tshark -d tcp.port==8888:3,http</strong> will decode any traffic running over TCP ports 8888, 8889 or 8890 as HTTP.</p><p>例如：<strong>tshark -d tcp.port==8888:3,http</strong>将会解码每一个TCP端口号是8888，8889,8890的流量为HTTP协议。</p><p>Example: <strong>tshark -d tcp.port==8888-8890,http</strong> will decode any traffic running over TCP ports 8888, 8889 or 8890 as HTTP.</p><p>含义同上，只是写法有区别</p><p>Using an invalid selector or protocol will print out a list of valid selectors and protocol names, respectively.</p><p>使用无效的解析器或协议将会分别打印出有效解析器和协议名称的表。</p><p>Example: <strong>tshark -d .</strong> is a quick way to get a list of valid selectors.</p><p>例如：<strong>tshark -d .</strong>以最快的方式列出有效解析器</p><p>Example: <strong>tshark -d ethertype==0x0800.</strong> is a quick way to get a list of protocols that can be selected with an ethertype.</p><p>例如：<strong>tshark -d ethertype==0x0800.</strong>以最快的方式获取能选择的以太网类型的协议列表</p><h4 id="H"><a href="#H" class="headerlink" title="-H"></a>-H</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-H &lt;hosts file&gt;         </span><br><span class="line">​            <span class="built_in">read</span> a list of entries from a hosts file, <span class="built_in">which</span> will  <span class="keyword">then</span> be written to a capture file. (Implies -W n)</span><br></pre></td></tr></table></figure><p>Read a list of entries from a “hosts” file, which will then be written to a capture file. Implies <strong>-W n</strong>. Can be called multiple times.</p><p>从“hosts”文件中读取条目列表，然后将其写入捕获文件。也可以使用<strong>-W n</strong>。可以多次调用。</p><hr><h3 id="3-6-Output-输出"><a href="#3-6-Output-输出" class="headerlink" title="3.6 Output:输出"></a>3.6 Output:输出</h3><h4 id="w-写入文件"><a href="#w-写入文件" class="headerlink" title="-w  写入文件"></a>-w  写入文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-w &lt;outfile|-&gt;               <span class="comment"># write packets to a pcap-format file named "outfile"</span></span><br><span class="line">                             <span class="comment"># (or to the standard output for "-")</span></span><br></pre></td></tr></table></figure><p>Write raw packet data to <em>outfile</em> or to the standard output if <em>outfile</em> is ‘-‘.</p><p>在标准输出或是输出文件中写入原始数据包</p><p>NOTE: -w provides raw packet data, not text. If you want text output you need to redirect stdout (e.g. using ‘&gt;’), don’t use the <strong>-w</strong> option for this.</p><p>注意：<strong>-w</strong>提供的是原始数据包，而非文本。如果你想输出文本，你需要重定向（例如使用‘&gt;’），而非使用-w选项。</p><h4 id="F-设置写入文件格式"><a href="#F-设置写入文件格式" class="headerlink" title="-F  设置写入文件格式"></a>-F  设置写入文件格式</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-F &lt;output file <span class="built_in">type</span>&gt;        <span class="comment"># set the output file type, default is pcapng</span></span><br><span class="line">                             <span class="comment"># an empty "-F" option will list the file types</span></span><br></pre></td></tr></table></figure><p>Set the file format of the output capture file written using the <strong>-w</strong> option. The output written with the <strong>-w</strong> option is raw packet data, not text, so there is no <strong>-F</strong> option to request text output. The option <strong>-F</strong> without a value will list the available formats.</p><p>使用<strong>-w</strong>选项设置输出捕获文件写入的文件格式。使用<strong>-w</strong>选项写入的输出是原始数据包而非文本。<strong>-F</strong>选项后不接值，则将列出可获得的格式。</p><h4 id="V（大写V，显示数据包细节）"><a href="#V（大写V，显示数据包细节）" class="headerlink" title="-V（大写V，显示数据包细节）"></a>-V（大写V，显示数据包细节）</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-V                           <span class="comment"># add output of packet tree (Packet Details)</span></span><br></pre></td></tr></table></figure><p>Cause <strong>TShark</strong> to print a view of the packet details.</p><p><img src="/2019/04/26/tshark使用方法/1553425274015.png" alt="1553425274015"></p><h4 id="O-显示此选项指定的协议的详细信息"><a href="#O-显示此选项指定的协议的详细信息" class="headerlink" title="-O 显示此选项指定的协议的详细信息"></a>-O 显示此选项指定的协议的详细信息</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-O &lt;protocols&gt;               <span class="comment"># Only show packet details of these protocols, comma                                        separated</span></span><br></pre></td></tr></table></figure><p>Similar to the <strong>-V</strong> option, but causes <strong>TShark</strong> to only show a detailed view of the comma-separated list of <em>protocols</em> specified, and show only the top-level detail line for all other protocols, rather than a detailed view of all protocols. Use the output of “<strong>tshark -G protocols</strong>“ to find the abbreviations of the protocols you can specify.</p><p>类似于<strong>-V</strong>，只是<strong>TShark</strong>仅显示指定协议的以逗号分隔开的协议细节。同时仅为其他的协议显示顶层细节行，而非全体细节。使用 “<strong>tshark -G protocols</strong>“ 你可以获得可以指定的协议列表。</p><h4 id="T-与-e一起使用，显示相应的特定内容"><a href="#T-与-e一起使用，显示相应的特定内容" class="headerlink" title="-T 与-e一起使用，显示相应的特定内容"></a>-T 与-e一起使用，显示相应的特定内容</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-T pdml|ps|psml|text|fields  <span class="comment"># format of text output (def: text)</span></span><br></pre></td></tr></table></figure><p>Set the format of the output when viewing decoded packet data. The options are one of:</p><p>当在查看解码数据包数据时设置输出格式。选项可以为以下之一（我只列出常用的）：</p><p><strong>fields</strong> The values of fields specified with the <strong>-e</strong> option, in a form specified by the <strong>-E</strong> option. For example,</p><p><strong>fields</strong>  使用<strong>-e</strong>选项指定字段的值，采用-E选项指定格式。例如，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tshark -T fields -E separator=, -E quote=d</span><br></pre></td></tr></table></figure><p><img src="/2019/04/26/tshark使用方法/1553425343018.png" alt="1553425343018"></p><h4 id="e"><a href="#e" class="headerlink" title="-e"></a>-e</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-e &lt;field&gt;                   <span class="comment"># field to print if -Tfields selected (e.g. tcp.port,                                      col.Info);this option can be repeated to print multiple                                  fields</span></span><br></pre></td></tr></table></figure><p>Add a field to the list of fields to display if <strong>-T ek|fields|json|pdml</strong> is selected. This option can be used multiple times on the command line. At least one field must be provided if the <strong>-T fields</strong> option is selected. </p><p>如果选择了<strong>-T ek|fields|json|pdml</strong>，则添加一个字段来显示字段列表。在命令行，这个选项可以使用多次。如果使用的是 <strong>-T fields</strong> ，则至少要提供一个字段。</p><p>Example: <strong>tshark -e frame.number -e ip.addr -e udp </strong></p><p>例如：<strong>tshark -e frame.number -e ip.addr -e udp </strong></p><p>Giving a protocol rather than a single field will print multiple items of data about the protocol as a single field. Fields are separated by tab characters by default. <strong>-E</strong> controls the format of the printed fields.</p><p>给定一个协议而不是单个字段，将会打印出这个协议作为单个字段的多个项目数据。字段默认情况下会被制表符分隔。<strong>-E</strong>控制打印字段的格式。</p><h4 id="E-设置控制字段打印的选项"><a href="#E-设置控制字段打印的选项" class="headerlink" title="-E 设置控制字段打印的选项"></a>-E 设置控制字段打印的选项</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-E&lt;fieldsoption&gt;=&lt;value&gt;     <span class="comment"># set options for output when -Tfields selected:</span></span><br><span class="line">     header=y|n                 switch headers on and off</span><br><span class="line">     separator=/t|/s|&lt;char&gt;     select tab, space, printable character as separator</span><br><span class="line">     occurrence=f|l|a           <span class="built_in">print</span> first, last or all occurrences of each field</span><br><span class="line">     aggregator=,|/s|&lt;char&gt;     select comma, space, printable character as  aggregator</span><br><span class="line">     quote=d|s|n                select double, single, no quotes <span class="keyword">for</span> values</span><br></pre></td></tr></table></figure><h4 id="t-设置时间显示格式"><a href="#t-设置时间显示格式" class="headerlink" title="-t 设置时间显示格式"></a>-t 设置时间显示格式</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-t a|ad|d|dd|e|r|u|ud        <span class="comment"># output format of time stamps (def: r: rel. to first)</span></span><br></pre></td></tr></table></figure><h4 id="u-设置秒的类型"><a href="#u-设置秒的类型" class="headerlink" title="-u  设置秒的类型"></a>-u  设置秒的类型</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-u s|hms                     <span class="comment"># output format of seconds (def: s: seconds)</span></span><br></pre></td></tr></table></figure><p>Specifies the seconds type. Valid choices are:</p><p><strong>s</strong> for seconds</p><p><strong>hms</strong> for hours, minutes and seconds</p><h4 id="W-n"><a href="#W-n" class="headerlink" title="-W n"></a>-W n</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-W n                         <span class="comment"># Save extra information in the file, if supported.</span></span><br><span class="line">                             <span class="comment"># n = write network address resolution information</span></span><br></pre></td></tr></table></figure><p>Save extra information in the file if the format supports it. For example,</p><p>如果格式支持，则保存额外的信息到文件中。例如，使用如下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tshark -F pcapng -W n</span><br></pre></td></tr></table></figure><p>will save host name resolution records along with captured packets.</p><p>则将保存主机名称解析的解码到捕获数据包中。</p><p>Future versions of <strong>Tshark</strong> may automatically change the capture format to <strong>pcapng</strong> as needed.</p><p>未来版本的<strong>Tshark</strong>可能会根据需要自动将捕获格式更改为pcapng。</p><p>The argument is a string that may contain the following letter:</p><p><strong>n</strong> write network address resolution information (pcapng only)</p><p>参数可以是以下的字符串：</p><p><strong>n</strong> 写入网络地址解析信息(仅限pcapng)</p><h4 id="q与-z-获取各种统计信息（只挑选了部分常用的）"><a href="#q与-z-获取各种统计信息（只挑选了部分常用的）" class="headerlink" title="-q与-z 获取各种统计信息（只挑选了部分常用的）"></a>-q与-z 获取各种统计信息（只挑选了部分常用的）</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-q                           <span class="comment"># be more quiet on stdout (e.g. when using statistics)</span></span><br><span class="line">-z &lt;statistics&gt;              <span class="comment"># various statistics, see the man page for details</span></span><br></pre></td></tr></table></figure><p>Get <strong>TShark</strong> to collect various types of statistics and display the result after finishing reading the capture file. Use the <strong>-q</strong> option if you’re reading a capture file and only want the statistics printed, not any per-packet information.</p><p>让<strong>TShark</strong>收集统计的各种类型，并且在完成读取的捕获文件后展示出来。如果你正在读取捕获文件，并只想打印出统计信息，而不是每个包的信息，则使用<strong>-q</strong>选项。</p><p>Note that the <strong>-z proto</strong> option is different - it doesn’t cause statistics to be gathered and printed when the capture is complete, it modifies the regular packet summary output to include the values of fields specified with the option. Therefore you must not use the <strong>-q</strong> option, as that option would suppress the printing of the regular packet summary output, and must also not use the <strong>-V</strong> option, as that would cause packet detail information rather than packet summary information to be printed.</p><p>注意的是<strong>-z proto</strong>有不同之处。当在捕获完成时，它不会收集统计信息并打印出来，而是修改常规数据包汇总输出，包括选项中指定字段的数值。因此，你不能使用<strong>-q</strong>选项，因为该选项会禁止打印常规数据包的汇总输出。同时，也不能使用<strong>-V</strong>选项，因为这会导致数据包的细节信息被打印出来，而非数据包的汇总信息。</p><p>Currently implemented statistics are:目前实现的统计有如下内容：</p><ul><li><p><strong>-z help</strong></p><p>Display all possible values for <strong>-z</strong>.</p><p>显示所有可能的数值</p></li></ul><ul><li><p><strong>-z afp,srt[,<em>filter</em>]</strong></p><p>Show Apple Filing Protocol service response time statistics.</p><p>显示AFP服务器响应时间统计</p></li></ul><ul><li><p><strong>-z conv,<em>type</em>[,<em>filter</em>]</strong></p><p>Create a table that lists all conversations that could be seen in the capture. <em>type</em> specifies the conversation endpoint types for which we want to generate the statistics; currently the supported ones are:</p><p>创建一个表，里面包含了所有统计信息，这些信息可以在捕获中看到。<em>type</em>指定了我们想要生成的统计信息的会话终端类型。目前支持的内容如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"bluetooth"</span>               Bluetooth addresses</span><br><span class="line"><span class="string">"eth"</span>                     Ethernet addresses</span><br><span class="line"><span class="string">"fc"</span>                      Fibre Channel addresses</span><br><span class="line"><span class="string">"fddi"</span>                    FDDI addresses</span><br><span class="line"><span class="string">"ip"</span>                      IPv4 addresses</span><br><span class="line"><span class="string">"ipv6"</span>                    IPv6 addresses</span><br><span class="line"><span class="string">"ipx"</span>                     IPX addresses</span><br><span class="line"><span class="string">"jxta"</span>                    JXTA message addresses</span><br><span class="line"><span class="string">"ncp"</span>                     NCP connections</span><br><span class="line"><span class="string">"rsvp"</span>                    RSVP connections</span><br><span class="line"><span class="string">"sctp"</span>                    SCTP addresses</span><br><span class="line"><span class="string">"tcp"</span>                     TCP/IP socket pairs  Both IPv4 and IPv6 are supported</span><br><span class="line"><span class="string">"tr"</span>                      Token Ring addresses</span><br><span class="line"><span class="string">"usb"</span>                     USB addresses</span><br><span class="line"><span class="string">"udp"</span>                     UDP/IP socket pairs  Both IPv4 and IPv6 are supported</span><br><span class="line"><span class="string">"wlan"</span>                    IEEE 802.11 addresses</span><br></pre></td></tr></table></figure><p>If the optional <em>filter</em> is specified, only those packets that match the filter will be used in the calculations.</p><p>如果指定了<em>filter</em>，则在计算时会使用匹配了过滤条件的这些数据包。</p><p>The table is presented with one line for each conversation and displays the number of packets/bytes in each direction as well as the total number of packets/bytes. The table is sorted according to the total number of frames.</p><p>这个表会为每个会话显示一行，并且显示每个方向的数据包/字节的数目及其总数。该表会依据数据帧数进行排序。</p><p><img src="/2019/04/26/tshark使用方法/1553419331871.png" alt="1553419331871"></p></li></ul><ul><li><p><strong>-z bootp,stat[,<em>filter</em>]</strong></p><p>Show DHCP (BOOTP) statistics.</p><p>显示DHCP统计信息</p></li></ul><ul><li><p><strong>-z dns,tree[,<em>filter</em>]</strong></p><p>Create a summary of the captured DNS packets. General information are collected such as qtype and qclass distribution. For some data (as qname length or DNS payload) max, min and average values are also displayed.</p><p>为捕获的DNS数据包创建一个汇总。核心信息包含了如qtype，qclass distribution。对于一些数据（如qname长度或是DNS负载）的最大，最小，平均值也会被显示出来。</p></li></ul><ul><li><p><strong>-z endpoints,<em>type</em>[,<em>filter</em>]</strong></p><p>Create a table that lists all endpoints that could be seen in the capture. <em>type</em> specifies the endpoint types for which we want to generate the statistics; currently the supported ones are:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"bluetooth"</span>               Bluetooth addresses</span><br><span class="line"><span class="string">"eth"</span>                     Ethernet addresses</span><br><span class="line"><span class="string">"fc"</span>                      Fibre Channel addresses</span><br><span class="line"><span class="string">"fddi"</span>                    FDDI addresses</span><br><span class="line"><span class="string">"ip"</span>                      IPv4 addresses</span><br><span class="line"><span class="string">"ipv6"</span>                    IPv6 addresses</span><br><span class="line"><span class="string">"ipx"</span>                     IPX addresses</span><br><span class="line"><span class="string">"jxta"</span>                    JXTA message addresses</span><br><span class="line"><span class="string">"ncp"</span>                     NCP connections</span><br><span class="line"><span class="string">"rsvp"</span>                    RSVP connections</span><br><span class="line"><span class="string">"sctp"</span>                    SCTP addresses</span><br><span class="line"><span class="string">"tcp"</span>                     TCP/IP socket pairs  Both IPv4 and IPv6 are supported</span><br><span class="line"><span class="string">"tr"</span>                      Token Ring addresses</span><br><span class="line"><span class="string">"usb"</span>                     USB addresses</span><br><span class="line"><span class="string">"udp"</span>                     UDP/IP socket pairs  Both IPv4 and IPv6 are supported</span><br><span class="line"><span class="string">"wlan"</span>                    IEEE 802.11 addresses</span><br></pre></td></tr></table></figure><p>If the optional <em>filter</em> is specified, only those packets that match the filter will be used in the calculations（计算）.The table is presented with one line for each conversation and displays the number of packets/bytes in each direction as well as the total number of packets/bytes. The table is sorted according to the total number of frames.</p><p>与<strong>-z conv,<em>type</em>[,<em>filter</em>]</strong>类似</p></li></ul><ul><li><p><strong>-z expert [<em>,error|,warn|,note|,chat|,comment</em>][<em>,filter</em>]</strong></p><p>Collects information about all expert info, and will display them in order, grouped by severity.</p><p>Example: <strong>-z expert,sip</strong> will show expert items of all severity for frames that match the sip protocol.</p><p>This option can be used multiple times on the command line.</p><p>收集所有的expert info专家信息，并按顺序及重要性分组来显示他们。</p><p>例如: <strong>-z expert,sip</strong> 将显示与sip协议匹配的帧的所有重要专家项。</p></li></ul><p>  If the optional <em>filter</em> is provided, the stats will only be calculated on those calls that match that filter.</p><p>  Example: <strong>-z “expert,note,tcp”</strong> will only collect expert items for frames that include the tcp protocol, with a severity of note or higher.</p><p>  如果提供了<em>filter</em>，则只会根据与该过滤器匹配的调用计算统计信息。</p><p>  例如：<strong>-z “expert,note,tcp”</strong> 将仅收集note或更高层级的包含了tcp协议的数据帧的专家项</p><p>  <img src="/2019/04/26/tshark使用方法/1553419674561.png" alt="1553419674561"></p><ul><li><p><strong>-z flow,<em>name</em>,<em>mode</em>,[<em>filter</em>]</strong></p><p>Displays the flow of data between two nodes. Output is the same as ASCII format saved from GUI.</p><p><em>name</em> specifies the flow name. It can be one of:</p><p>显示在两端的数据流。输出与从GUI保存的ASCII格式相同。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">any         All frames</span><br><span class="line">icmp        ICMP</span><br><span class="line">icmpv6      ICMPv6</span><br><span class="line">lbm_uim     UIM</span><br><span class="line">tcp         TCP</span><br></pre></td></tr></table></figure><p><em>mode</em> specifies the address type. It can be one of:</p><p><em>mode</em> 指定了地址类型。可以是以下之一</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">standard    Any address</span><br><span class="line">network     Network address</span><br></pre></td></tr></table></figure><p>Example: <strong>-z flow,tcp,network</strong> will show data flow for all TCP frame</p><p>例如： <strong>-z flow,tcp,network</strong>将展示所有TCP帧的数据流</p></li></ul><ul><li><p><strong>-z follow,<em>prot</em>,<em>mode</em>,<em>filter</em>[<em>,range</em>]</strong></p><p>Displays the contents of a TCP or UDP stream between two nodes. </p><p>展示在两端的TCP或是UDP流的内容。</p><p><em>prot</em> specifies the transport protocol. It can be one of:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tcp     TCP</span><br><span class="line">udp     UDP</span><br><span class="line">tls     TLS or SSL</span><br></pre></td></tr></table></figure><p><em>mode</em> specifies the output mode. It can be one of:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ascii    ASCII output with dots <span class="keyword">for</span> non-printable characters</span><br><span class="line">ebcdic   EBCDIC output with dots <span class="keyword">for</span> non-printable characters</span><br><span class="line">hex      Hexadecimal and ASCII data with offsets</span><br><span class="line">raw      Hexadecimal data</span><br></pre></td></tr></table></figure></li></ul><p>  <em>filter</em> specifies the stream to be displayed. UDP/TCP streams are selected with either the stream index or IP address plus port pairs. TLS streams are selected with the stream index. For example:</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ip-addr0:port0,ip-addr1:port1</span><br><span class="line">stream-index</span><br></pre></td></tr></table></figure><p>  <em>range</em> optionally specifies which “chunks” of the stream should be displayed.</p><p>  Example: <strong>-z “follow,tcp,hex,1”</strong> will display the contents of the second TCP stream (the first is stream 0) in “hex” format.</p><p>  例如： <strong>-z “follow,tcp,hex,1”</strong>将会使用“hex”格式展示第二个TCP流的内容（第一个是stream 0）</p><blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt; ===================================================================</span><br><span class="line">&gt; Follow: tcp,hex</span><br><span class="line">&gt; Filter: tcp.stream eq 1</span><br><span class="line">&gt; Node 0: 200.57.7.197:32891</span><br><span class="line">&gt; Node 1: 200.57.7.198:2906</span><br><span class="line">&gt; 00000000  00 00 00 22 00 00 00 07  00 0a 85 02 07 e9 00 02  ...&quot;.... ........</span><br><span class="line">&gt; 00000010  07 e9 06 0f 00 0d 00 04  00 00 00 01 00 03 00 06  ........ ........</span><br><span class="line">&gt; 00000020  1f 00 06 04 00 00                                 ......</span><br><span class="line">&gt; 00000000  00 01 00 00                                       ....</span><br><span class="line">&gt; 00000026  00 02 00 00</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><p>  <img src="/2019/04/26/tshark使用方法/1553425530931.png" alt="1553425530931"></p><p>  Example: <strong>-z “follow,tcp,ascii,200.57.7.197:32891,200.57.7.198:2906”</strong> will display the contents of a TCP stream between 200.57.7.197 port 32891 and 200.57.7.98 port 2906.</p><p>  例如：<strong>-z “follow,tcp,ascii,200.57.7.197:32891,200.57.7.198:2906”</strong>将会展示200.57.7.197的32891端口与200.57.7.98的2906端口的TCP流的内容</p><blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt; ===================================================================</span><br><span class="line">&gt; Follow: tcp,ascii</span><br><span class="line">&gt; Filter: (omitted for readability)</span><br><span class="line">&gt; Node 0: 200.57.7.197:32891</span><br><span class="line">&gt; Node 1: 200.57.7.198:2906</span><br><span class="line">&gt; 38</span><br><span class="line">&gt; ...&quot;.....</span><br><span class="line">&gt; ................</span><br><span class="line">&gt; 4</span><br><span class="line">&gt; ....</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><ul><li><p><strong>-z hosts [,ipv4][,ipv6]</strong></p><p>Dump any collected IPv4 and/or IPv6 addresses in “hosts” format. Both IPv4 and IPv6 addresses are dumped by default.Addresses are collected from a number of sources, including standard “hosts” files and captured traffic.</p></li></ul><ul><li><p><strong>-z http,stat,</strong></p><p>Calculate the HTTP statistics distribution. Displayed values are the HTTP status codes and the HTTP request methods.</p><p><img src="/2019/04/26/tshark使用方法/1553418861258.png" alt="1553418861258"></p></li></ul><ul><li><p><strong>-z</strong> http,tree</p><p>Calculate the HTTP packet distribution. Displayed values are the HTTP request modes and the HTTP status codes.</p><p><img src="/2019/04/26/tshark使用方法/1553418910684.png" alt="1553418910684"></p></li></ul><ul><li><p><strong>-z http_srv,tree</strong></p><p>Calculate the HTTP requests and responses by server. For the HTTP requests, displayed values are the server IP address and server hostname. For the HTTP responses, displayed values are the server IP address and status.</p><p><img src="/2019/04/26/tshark使用方法/1553419156361.png" alt="1553419156361"></p></li></ul><ul><li><p><strong>-z</strong> icmp,srt[,<em>filter</em>]</p><p>Compute total ICMP echo requests, replies, loss, and percent loss, as well as minimum, maximum, mean, median and sample standard deviation SRT statistics typical of what ping provides.</p><p>Example: <strong>-z icmp,srt,ip.src==1.2.3.4</strong> will collect ICMP SRT statistics for ICMP echo request packets originating from a specific host.This option can be used multiple times on the command line.</p><p>计算总的ICMP回应请求，回复，丢失和百分比损失，以及ping提供的典型的最小值，最大值，平均值，中值和样本标准差SRT统计量。</p><p>例如：<strong>-z icmp,srt,ip.src==1.2.3.4</strong>将收集源自特定主机的ICMP回送请求数据包的ICMP SRT统计信息。可以在命令行上多次使用此选项。</p><p><img src="/2019/04/26/tshark使用方法/1553420285309.png" alt="1553420285309"></p></li></ul><ul><li><p><strong>-z io,phs[,<em>filter</em>]</strong></p><p>Create Protocol Hierarchy Statistics listing both number of packets and bytes. If no <em>filter</em> is specified the statistics will be calculated for all packets. If a <em>filter</em> is specified statistics will only be calculated for those packets that match the filter.This option can be used multiple times on the command line.</p><p>创建一个包含所有数据包和字节数的协议分层信息列表。</p><p><img src="/2019/04/26/tshark使用方法/1553420404357.png" alt="1553420404357"></p></li></ul><ul><li><p><strong>-z io,stat,<em>interval</em>[,<em>filter</em>][,<em>filter</em>][,<em>filter</em>]…</strong></p><p>Collect packet/bytes statistics for the capture in intervals of <em>interval</em> seconds. <em>Interval</em> can be specified either as a whole or fractional second and can be specified with microsecond (us) resolution. If <em>interval</em> is 0, the statistics will be calculated over all packets.</p><p>按时间间隔秒数收集捕获的数据包/字节数统计信息。时间间隔可以指定为整数或小数秒，并且可以使用微秒（us）。如果<em>interval</em>为0，则将计算所有数据包的统计信息。</p></li></ul><p>  If no <em>filter</em> is specified the statistics will be calculated for all packets.If one or more <em>filters</em> are specified statistics will be calculated for all filters and presented with one column of statistics for each filter.</p><p>  This option can be used multiple times on the command line.</p><p>  如果没有指定过滤条件，则计算所有数据包的统计信息。如果一个或多个过滤条件被指定，那么会为所有的过滤条件来计算统计信息，并为每个过滤条件显示一列统计信息。可以在命令行上多次使用此选项。</p><p>  Example: <strong>-z io,stat,1,ip.addr==1.2.3.4</strong> will generate 1 second statistics for all traffic to/from host 1.2.3.4.</p><p>  例如： <strong>-z io,stat,1,ip.addr==1.2.3.4</strong> 将为所有进出主机1.2.3.4的流量生成1秒的统计信息</p><p>  Example: <strong>-z “io,stat,0.001,smb&amp;&amp;ip.addr==1.2.3.4”</strong> will generate 1ms statistics for all SMB packets to/from host 1.2.3.4.</p><p>  例如： <strong>-z io,stat,1,smb&amp;&amp;ip.addr==1.2.3.4</strong> 将为所有进出主机1.2.3.4的SMB流量生成1毫秒的统计信息</p><p>  The examples above all use the standard syntax for generating statistics which only calculates the number of packets and bytes in each interval.</p><p>  上面的示例都使用标准语法来生成统计信息，该统计信息仅计算每个间隔中的数据包和字节数。</p><p>  <img src="/2019/04/26/tshark使用方法/1553422202759.png" alt="1553422202759"></p><p>  <img src="/2019/04/26/tshark使用方法/1553422247214.png" alt="1553422247214"></p><ul><li><p><strong>-z io,stat,<em>interval</em>,”[COUNT|SUM|MIN|MAX|AVG|LOAD](<em>field</em>)<em>filter</em>“</strong></p><p><strong>io,stat</strong> can also do much more statistics and calculate COUNT(), SUM(), MIN(), MAX(), AVG() and LOAD() using a slightly different filter syntax:</p><p><strong>io,stat</strong>还能做更多的统计和计算。如COUNT(), SUM(), MIN(), MAX(), AVG() and LOAD()，这些使用稍微不同的过滤器语法。</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;tshark使用方法&quot;&gt;&lt;a href=&quot;#tshark使用方法&quot; class=&quot;headerlink&quot; title=&quot;tshark使用方法&quot;&gt;&lt;/a&gt;tshark使用方法&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://www.wireshark.org/doc
      
    
    </summary>
    
      <category term="linux" scheme="https://dilidonglong.github.io/categories/linux/"/>
    
    
  </entry>
  
</feed>
